cscope 15 $HOME/cs452/p2/p2-refactored               0000543488
	@include/kernel/zx_clock_server.h

8 #i‚de‡
ZX_CLOCK_SERVER


10 
	#ZX_CLOCK_SERVER


	)

12 
	#API_CS_UNSUPPORTED
 0

	)

13 
	#API_CS_DELAY
 1

	)

14 
	#API_CS_DELAY_UNTIL
 2

	)

15 
	#API_CS_TIME
 3

	)

16 
	#API_CS_EXIT
 4

	)

20 
	mty≥
;

21 
	mvÆue
;

22 } 
	tzx_time_ªque°
;

26 
	#TIME_REQUEST_NONE
 0

	)

27 
	#TIME_REQUEST_READY
 1

	)

28 
	#TIME_REQUEST_TICK
 2

	)

31 
	#TIME_REQUEST_CONFIG
 1

	)

33 
zx_˛ock_£rvî
();

38 
timî_gëVÆue
();

39 
timî_gëC⁄åﬁ
();

41 
timî_£tLﬂd
(
√wVÆue
);

42 
timî_£tE«bÀ
();

43 
timî_£tClkSñ
();

44 
timî_£tDißbÀ
();

	@include/kernel/zx_clockserver_heap.h

8 #i‚de‡
ZX_CLOCKSERVER_HEAP


9 
	#ZX_CLOCKSERVER_HEAP


	)

15 
	shóp_node
{

16 
	mtid
;

17 
	mwake_up_time
;

18 }
	tzx_˛ock£rvî_hóp_node
;

20 
zx_˛ock£rvî_hóp_öô
–
zx_˛ock£rvî_hóp_node
 *
hóp
, 
hóp_size
, *
íd_node_ödex
 );

21 
zx_˛ock£rvî_hóp_ö£π
–
zx_˛ock£rvî_hóp_node
 *
hóp
, *
√xt_node_ödex
, 
tid
, 
wake_up_time
 );

22 
zx_˛ock£rvî_hóp_ªmove
–
zx_˛ock£rvî_hóp_node
 *
node
, *
íd_node_ödex
);

23 
zx_˛ock£rvî_mö_hópify_a·î_dñëe
–
zx_˛ock£rvî_hóp_node
 *
hóp
, 
ödex
 );

24 
zx_˛ock£rvî_mö_hópify_a·î_ö£π
–
zx_˛ock£rvî_hóp_node
 *
hóp
, 
ödex
 );

25 
zx_˛ock£rvî_hóp_node_sw≠
–
zx_˛ock£rvî_hóp_node
 *
∑ª¡_node
, zx_˛ock£rvî_hóp_nodê*
chûd_node
);

27 
debug_¥öt_˛ock£rvî_hóp
–
zx_˛ock£rvî_hóp_node
 *
hóp
, 
ödex
 );

	@include/kernel/zx_err.h

11 #i‚de‡
ZX_KERNEL_ERR_CODES


12 
	#ZX_KERNEL_ERR_CODES


	)

14 
	#ERR_SUCCESS
 0

	)

15 
	#ERR_IMPOSSIBLE_TASKID
 -1

	)

16 
	#ERR_NONEXISTENT_TASK
 -2

	)

17 
	#ERR_SEND_RECEIVE_REPLY_TRANSACTION_INCOMPLETE
 -3

	)

18 
	#ERR_SENDER_NOT_REPLY_BLOCKED
 -3

	)

19 
	#ERR_INSUFFICIENT_REPLY_BUFFER
 -4

	)

22 
	#ERR_CLOSURE_NONE
 0

	)

23 
	#ERR_CLOSURE_TASK_IS_SEND_BLOCKED
 -1

	)

24 
	#ERR_CLOSURE_TASK_IS_RECEIVE_BLOCKED
 -2

	)

25 
	#ERR_CLOSURE_TASK_IS_REPLY_BLOCKED
 -3

	)

27 
	#ERR_CANNOT_CREATE_TASK
 (-1)

	)

30 
	#MSG_SERVER_EXITED
 12

	)

32 
	#TRANSMISSION_ERROR
 -4

	)

33 
	#RECEIVE_ERROR
 -4

	)

	@include/kernel/zx_err_strings.h

11 #i‚de‡
ZX_KERNEL_ERR_MSG


12 
	#ZX_KERNEL_ERR_MSG


	)

14 
	#ERRMSG_IMPOSSIBLE_TASKID
 \

15 "Eº‹: ImpossibÀ Task ID"

	)

17 
	#ERRMSG_NONEXISTENT_TASK
 \

18 "Eº‹: N⁄ Exi°íàTask"

	)

20 
	#ERRMSG_SEND_RECEIVE_REPLY_TRANSACTION_INCOMPLETE
 \

21 "Eº‹: Síd-Re˚ive-Rïly Tønß˘i⁄ Incom∂ëe"

	)

	@include/kernel/zx_helper.h

9 #i‚de‡
ZX_HELPER


10 
	#ZX_HELPER


	)

13 
	~<zx_èsks.h
>

15 
	#FOREVER
 ;;)

	)

17 
debug_¥öt_li°
();

20 
zx_td
* 
zx_gë_a˘ive_td
();

21 
zx_td
* 
zx_gë_td
(
tid
);

22 
zx_gë_a˘ive_èsk_id
();

23 
zx_£t_a˘ive_èsk_id
(
tid
);

25 
zx_cou¡_åaûög_zîos
(
x
);

26 
zx_cou¡_åaûög_zîos_64
(
x
);

27 
zx_£t_bô_64
(
x
, 
ödex
, 
vÆue
);

29 
zx_is_èskid_vÆid
(
tid
);

30 
zx_d€s_èsk_exi°
(
tid
);

32 
debug_¥öt_°ack
(
°ack_ªgi°î
, * 
sour˚
);

33 
debug_¥öt_ª˚ive_queue
–
ª˚ivî_tid
 );

35 
föd_√xt_bô_£t
–
byã
 , 
pos
 );

38 
	#MAX_RANDOM
 ((1 << 15Ë- 1)

	)

41 
	#DEBUG_PRINT_STACK_SP
 0

	)

42 
	#DEBUG_PRINT_STACK_IP
 1

	)

43 
	#DEBUG_PRINT_STACK_CUSTOM
 2

	)

45 
	#TRUE
 1

	)

46 
	#FALSE
 0

	)

	@include/kernel/zx_irq_device.h

9 #i‚de‡
ZX_IRQ_DEVICE_H


10 
	#ZX_IRQ_DEVICE_H


	)

16 
	#UART1_BASE_ADDR
 0x808C0000

	)

17 
	#UART2_BASE_ADDR
 0x808D0000

	)

23 
	#UART1_CONTROL
 (
UART1_BASE_ADDR
 + 0x0014)

	)

24 
	#UART2_CONTROL
 (
UART2_BASE_ADDR
 + 0x0014)

	)

30 
	#RIE_MASK
 (0x1 << 4)

31 
	#TIE_MASK
 (0x1 << 5)

32 
	#MIE_MASK
 (0x1 << 3)

33 

	)

38 
	#UART1_STATUS
 (
UART1_BASE_ADDR
 + 0x001C)

	)

39 
	#UART2_STATUS
 (
UART2_BASE_ADDR
 + 0x001C)

	)

45 
	#RIS_MASK
 (1 << 1)

	)

46 
	#TIS_MASK
 (1 << 2)

	)

47 
	#MIS_MASK
 (1 << 0)

	)

53 
	#INTR_SOURCE_UART1_RX
 23

54 
	#INTR_SOURCE_UART1_TX
 24

	)

56 
	#INTR_SOURCE_UART1_MODEM
 1

57 

	)

58 
	#INTR_SOURCE_UART2_RX
 25

	)

59 
	#INTR_SOURCE_UART2_TX
 26

	)

63 
zx_devi˚_öå_dißbÀ_Æl
();

64 
zx_devi˚_öå_˛ór_Æl
();

66 
zx_devi˚_öô
–
devi˚_numbî
);

67 
zx_öô_modem_öå
();

69 
zx_devi˚_öå_⁄
–
devi˚_numbî
 );

70 
zx_devi˚_öå_off
–
devi˚_numbî
 );

71 
zx_devi˚_öå_˛ór
–
devi˚_numbî
 );

73 
zx_h™dÀ_u¨t1_å™smô_öãºu±
(
sour˚
, 
make_deÁu…
);

74 
zx_h™dÀ_u¨t_öãºu±
(
sour˚
, 
make_deÁu…
);

75 
zx_h™dÀ_timî_öãºu±
(
make_deÁu…
);

	@include/kernel/zx_irq_vic.h

12 #i‚de‡
ZX_IRQ


14 
	#ZX_IRQ


	)

17 
	#IRQ_TIMER
 
TIMER_1


	)

24 
	#INTR_SOURCE_TIMER_1
 4

	)

25 
	#TIMER1_INTR_MASK
 (0x1 << 
INTR_SOURCE_TIMER_1
 )

	)

28 
	#INTR_SOURCE_UART_1
 52

	)

29 
	#UART1_INTR_MASK
 (0x1 << (
INTR_SOURCE_UART_1
 - 32Ë)

	)

31 
	#INTR_SOURCE_UART_2
 54

	)

32 
	#UART2_INTR_MASK
 (0x1 << (
INTR_SOURCE_UART_2
 - 32Ë)

	)

38 
	#VIC1_BASE
 0x800B0000

	)

39 
	#VIC2_BASE
 0x800C0000

	)

41 
	#IRQ_STATUS_OFFSET
 0x0

	)

42 
	#IRQ_RAW_OFFSET
 0x08

	)

43 
	#IRQ_INTR_ENABLE_OFFSET
 0x10

	)

44 
	#IRQ_INTR_CLEAR_OFFSET
 0x14

	)

46 
	#IRQ_PROTECTION_OFFSET
 0x20

	)

49 
	#IRQ_CPSR_DISABLE_MASK
 (0x1 << 7)

	)

51 
zx_ª£t_Æl_öãºu±s
();

52 
zx_vic_dißbÀ_Æl_öãºu±s
();

53 
zx_vic_íabÀ_Æl_öãºu±s
();

55 
zx_vic_íabÀ_öãºu±
–
devi˚_numbî
 );

56 
zx_vic_dißbÀ_öãºu±
–
devi˚_numbî
 );

58 
zx_gë_öãºu±_sour˚
();

	@include/kernel/zx_kernel_body.h

19 #i‚de‡
ZX_KERNEL_BODY


20 
	#ZX_KERNEL_BODY


	)

24 * 
	m¨g1
;

25 * 
	m¨g2
;

26 * 
	m¨g3
;

27 * 
	m¨g4
;

28 * 
	m¨g5
;

29 * 
	m¨g6
;

30 * 
	m¨g7
;

31 
	mswi_numbî
;

33 } 
	tzx_ªque°
;

35 
zx_h™dÀ
–*
ªq
 );

36 
zx_kî√l_öô
(
¨g
);

38 
zx_ªque°
* 
zx_ßve_c⁄ãxt_™d_ªtu∫_to_kî√l
();

39 
zx_ªque°
* 
zx_ª°‹e_c⁄ãxt
(
tid
);

41 
zx_ªque°
* 
zx_gë_√xt_ªque°
();

43 
zx_ªque°
* 
zx_gë_˛osuª_îr‹s
();

45 
zx_öôülize_globÆs
();

47 
zx_idÀ
();

48 
åuly_idÀ
();

	@include/kernel/zx_kernel_config.h

23 #i‚de‡
ZX_KERNELCONFIG


24 
	#ZX_KERNEL_CONFIG


	)

26 
	#KB
 1024

	)

28 
	#SWI_VECTOR
 0x08

	)

29 
	#IRQ_VECTOR
 0x18

	)

31 
	#PRIORITY_COUNT
 32

	)

32 
	#TASK_COUNT
 64

	)

34 
	#START_TID
 0

	)

36 
	#MEMORY_BASE
 0x00044f88

	)

37 
	#MEMORY_END
 0x01fdd000

	)

40 
	#KERNEL_CODE_SIZE
 ( 128 * 
KB
)

	)

41 
	#GLOBAL_VARIABLES_SPACE_SIZE
 ( 2 * 
KB
 )

	)

43 
	#TASK_STACK_SPACE_SIZE
 ( 400 * 
KB
)

	)

45 
	#READY_QUEUE_HEADER_SPACE_SIZE
 ( 
PRIORITY_COUNT
 * 4 )

46 
	#READY_QUEUE_SPACE_SIZE
 ( 768 )

47 
	#RECEIVE_QUEUE_HEADER_SPACE_SIZE
 ( 
TASK_COUNT
 * 4 )

48 
	#RECEIVE_QUEUE_SPACE_SIZE
 ( 
TASK_COUNT
 * 16 )

49 
	#TASK_DESCRIPTOR_SPACE_SIZE
 ( 64 * 64 )

50 

	)

51 
	#GLOBAL_VARIABLES_BASE
 (
MEMORY_BASE
 + 
KERNEL_CODE_SIZE
)

	)

53 
	#READY_QUEUE_HEADER_BASE
 (
GLOBAL_VARIABLES_BASE
 + 
GLOBAL_VARIABLES_SPACE_SIZE
)

	)

54 
	#READY_QUEUE_BASE
 (
READY_QUEUE_HEADER_BASE
 + 
READY_QUEUE_HEADER_SPACE_SIZE
)

	)

56 
	#RECEIVE_QUEUE_HEAD_HEADER_BASE
 (
READY_QUEUE_BASE
 + 
READY_QUEUE_SPACE_SIZE
)

	)

57 
	#RECEIVE_QUEUE_TAIL_HEADER_BASE
 (
RECEIVE_QUEUE_HEAD_HEADER_BASE
 + 
RECEIVE_QUEUE_HEADER_SPACE_SIZE
)

	)

58 
	#RECEIVE_QUEUE_BASE
 (
RECEIVE_QUEUE_TAIL_HEADER_BASE
 + 
RECEIVE_QUEUE_HEADER_SPACE_SIZE
)

	)

60 
	#TASK_DESCRIPTOR_BASE
 (
RECEIVE_QUEUE_BASE
 + 
RECEIVE_QUEUE_SPACE_SIZE
)

	)

61 
	#USER_STACK_SPACE_BASE
 (
TASK_DESCRIPTOR_BASE
 + 
TASK_DESCRIPTOR_SPACE_SIZE
)

	)

64 
	#TD_BIT_DATA
 (
GLOBAL_VARIABLES_BASE
 + 0x4)

65 

	)

66 
	#ACTIVE_TASK_ID
 (
GLOBAL_VARIABLES_BASE
 + 0xC)

	)

67 
	#PRIORITY_BIT_DATA
 (
GLOBAL_VARIABLES_BASE
 + 0x10)

	)

68 
	#REQUEST_STRUCTURE
 (
GLOBAL_VARIABLES_BASE
 + 0x14)

69 

	)

70 
	#NAME_SERVER_TID
 (
GLOBAL_VARIABLES_BASE
 + 0x14 + 32)

71 

	)

72 
	#STAT_VAR1
 (
GLOBAL_VARIABLES_BASE
 + 0x14 + 36)

73 

	)

74 
	#STAT_VAR2
 (
GLOBAL_VARIABLES_BASE
 + 0x14 + 40)

75 

	)

76 
	#AWAIT_TIMER_TID
 (
GLOBAL_VARIABLES_BASE
 + 0x14 + 44)

77 

	)

79 
	#AWAIT_UART1_TX_TID
 (
AWAIT_TIMER_TID
 + 4)

80 

	)

81 
	#AWAIT_UART1_RX_TID
 (
AWAIT_UART1_TX_TID
 + 4)

82 

	)

83 
	#AWAIT_UART2_TX_TID
 (
AWAIT_UART1_RX_TID
 + 4)

84 

	)

85 
	#AWAIT_UART2_RX_TID
 (
AWAIT_UART2_TX_TID
 + 4)

86 

	)

88 
	#CLOCK_SERVER_TID
 (
AWAIT_UART2_RX_TID
 + 4)

89 

	)

90 
	#UART1_TX_SERVER_TID
 (
CLOCK_SERVER_TID
 + 4)

91 
	#UART1_RX_SERVER_TID
 (
UART1_TX_SERVER_TID
 + 4)

92 
	#UART2_TX_SERVER_TID
 (
UART1_RX_SERVER_TID
 + 4)

93 
	#UART2_RX_SERVER_TID
 (
UART2_TX_SERVER_TID
 + 4)

94 

	)

95 
	#VAR_IDLE_TASK_TIME
 ( 
UART2_RX_SERVER_TID
 + 4 )

96 

	)

97 
	#VAR_MODEM_CTS_ON
 ( 
VAR_IDLE_TASK_TIME
 + 4 )

98 
	#VAR_OLD_UART1_FLAG
 ( 
VAR_MODEM_CTS_ON
 + 4 )

	)

99 
	#VAR_TXFE_ON
 ( 
VAR_OLD_UART1_FLAG
 + 4 )

	)

101 
	#DEBUG_VAR_BASE
 (
VAR_TXFE_ON
 + 4 )

102 

	)

105 
	#DEBUG_VAR_MISSED_INTR_CLOCK
 (
DEBUG_VAR_BASE
 + 0x0 )

	)

106 
	#DEBUG_VAR_MISSED_INTR_UART1_TX
 (
DEBUG_VAR_BASE
 + 0x4 )

	)

107 
	#DEBUG_VAR_MISSED_INTR_UART1_RX
 (
DEBUG_VAR_BASE
 + 0x8 )

	)

108 
	#DEBUG_VAR_MISSED_INTR_UART2_TX
 (
DEBUG_VAR_BASE
 + 0xC)

	)

109 
	#DEBUG_VAR_MISSED_INTR_UART2_RX
 (
DEBUG_VAR_BASE
 + 0x10)

	)

112 
	#DEBUG_VAR_10
 (
DEBUG_VAR_BASE
 + 0x14)

	)

113 
	#DEBUG_VAR_20
 (
DEBUG_VAR_BASE
 + 0x18)

	)

114 
	#DEBUG_VAR_30
 (
DEBUG_VAR_BASE
 + 0x1C)

	)

115 
	#DEBUG_VAR_40
 (
DEBUG_VAR_BASE
 + 0x20)

	)

118 
	#HEAP_SIZE
 (
TASK_STACK_SPACE_SIZE
 / 4)

	)

121 
	#ONE_TICK
 (5080)

	)

123 
	#ONE_MILLISECOND_TICK
 (508)

	)

	@include/kernel/zx_kernel_head.h

10 #i‚de‡
ZX_KERNEL_HEAD


11 
	#ZX_KERNEL_HEAD


	)

13 
	#NULL
 0

	)

15 
zx_fú°_u£r_èsk
();

	@include/kernel/zx_memory.h

8 #i‚de‡
ZX_MEMORY


9 
	#ZX_MEMORY


	)

11 
	ghóp_chunk
;

13 
	shóp_chunk
{

14 
hóp_chunk
 *
	m√xt
;

15 }
	tzx_hóp_chunk
;

18 * 
zx_mem˝y
–* 
de°
, *
§c
, 
byãs
);

24 * 
zx_Æloc
();

25 
zx_‰ì
();

27 
zx_hóp_¸óã
–* 
td
);

29 
«me£rvî_èsk
();

31 
debug_wÆk_hóp
( );

33 * 
zx_mem£t
(*
s
, 
c
, 
n
);

	@include/kernel/zx_ns.h

8 #i‚de‡
ZX_NS


9 
	#ZX_NS


	)

11 
	#API_NS_UNSUPPORTED
 0

	)

12 
	#API_NS_WHOIS
 1

	)

13 
	#API_NS_REGISTER
 2

	)

15 
	#API_NS_HANDSHAKE
 3

	)

16 
	#API_NS_EXIT
 4

	)

18 
	#API_NS_REGISTER_SUCCESS
 0

	)

19 
	#API_NS_REGISTER_FAIL
 (-1)

	)

21 
	#API_NS_WHOIS_FAIL
 (-1)

	)

23 
zx_«me_£rvî
();

26 
	mty≥
;

28 
	mtid
;

29 * 
	m«me
;

31 } 
	tzx_ns_ªque°
;

	@include/kernel/zx_ns_tree.h

8 #i‚de‡
ZX_NS_TREE


9 
	#ZX_NS_TREE


	)

11 
	gb°_node
;

13 
	sb°_node
{

14 
	mhash_vÆue
;

15 
	mtid
;

16 
b°_node
 *
	mÀ·
;

17 
b°_node
 *
	mright
;

18 }
	tzx_b°_node
;

20 
zx_b°_add_by_«me
–
zx_b°_node
** 
roŸ
,*
«me
, 
tid
);

21 
zx_b°_node
* 
zx_ö£π_öto_b°
–zx_b°_nodê*
roŸ
,
hash_vÆue
, 
tid
);

22 
zx_‰ì_b°
–
zx_b°_node
 *
roŸ
 );

23 
zx_b°_gë_by_«me
–*
«me
, 
zx_b°_node
 *
roŸ
);

24 
zx_gë_hash_vÆue
–*
«me
 );

26 
zx_gë_èsk_id_by_«me
–
hash_vÆue
, 
zx_b°_node
 *
roŸ
 );

27 
zx_b°_node
* 
zx_b°_bÆ™cög
(zx_b°_nodê*
node
);

28 
zx_b°_föd_height
(
zx_b°_node
* 
node
);

29 
zx_b°_gë_diff
(
zx_b°_node
* 
node
);

30 
zx_b°_node
* 
À·_right_rŸ©i⁄
(zx_b°_node* 
∑ª¡
);

31 
zx_b°_node
* 
À·_À·_rŸ©i⁄
(zx_b°_node* 
∑ª¡
);

32 
zx_b°_node
* 
right_À·_rŸ©i⁄
(zx_b°_nodê*
∑ª¡
);

33 
zx_b°_node
* 
right_right_rŸ©i⁄
(zx_b°_nodê*
∑ª¡
);

35 
debug_b°_åavî£_po°‹dî
–
zx_b°_node
 *
roŸ
 );

37 
Fªe_b°
–
zx_b°_node
 **
roŸ
 );

	@include/kernel/zx_queue.h

27 
	#ZX_Q_SUCCESS
 1

	)

28 
	#ZX_ERR_QUEUE_EMPTY
 2

	)

29 
	#ZX_ERR_QUEUE_FULL
 3

	)

31 
	#ZX_ERRMSG_QUEUE_FULL
 "Eº‹: QueuêFuŒ\n"

	)

32 
	#ZX_ERRMSG_QUEUE_EMPTY
 "Eº‹: QueuêEm±y\n"

	)

35 *
	mqueue
;

36 
	mqueue_size
;

38 
	mhód
;

39 
	mèû
;

41 
	mis_em±y_Êag
;

42 
	mis_fuŒ_Êag
;

44 
	md©a_size
;

45 }
	tzx_cúcuœr_queue
;

47 
zx_queue_ö£π
–
zx_cúcuœr_queue
 **
q
, *
d©a
);

48 
zx_queue_ªmove
–
zx_cúcuœr_queue
 **
q
, *
d©a
);

49 
zx_is_queue_em±y
–
hód
, 
èû
);

50 
zx_queue_is_fuŒ
–
hód
, 
èû
, 
queue_size
);

51 
zx_queue_öôülize
–
zx_cúcuœr_queue
 **
q
, *
queue
, 
d©a_size
, 
queue_size
 );

	@include/kernel/zx_ready_queue.h

10 #i‚de‡
ZX_QUEUE


11 
	#ZX_QUEUE


	)

13 
	#NULL
 0

	)

19 
	gªady_queue
 ;

20 
	sªady_queue
{

21 
	mtid
;

22 
ªady_queue
 *
	m√xt
;

23 
ªady_queue
 *
	m¥ev
;

24 }
	tzx_ªady_queue_node
;

30 
	gª˚ive_queue_node
;

31 
	sª˚ive_queue_node
{

32 
	mtid
;

33 *
	mmsg
;

34 
	mmsgÀn
;

35 
ª˚ive_queue_node
 *
	m√xt
;

36 }
	tzx_ª˚ive_queue_node
;

39 
zx_q_≠≥nd_to_íd
–
tid
, 
¥i‹ôy
 );

40 
zx_q_≠≥nd_to_≥nu…im©e
–
tid
, 
¥i‹ôy
 );

42 
zx_q_ªmove_¥i‹ôy
–
¥i‹ôy
);

43 
zx_q_add_¥i‹ôy
–
¥i‹ôy
);

44 
zx_q_gë_highe°_¥i‹ôy
();

46 
zx_q_ªmove_node
–
tid
, 
¥i‹ôy
 );

47 
zx_q_gë_√xt_tid
();

49 
zx_q_‰ì_node
–
zx_ªady_queue_node
 *
node
 );

50 * 
zx_q_gë_hód_addr
–
¥i‹ôy
 );

52 
zx_ªady_queue_node
* 
zx_q_¸óã_node
–
tid
);

53 
zx_ªady_queue_node
* 
zx_q_gë_node
–
tid
 );

56 
zx_ª˚ive_queue_node
* 
zx_ª˚ive_q_¸óã_node
–
tid
, *
msg
, 
msgÀn
);

57 
zx_ª˚ive_q_≠≥nd_to_íd
–
tid
, 
zx_ª˚ive_queue_node
* 
√w_node
 );

58 
zx_ª˚ive_queue_node
* 
zx_ª˚ive_q_gë_√xt_node
(
tid
);

59 
zx_ª˚ive_q_‰ì_hód
–
zx_ª˚ive_queue_node
 *
node
 );

60 
zx_ª˚ive_queue_node
* 
zx_ª˚ive_q_gë_node
–
¨øy_ödex
);

61 * 
zx_ª˚ive_q_gë_èû_addr
–
¨øy_ödex
 );

62 * 
zx_ª˚ive_q_gë_hód_addr
–
¨øy_ödex
 );

	@include/kernel/zx_system_call_handlers.h

12 #i‚de‡
ZX_SYSTEM_CALL_HANDLERS


13 
	#ZX_SYSTEM_CALL_HANDLERS


	)

15 
	~<zx_kî√l_body.h
>

18 
zx_¸óã
–
¥i‹ôy
, (*
code
)() );

19 
zx_exô
();

20 
zx_my_tid
();

21 
zx_∑ª¡_tid
();

24 
zx_öôülize_°ack
–* 
ba£
, *
zx_èsk
 );

28 
debug_m™y_¨gs
–
zx_ªque°
* 
ªq
);

30 
zx_awaô_evít
(
evít_numbî
);

31 
zx_h™dÀ_hwi
(
devi˚_numbî
);

33 
zx_ª∂y
–
£ndîtid
, *
ª∂y
, 
ª∂y_Àn
);

34 
zx_ª˚ive
–*
£ndîtid
, *
mesßge
, 
msgÀn
);

35 
zx_£nd
–
ªcv_tid
, *
mesßge
, 
msgÀn
, *
ª∂y
, 
ª∂yÀn
 );

37 
zx_shutdown
();

38 
zx_kûl
( );

	@include/kernel/zx_system_calls.h

10 #i‚de‡
ZX_SYSTEM_CALLS


11 
	#ZX_SYSTEM_CALLS


	)

13 
	#SWI_NONE
 0

	)

14 
	#SWI_CREATE_TASK
 1

	)

15 
	#SWI_PASS
 2

	)

16 
	#SWI_EXIT
 3

	)

17 
	#SWI_MYTID
 4

	)

18 
	#SWI_MYPTID
 5

	)

19 
	#SWI_SEND
 6

	)

20 
	#SWI_RECEIVE
 7

	)

21 
	#SWI_REPLY
 8

	)

22 
	#SWI_ALLOC
 9

	)

23 
	#SWI_FREE
 10

	)

24 
	#SWI_AWAIT_EVENT
 11

	)

25 
	#SWI_SHUTDOWN
 12

	)

26 
	#SWI_KILL
 13

	)

28 
	#DEBUG_SWI_MANYARGS
 90

	)

30 
	#HWI
 100

	)

32 
	#SWI_ERROR
 255

	)

34 
	#EVENT_TIMER
 1

	)

36 
	#EVENT_UART1_RX
 2

	)

37 
	#EVENT_UART1_TX
 3

	)

38 
	#EVENT_UART2_RX
 4

	)

39 
	#EVENT_UART2_TX
 5

	)

41 
	#EVENT_UART1_TRANSMIT_ANYINTR
 6

	)

42 
	#EVENT_UART1_TRANSMIT_MODEM
 7

	)

45 
MyP¨ítTid
();

46 
MyTid
();

47 
Exô
();

48 
Cª©e
–
¥i‹ôy
, (*
zx_èsk
)() );

49 
Pass
();

50 
Síd
–
tid
, *
mesßge
, 
msgÀn
, *
ª∂y
, 
ª∂yÀn
 );

51 
Re˚ive
–*
tid
, *
mesßge
, 
msgÀn
 );

52 
Rïly
–
tid
, *
ª∂y
, 
ª∂yÀn
 );

53 * 
AŒoc
();

54 
Fªe
();

56 
WhoIs
–* 
«me
 );

57 
Regi°îAs
–* 
«me
 );

59 
AwaôEvít
(
evít_numbî
);

60 
Shutdown
();

61 
Kûl
();

64 
zx_kî√l_öô
(
¨g
);

65 
DebugM™yArgs
(
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
);

68 
Cª©eNameSîvî
();

69 
Clo£NameSîvî
();

70 
Clo£ClockSîvî
();

71 
Cª©eClockSîvî
();

73 
Cª©eUARTSîvîs
();

74 
Clo£UARTSîvîs
();

77 
Dñay
(
ticks
);

78 
Time
();

79 
DñayU¡û
(
ticks
);

82 
PutC
(
ch™√l
, 
c
);

83 
GëC
(
ch™√l
);

85 
PutMu…ùÀ
(
ch™√l
, * 
¨øy
);

	@include/kernel/zx_tasks.h

12 #i‚de‡
ZX_TASKS


13 
	#ZX_TASKS


	)

15 
	~"zx_mem‹y.h
"

16 
	~"zx_kî√l_c⁄fig.h
"

17 
	~"zx_timî.h
"

18 
	~"zx_˛ock£rvî_hóp.h
"

20 
	sèsk_des¸ùt‹
 {

22 
	mtid
;

23 
	mpid
;

24 
	m°©e
;

25 
	m¥i‹ôy
;

27 *
	m°ack_ba£
;

28 *
	m°ack_limô
;

29 *
	m•
;

30 
	m•§
;

31 
	mªtu∫_vÆue
;

33 
zx_hóp_chunk
* 
	mhóp_hód
;

34 
zx_hóp_chunk
* 
	mhóp_èû
;

37 } 
	tzx_td
;

43 
	#TASK_STATE_READY
 0

	)

44 
	#TASK_STATE_ACTIVE
 1

	)

45 
	#TASK_STATE_ZOMBIE
 2

	)

47 
	#TASK_STATE_RECEIVE_BLOCKED
 3

	)

48 
	#TASK_STATE_SEND_BLOCKED
 4

	)

49 
	#TASK_STATE_REPLY_BLOCKED
 5

	)

50 
	#TASK_STATE_EVENT_BLOCKED
 6

	)

52 
	#TASK_NORMAL_CPSR
 0x00000010

	)

53 
	#TASK_NONINTERRUPTABLE_CPSR
 (
TASK_NORMAL_CPSR
 | (1 << 7))

	)

55 
	#R0_INIT_VAL
 0x00000000

	)

56 
	#R1_INIT_VAL
 0x11111111

	)

57 
	#R2_INIT_VAL
 0x22222222

	)

58 
	#R3_INIT_VAL
 0x33333333

	)

59 
	#R4_INIT_VAL
 0x44444444

	)

60 
	#R5_INIT_VAL
 0x55555555

	)

61 
	#R6_INIT_VAL
 0x66666666

	)

62 
	#R7_INIT_VAL
 0x77777777

	)

63 
	#R8_INIT_VAL
 0x88888888

	)

64 
	#R9_INIT_VAL
 0x99999999

	)

66 
	#R10_INIT_VAL
 0xAAAAAAAA

	)

67 
	#R11_INIT_VAL
 0xBBBBBBBB

	)

68 
	#R12_INIT_VAL
 0xCCCCCCCC

	)

70 
	#R14_INIT_VAL
 0x00000000

72 

	)

73 
	#TASK_NO_RETURN_VALUE
 (-2)

	)

75 
	#INVALID_TASK_ID
 (-1)

	)

77 
	#TASK_ARRAY_INDEX_PART_SIZE
 8

	)

78 
	#TASK_ARRAY_INDEX_PART_MASK
 0x0000003f

	)

80 
	#GENERATION_NUMBER_MASK
 0xffffff00

	)

81 
	#ARRAY_INDEX_MASK
 0x000000ff

	)

86 
	#FIRST_USER_TASK_PRIORITY
 20

	)

90 
	#ZX_CLOCK_NOTIFIER_PRIORITY
 2

	)

91 
	#ZX_CLOCK_SERVER_PRIORITY
 3

	)

93 
	#ZX_UART1_TX_NOTIFIER_PRIORITY
 0

	)

94 
	#ZX_UART1_TX_SERVER_PRIORITY
 1

	)

96 
	#ZX_UART1_RX_NOTIFIER_PRIORITY
 0

	)

97 
	#ZX_UART1_RX_SERVER_PRIORITY
 1

	)

99 
	#ZX_UART2_TX_NOTIFIER_PRIORITY
 4

	)

100 
	#ZX_UART2_TX_SERVER_PRIORITY
 5

	)

102 
	#ZX_UART2_RX_NOTIFIER_PRIORITY
 6

	)

103 
	#ZX_UART2_RX_SERVER_PRIORITY
 7

	)

105 
	#ZX_NAME_SERVER_PRIORITY
 10

	)

115 
	#IDLE_TASK_TID
 48

	)

117 
	#IDLE_TASK_PRIORITY
 (
PRIORITY_COUNT
-1)

	)

118 
	#IDLE_TASK
 
zx_idÀ


	)

119 
	#IDLE_TASK_TIMER
 
TIMER_2


	)

125 
	#IDLE_TASK_TIMER_INIT_VAL
 (
ONE_TICK
+100)

	)

127 
zx_idÀ
();

128 
åuly_idÀ_
();

136 
	#TIME_REQUEST_NONE
 0

	)

137 
	#TIME_REQUEST_READY
 1

	)

138 
	#TIME_REQUEST_TICK
 2

	)

143 
	#API_CS_UNSUPPORTED
 0

	)

144 
	#API_CS_DELAY
 1

	)

145 
	#API_CS_DELAY_UNTIL
 2

	)

146 
	#API_CS_TIME
 3

	)

147 
	#API_CS_EXIT
 4

	)

149 
	#TIME_REQUEST_CONFIG
 1

	)

154 
zx_˛ock_£rvî
();

155 
zx_em±y_hóp_™d_nŸify_˛õ¡_èsks
(
zx_˛ock£rvî_hóp_node
[], *);

158 
	mty≥
;

159 
	mvÆue
;

160 } 
	tzx_time_ªque°
;

167 
	#UART_REQUEST_NONE
 0

	)

168 
	#UART_REQUEST_READY
 1

	)

169 
	#UART_REQUEST_TICK
 2

	)

175 
	#API_UART_UNSUPPORTED
 0

	)

176 
	#API_UART1_GETC
 1

	)

177 
	#API_UART1_PUTC
 2

	)

178 
	#API_UART2_GETC
 3

	)

179 
	#API_UART2_PUTC
 4

	)

180 
	#API_UART_EXIT
 5

	)

183 
	#API_UART1_PUT_MULTIPLE
 8

	)

184 
	#API_UART2_PUT_MULTIPLE
 9

	)

186 
	#UART_WRITE_BYTE
 6

	)

188 
	#UART_REQUEST_CONFIG
 1

	)

190 
	#UART_TX_ERROR
 257

	)

191 
	#UART_TX_SUCCESS
 258

	)

193 
	#UART_RX_ERROR
 257

	)

194 
	#UART_RX_SUCCESS
 258

	)

196 
	#ZX_UART2_TX_BUFFER_SIZE
 1200

	)

197 
	#ZX_UART2_RX_BUFFER_SIZE
 100

	)

198 
	#ZX_UART1_TX_BUFFER_SIZE
 400

	)

199 
	#ZX_UART1_RX_BUFFER_SIZE
 100

	)

201 
	#ZXERR_UART_INVALID_CHANNEL
 -1

	)

204 
	#UART_PACKET_END_CHAR
 255

	)

206 
zx_u¨t2_tx_£rvî
();

207 
zx_u¨t2_tx_nŸifõr
();

208 
zx_u¨t2_rx_£rvî
();

209 
zx_u¨t2_rx_nŸifõr
();

211 
zx_u¨t1_tx_nŸifõr
();

212 
zx_u¨t1_tx_£rvî
();

213 
zx_u¨t1_rx_£rvî
();

214 
zx_u¨t1_rx_nŸifõr
();

217 
	mty≥
;

218 
	mvÆue
;

219 } 
	tzx_u¨t_ªque°
;

222 
	mty≥
;

223 
	mvÆue
;

224 } 
	tzx_u¨t2_ªque°
;

	@include/kernel/zx_testing.h

10 #i‚de‡
ZX_KERNEL_TESTING


11 
	#ZX_KERNEL_TESTING


	)

13 
	#FIRST_USER_TASK
 
zx_fú°_u£r_èsk_kî√l_4_a0


	)

15 
ã°1
();

16 
ã°2
();

17 
ã°3
();

18 
ã°4
();

19 
ã°5
();

21 
hóp_ã°
();

22 
«me£rvî_èsk
();

23 
ã°_ns
();

26 
zx_fú°_u£r_èsk_kî√l_3
();

27 
zx_˛ock_˛õ¡
();

28 
zx_fú°_u£r_èsk_kî√l_4
();

29 
zx_fú°_u£r_èsk_kî√l_4_a0
();

32 
zx_a0_mûe°⁄e_1_èsk_•ìd
();

33 
zx_a0_mûe°⁄e_1_èsk_°›pög_time
();

34 
zx_a0_mûe°⁄e_1_èsk_°›pög_di°™˚
();

35 
zx_c⁄ãxt_swôch_ã°_èsk
();

37 
zx_sh‹ã°_∑th_ã°
();

39 
ac˚Àøti⁄_¥ofûe_ã°ög
();

	@include/kernel/zx_timer.h

11 #i‚de‡
ZX_TIMER_H


12 
	#ZX_TIMER_H


	)

14 
	#ON
 1

	)

24 
	#TIMER_1
 0x80810000

	)

25 
	#TIMER_2
 0x80810020

	)

26 
	#TIMER_3
 0x80810080

	)

28 
	#TIMER_LOAD_OFFSET
 0x0

	)

29 
	#TIMER_VALUE_OFFSET
 0x04

	)

30 
	#TIMER_CONTROL_OFFSET
 0x08

	)

32 
	#TIMER_ENABLE_MASK
 0x80

	)

33 
	#TIMER_PERIODIC_MODE_MASK
 0x40

	)

34 
	#TIMER_2KHZ_CLKSEL_MASK
 0x00

	)

35 
	#TIMER_508KHZ_CLKSEL_MASK
 0x08

	)

37 
	#TIMER_CLEAR_OFFSET
 0x0C

	)

39 
zx_timî_lﬂd_vÆ
–
timî
, 
vÆ
 );

40 
zx_timî_£t_≥riodic
–
timî
, 
≥riodic
 );

41 
zx_timî_£À˘_˛ock
–
timî
, 
˛ock_mask
 );

42 
zx_timî_íabÀ
–
timî
 ) ;

43 
zx_timî_dißbÀ
–
timî
 ) ;

44 
zx_timî_gë_vÆue
–
timî
 ) ;

	@include/kernel/zx_uart.h

	@include/kernel/zx_uart_io.h

7 
	#UART1_LCTRL_H
 0x808C0008

	)

8 
	#UART1_LCTRL_M
 0x808C000C

	)

9 
	#UART1_LCTRL_L
 0x808C0010

	)

10 
	#UART1_CTRL
 0x808C0014

	)

11 
	#UART1_FLAG
 0x808C0018

	)

12 
	#UART1_DATA
 0x808C0000

	)

13 
	#UART1_BUSY
 0x00000004

	)

15 
	#UART1_TXFF_MASK
 0x00000020

	)

16 
	#UART1_CTS_MASK
 0x00000001

	)

17 
	#UART1_BUSY_MASK
 0x00000008

	)

19 
	#UART1_BAUD_RATE
 2400

	)

20 
	#FUARTCLK
 7372800

21 
	#BAUD_RATE_DIVISOR
 ((
FUARTCLK
/(16*
UART1_BAUD_RATE
))-1)

22 

	)

27 
	#UART1_LCRTL_H_CONFIG
 0x68

	)

31 *
	tva_li°
;

33 
	#__va_¨gsiz
(
t
) \

34 ((((
t
Ë+ (Ë- 1Ë/ ()Ë* ())

	)

36 
	#va_°¨t
(
≠
, 
pN
Ë(◊pË((
va_li°
Ë
	`__buûtö_√xt_¨g
’N)))

	)

38 
	#va_íd
(
≠
Ë(()0)

	)

40 
	#va_¨g
(
≠
, 
t
) \

41 (((
≠
Ë◊pË+ 
	`__va_¨gsiz
(
t
)), *(—*Ë(*Ë(◊pË- __va_¨gsiz—))))

	)

43 
	#COM1
 0

	)

44 
	#COM2
 1

	)

46 
	#ON
 1

	)

47 
	#OFF
 0

	)

50 
zx_öôülize_u¨t2
();

51 
zx_öôülize_u¨t1
();

52 
zx_¥öt_numbî
–
ch™√l
, 
num
 );

53 
zx_ªad_byã
–
ch™√l
 );

54 
zx_putc
–
ch™√l
, 
c
 );

55 
zx_¥ötf
–
ch™√l
, *
fmt
, ... );

56 
zx_wrôe_byã
–
ch™√l
, 
c
 );

57 
zx_put°r
–
ch™√l
, *
°r
 );

	@include/kernel/zx_uart_server.h

8 #i‚de‡
ZX_CLOCK_SERVER


10 
	#ZX_CLOCK_SERVER


	)

12 
	#API_CS_UNSUPPORTED
 0

	)

13 
	#API_CS_DELAY
 1

	)

14 
	#API_CS_DELAY_UNTIL
 2

	)

15 
	#API_CS_TIME
 3

	)

16 
	#API_CS_EXIT
 4

	)

20 
	mty≥
;

21 
	mvÆue
;

22 } 
	tzx_time_ªque°
;

26 
	#TIME_REQUEST_NONE
 0

	)

27 
	#TIME_REQUEST_READY
 1

	)

28 
	#TIME_REQUEST_TICK
 2

	)

31 
	#TIME_REQUEST_CONFIG
 1

	)

33 
zx_˛ock_£rvî
();

38 
timî_gëVÆue
();

39 
timî_gëC⁄åﬁ
();

41 
timî_£tLﬂd
(
√wVÆue
);

42 
timî_£tE«bÀ
();

43 
timî_£tClkSñ
();

44 
timî_£tDißbÀ
();

	@include/project/backup/zx_a0.h

8 #i‚de‡
ZX_A0


10 
	#ZX_A0


	)

12 
	~<zx_a0_gøphics.h
>

15 
	#TR_CMD
 1

	)

16 
	#RV_CMD
 2

	)

17 
	#SW_CMD
 3

	)

18 
	#WH_CMD
 4

	)

19 
	#ST_CMD
 5

	)

20 
	#GO2_CMD
 7

21 
	#QUIT_CMD
 6

	)

24 
	#OFFSET_OPT
 1

	)

27 
	#RECEIVE_BUF_LEN
 30

	)

30 
	#SW_STRAIGHT
 33

	)

31 
	#SW_CURVED
 34

	)

32 
	#SOLENOID_OFF
 32

	)

33 
	#SENSOR_DUMP
 128+5

	)

34 
	#SENSOR_DATA
 192

	)

36 
	#REVERSE_SPEED
 5

	)

37 
	#STOP_TRAIN
 0

	)

38 
	#REVERSE_TRAIN
 15

	)

40 
	#TRAIN_LED
 16

	)

43 
	#SWITCH_COUNT
 22

	)

44 
	#SWITCH_TABLE_POS_X
 
TIMER_POS_X
+3

	)

45 
	#SWITCH_TABLE_POS_Y
 3

	)

46 
	#SWITCH_TABLES_SPACE
 3

	)

48 
	#INITIAL_SWITCH_POSITION
 
SW_CURVED


	)

49 
	#INITIAL_SWITCH_POSITION_ALPHABET
 ((
INITIAL_SWITCH_POSITION
 =
SW_STRAIGHT
Ë? 'S' : 'C' )

	)

52 
	#SENSOR_BUFFER_LEN
 10

	)

54 
	#DECODERS_COUNT
 5

	)

55 
	#SENSORS_PER_DECODER
 16

	)

57 
	#SENSOR_TABLE_DATA_X
 
TIMER_POS_X
+3+2

	)

58 
	#SENSOR_TABLE_DATA_Y
 29

	)

61 
	#TIMER_POS_X
 (
DISPLAY_ROW_START
+2)

	)

62 
	#TIMER_POS_Y
 (
DISPLAY_COLUMN_END
/2)

	)

64 
zx_a0_fú°_èsk
();

65 
zx_a0_öô_s¸ìn
();

67 
zx_a0_timî_èsk
();

68 
zx_a0_£ns‹_èsk
();

69 
zx_a0_comm™d_èsk
();

70 
zx_a0_tu∫_off_sﬁíoid
();

73 
zx_a0_upd©e_swôch_íåy
–
swôch_numbî
, 
swôch_°©e
);

74 
zx_a0_¥öt_swôch_èbÀ_hódî
–
x
, 
y
, * 
ouçut
, * 
ouçut_size_addr
 );

75 
zx_a0_öôülize_swôches
–
swôch_°©e
[]);

78 
zx_a0_¥öt_£ns‹_èbÀ_hódî
–
x
, 
y
, * 
ouçut
, * 
ouçut_size_addr
 );

79 
föd_£ns‹_«me
–*
«me
, 
byã_ödex
, 
pos
 );

80 
¥öt_¥om±
–*
¥om±
, *
ouçut
, *
ouçut_size
 );

82 
add_byã_to_buff
–
c
, *
buf„r
, 
pos
 );

83 
zx_a0_¥öt_îr‹_mesßge
–*
mesßge
 );

	@include/project/backup/zx_a0_graphics.h

5 #i‚de‡
ZX_A0_GRAPHICS_H


7 
	#ZX_A0_GRAPHICS_H


	)

9 
	#DISPLAY_ROW_START
 0

	)

10 
	#DISPLAY_ROW_END
 22 + 10

	)

11 
	#DISPLAY_COLUMN_START
 0

	)

12 
	#DISPLAY_COLUMN_END
 70

	)

14 
	#TERMINAL_LENGTH
 3

	)

15 
	#TERMINAL_POS_X
 
DISPLAY_ROW_END
+1+3

	)

16 
	#TERMINAL_POS_Y
 0

	)

17 
	#TERMINAL_PROMPT_LEN
 11

	)

19 
zx_£t_curs‹
–
row
, 
cﬁumn
, *
ouçut
, * 
ouçut_size_addr
 );

20 
zx_˛ór_s¸ìn
(*
ouçut
, * 
ouçut_size_addr
 );

21 
zx_døw_h_löe
–
row
 ,
°¨t
 , 
íd
, 
∑âîn
, *
ouçut
, * 
ouçut_size_addr
 );

22 
zx_îa£_löe
(*
ouçut
, * 
ouçut_size_addr
 );

23 
zx_îa£_‰om_cuºít_to_s¸íd
(*
ouçut
, * 
ouçut_size_addr
 );

24 
zx_öôülize_¥om±
–*
¥om±
);

26 
zx_put_numbî
–
num
, *
ouçut
, * 
ouçut_size_addr
 );

27 
zx_put_°rög
(*
°r
, *
ouçut
, * 
ouçut_size_addr
 );

	@include/project/backup/zx_a0_timer.h

6 #i‚de‡
ZX_A0_TIMER


7 
	#ZX_A0_TIMER


	)

9 
	~<zx_a0_gøphics.h
>

11 
	#TIMER_CONTROL_REGISTER
 0x80810088

	)

12 
	#TIMER_LOAD_REGISTER
 0x80810080

	)

13 
	#TIMER_READ_REGISTER
 0x80810084

	)

15 
	#TIMER3_CONTROL
 0x00

	)

16 
	#TIMER3_EN_MASK
 0x80

	)

17 
	#TIMER3_DIS_MASK
 0x3f

	)

18 
	#TIMER3_MODE_PERIODIC
 0x40

	)

20 
	#TIMER_MAX_VALUE
 64000

	)

21 
	#FRACTION_OF_SECOND
 10

	)

22 
	#CLOCK_TICKS
 200

	)

24 
	#TIMER_POS_X
 (
DISPLAY_ROW_START
+2)

	)

25 
	#TIMER_POS_Y
 (
DISPLAY_COLUMN_END
/2)

	)

29 
öôülize_timî
();

	@include/project/backup/zx_a0_utilities.h

8 #i‚de‡
ZX_A0_UTILITIES


10 
	#ZX_A0_UTILITIES


	)

12 
	#FOREVER
 ;;)

	)

14 
num_to_°rög
–
num
, 
ba£
, *
bf
 );

15 
¥o˚ss_comm™d
–*
buf„r
, *
¨g1
, *
¨g2
, *
¨g3
, *
¨g4
);

17 
°rcmp
–*
°r1
, *
°r2
 );

	@include/project/backup/zx_calibration.h

12 #i‚de‡
ZX_CALIBRATION_H


14 
	#ZX_CALIBRATION_H


	)

16 
	~<zx_åack_£nsög.h
>

18 
åack_öô
(
åack_id
, 
åack_node
* 
åack
);

19 
tu∫out_commô
(
zx_tu∫out_°©e
* 
tu∫out
);

20 
tu∫out_öô
(
zx_tu∫out_°©e
 
tu∫out_°©es
[], 
c°©e
);

21 
tu∫out_toggÀ
(
zx_tu∫out_°©e
 
tu∫out_°©es
[], 
id
, 
c°©e
);

23 
åack_ˇlc_di°™˚
(
åack_node
* 
°¨t_node
,Åøck_node* 
íd_node
, 
zx_tu∫out_°©e
 
tu∫out_°©es
[]);

24 
åaö_gë_vñocôy_‰om_•ìd
(
zx_åaö
* 
åaö
, 
•ìd
);

25 
åaö_gë_°›pög_dñay
(
zx_åaö
* 
åaö
, 
öôül_•ìd
);

27 
åaö_ˇlc_dec˚Àøtög_vñocôy
(
zx_åaö
* 
åaö
, 
time
);

28 
åaö_ˇlc_dec˚Àøtög_dñay
(
zx_åaö
* 
åaö
);

29 
åaö_ˇlc_dec˚Àøtög_off£t
(
zx_åaö
* 
åaö
, 
time
);

31 
åaö_ˇlc_ac˚Àøtög_dñay
(
zx_åaö
* 
åaö
);

32 
åaö_ˇlc_ac˚Àøtög_vñocôy
(
zx_åaö
* 
åaö
, 
time
);

33 
åaö_ˇlc_ac˚Àøtög_off£t
(
zx_åaö
* 
åaö
, 
time
);

35 
åaö_ˇlc_unif‹m_off£t
(
zx_åaö
* 
åaö
, 
time
);

37 
åaö_ˇlc_√xt_node_time
(
zx_åaö
* 
åaö
);

39 
åaö_föd_vñocôy_™d_di°™˚_ö_dñè
–
zx_åaö
* 
åaö
 );

	@include/project/backup/zx_sensor.h

11 #i‚de‡
ZX_SENSOR_H


12 
	#ZX_SENSOR_H


	)

14 
zx_åack_£ns‹_èsk
();

15 
zx_£ns‹_courõr_èsk
();

16 
zx_£ns‹_£¸ë¨y_èsk
();

	@include/project/backup/zx_shortest_path.h

8 
	~"zx_åack_£nsög.h
"

10 
	#ZX_INFINITY
 0x0fffffff

11 
	#YES
 'y'

	)

12 
	#NO
 'n'

	)

14 
föd_sh‹ã°_di°™˚_node
–
di°™˚
[], 
visôed
[]);

15 
zx_sh‹ã°_∑th
–
sour˚_ödex
, 
èrgë_ödex
, 
∑th_°ack
[], 
di°™˚
[], *
∑th_°ack_t›
, 
åack_node
 
åack
[]);

16 
zx_¥ï¨e_åack
–
zx_tu∫out_°©e
 
tu∫out_°©es
[], 
∑th_°ack
[], 
åack_node
 
åack
[], 
∑th_°ack_t›
);

18 
åack_ˇlc_sh‹ã°_∑th
(
åack_node
* 
åack
, 
sour˚_ödex
, 
de°ö©i⁄_ödex
, 
zx_tu∫out_°©e
 
tu∫out_°©es
[], * 
ªsu…_∑th
, * 
ªsu…_∑th_Àngth
, 
zx_waypoöt
 
waypoöts
[]);

19 
zx_gë_waypoöts
–
zx_waypoöt
 
waypoöts
[], 
∑th_°ack
[], 
∑th_di°™˚
[], 
åack_node
 
åack
[], 
∑th_°ack_t›
);

22 
	#ªvî£_off£t
 200

	)

	@include/project/backup/zx_track_data.h

12 #i‚de‡
ZX_KERNEL_TRACK_DATA


13 
	#ZX_KERNEL_TRACK_DATA


	)

15 
	~"zx_åack_node.h
"

18 
	#TRACK_MAX
 144

	)

20 
	#TRACK_A
 'A'

	)

21 
	#TRACK_B
 'B'

	)

23 #ifde‡
USE_TRACK_A


24 
	#CURRENT_TRACK
 
TRACK_A


	)

27 
	#CURRENT_TRACK
 
TRACK_B


	)

34 
	#VALUE_TO_STRING
(
x
Ë#x

	)

35 
	#VALUE
(
x
Ë
	`VALUE_TO_STRING
(x)

	)

36 
	#VAR_NAME_VALUE
(
v¨
Ë#v¨ "=" 
	`VALUE
(v¨)

	)

39 #¥agm®#CURRENT_TRACK=
VALUE
(
CURRENT_TRACK
)

43 
	#SENSOR_A1
 0

	)

44 
	#SENSOR_A2
 1

	)

45 
	#SENSOR_A3
 2

	)

46 
	#SENSOR_A4
 3

	)

47 
	#SENSOR_A5
 4

	)

48 
	#SENSOR_A6
 5

	)

49 
	#SENSOR_A7
 6

	)

50 
	#SENSOR_A8
 7

	)

51 
	#SENSOR_A9
 8

	)

52 
	#SENSOR_A10
 9

	)

53 
	#SENSOR_A11
 10

	)

54 
	#SENSOR_A12
 11

	)

55 
	#SENSOR_A13
 12

	)

56 
	#SENSOR_A14
 13

	)

57 
	#SENSOR_A15
 14

	)

58 
	#SENSOR_A16
 15

	)

59 
	#SENSOR_B1
 16

	)

60 
	#SENSOR_B2
 17

	)

61 
	#SENSOR_B3
 18

	)

62 
	#SENSOR_B4
 19

	)

63 
	#SENSOR_B5
 20

	)

64 
	#SENSOR_B6
 21

	)

65 
	#SENSOR_B7
 22

	)

66 
	#SENSOR_B8
 23

	)

67 
	#SENSOR_B9
 24

	)

68 
	#SENSOR_B10
 25

	)

69 
	#SENSOR_B11
 26

	)

70 
	#SENSOR_B12
 27

	)

71 
	#SENSOR_B13
 28

	)

72 
	#SENSOR_B14
 29

	)

73 
	#SENSOR_B15
 30

	)

74 
	#SENSOR_B16
 31

	)

75 
	#SENSOR_C1
 32

	)

76 
	#SENSOR_C2
 33

	)

77 
	#SENSOR_C3
 34

	)

78 
	#SENSOR_C4
 35

	)

79 
	#SENSOR_C5
 36

	)

80 
	#SENSOR_C6
 37

	)

81 
	#SENSOR_C7
 38

	)

82 
	#SENSOR_C8
 39

	)

83 
	#SENSOR_C9
 40

	)

84 
	#SENSOR_C10
 41

	)

85 
	#SENSOR_C11
 42

	)

86 
	#SENSOR_C12
 43

	)

87 
	#SENSOR_C13
 44

	)

88 
	#SENSOR_C14
 45

	)

89 
	#SENSOR_C15
 46

	)

90 
	#SENSOR_C16
 47

	)

91 
	#SENSOR_D1
 48

	)

92 
	#SENSOR_D2
 49

	)

93 
	#SENSOR_D3
 50

	)

94 
	#SENSOR_D4
 51

	)

95 
	#SENSOR_D5
 52

	)

96 
	#SENSOR_D6
 53

	)

97 
	#SENSOR_D7
 54

	)

98 
	#SENSOR_D8
 55

	)

99 
	#SENSOR_D9
 56

	)

100 
	#SENSOR_D10
 57

	)

101 
	#SENSOR_D11
 58

	)

102 
	#SENSOR_D12
 59

	)

103 
	#SENSOR_D13
 60

	)

104 
	#SENSOR_D14
 61

	)

105 
	#SENSOR_D15
 62

	)

106 
	#SENSOR_D16
 63

	)

107 
	#SENSOR_E1
 64

	)

108 
	#SENSOR_E2
 65

	)

109 
	#SENSOR_E3
 66

	)

110 
	#SENSOR_E4
 67

	)

111 
	#SENSOR_E5
 68

	)

112 
	#SENSOR_E6
 69

	)

113 
	#SENSOR_E7
 70

	)

114 
	#SENSOR_E8
 71

	)

115 
	#SENSOR_E9
 72

	)

116 
	#SENSOR_E10
 73

	)

117 
	#SENSOR_E11
 74

	)

118 
	#SENSOR_E12
 75

	)

119 
	#SENSOR_E13
 76

	)

120 
	#SENSOR_E14
 77

	)

121 
	#SENSOR_E15
 78

	)

122 
	#SENSOR_E16
 79

	)

125 
öô_åacka
(
åack_node
 *
åack
);

126 
öô_åackb
(
åack_node
 *
åack
);

	@include/project/backup/zx_track_functions.c

8 
	~<zx_åack_fun˘i⁄s.h
>

10 
	$åack_öô
(
åack_id
, 
åack_node
* 
åack
)

12 i‡(
åack_id
 == 'A')

13 
	`öô_åacka
(
åack
);

15 i‡(
åack_id
 == 'B')

16 
	`öô_åackb
(
åack
);

18 
	}
}

20 
	$tu∫out_commô
(
zx_tu∫out_°©e
* 
tu∫out
)

22 
com1_ouçut
[50];

23 
com1_ouçut_size
 = 0;

24 
swôch_vÆue
;

26 i‡(
tu∫out
->
°©e
 =
TURNOUT_STATE_CURVED
)

28 
swôch_vÆue
 = 34;

32 
swôch_vÆue
 = 33;

35 
com1_ouçut_size
 = 0;

36 
com1_ouçut
[
com1_ouçut_size
++] = 
swôch_vÆue
;

37 
com1_ouçut
[
com1_ouçut_size
++] = 
tu∫out
->
id
;

38 
com1_ouçut
[
com1_ouçut_size
++] = 
UART_PACKET_END_CHAR
;

39 
	`PutMu…ùÀ
–
COM1
, 
com1_ouçut
 );

41 
	}
}

43 
	$tu∫out_toggÀ
(
zx_tu∫out_°©e
 
tu∫out_°©es
[], 
id
, 
c°©e
)

46 i‡(
c°©e
 == 's' || cstate == 'S')

48 
tu∫out_°©es
[
id
].
°©e
 = 
TURNOUT_STATE_STRAIGHT
;

52 
tu∫out_°©es
[
id
].
°©e
 = 
TURNOUT_STATE_CURVED
;

55 
	`tu∫out_commô
(&
tu∫out_°©es
[
id
]);

56 
	}
}

58 
	$tu∫out_öô
(
zx_tu∫out_°©e
 
tu∫out_°©es
[], 
c°©e
)

60 
i
;

61 
°©e
;

63 i‡(
c°©e
 == 's' || cstate == 'S')

65 
°©e
 = 
TURNOUT_STATE_STRAIGHT
;

69 
°©e
 = 
TURNOUT_STATE_CURVED
;

72 
i
 = 0; i < 
TURNOUT_BUF_SIZE
; i++)

74 i‡((
i
 >= 1 && i <= 22) || (i >= 153))

76 
tu∫out_°©es
[
i
].
id
 = i;

77 
tu∫out_°©es
[
i
].
°©e
 = state;

78 
tu∫out_°©es
[
i
].
time
 = 0;

82 
tu∫out_°©es
[
i
].
id
 = 0;

86 
i
 = 0; i < 
TURNOUT_BUF_SIZE
; i++)

88 i‡(
tu∫out_°©es
[
i
].
id
 != 0)

90 
	`tu∫out_commô
(&
tu∫out_°©es
[
i
]);

94 
	}
}

	@include/project/backup/zx_track_functions.h

8 #i‚de‡
ZX_TRACK_FUNCTIONS_H


10 
	#ZX_TRACK_FUNCTIONS_H


	)

12 
	~<zx_åack_£nsög.h
>

14 
åack_öô
(
åack_id
, 
åack_node
* 
åack
);

15 
tu∫out_commô
(
zx_tu∫out_°©e
* 
tu∫out
);

16 
tu∫out_toggÀ
(
zx_tu∫out_°©e
 
tu∫out_°©es
[], 
id
, 
c°©e
);

17 
öô_åacka
–
åack_node
* );

18 
öô_åackb
–
åack_node
* );

20 
zx_åack_£ns‹_èsk
();

21 
zx_£ns‹_£rvî_èsk
();

	@include/project/backup/zx_track_node.h

10 #i‚de‡
ZX_KERNEL_TRACK_NODE


11 
	#ZX_KERNEL_TRACK_NODE


	)

14 
	mNODE_NONE
,

15 
	mNODE_SENSOR
,

16 
	mNODE_BRANCH
,

17 
	mNODE_MERGE
,

18 
	mNODE_ENTER
,

19 
	mNODE_EXIT
,

20 } 
	tnode_ty≥
;

22 
	#DIR_AHEAD
 0

	)

23 
	#DIR_STRAIGHT
 0

	)

24 
	#DIR_CURVED
 1

	)

26 
	gåack_node
;

27 
åack_node
 
	tåack_node
;

28 
åack_edge
 
	tåack_edge
;

30 
	såack_edge
 {

31 
åack_edge
 *
	mªvî£
;

32 
åack_node
 *
	m§c
, *
	mde°
;

33 
	mdi°
;

36 
	såack_node
 {

37 
	mödex
;

38 *
	m«me
;

39 
node_ty≥
 
	mty≥
;

40 
	mnum
;

41 
åack_node
 *
	mªvî£
;

42 
åack_edge
 
	medge
[2];

	@include/project/backup/zx_track_sensing.h

8 #i‚de‡
TRACK_SENSING_H


10 
	#TRACK_SENSING_H


	)

12 
	#FOREVER
 ;;)

	)

14 
	~"zx_åack_d©a.h
"

18 
	mtime
;

20 
åack_node
* 
	mnode
;

21 
	mdi°
;

24 } 
	tzx_node_öfo
;

26 
	#DISTANCE_UNIT
 100

	)

31 
	mtime
;

33 
åack_node
* 
	mnode
;

34 
	mdi°
;

36 
åack_edge
* 
	medge
;

38 } 
	tzx_åaö_pos
;

42 
åack_node
* 
	mnode
;

43 
	mdi°™˚_to_node
;

44 
	moff£t_‰om_node
;

45 
	mvisibÀ
;

47 } 
	tzx_åaö_èrgë
;

50 
	#TRAIN_HT_LENGTH
 120

	)

52 
	#NEXT_SENSOR_COUNT
 15

	)

53 
	#NEXT_NODE_COUNT
 5

	)

56 
	#NEXT_SENSOR_LOOKUP_DEPTH
 1

	)

59 
	#NEXT_SENSOR_LOOKUP_BREADTH
 3

	)

64 
	mnode_id
;

65 
	moff£t
;

66 
	mdi°™˚
;

67 } 
	tzx_waypoöt
;

69 
	#WAYPOINT_COUNT
 5

	)

72 
	m°©e
;

74 } 
	tzx_åaö_rouã
;

78 
	måaö_id
;

80 
zx_åaö_pos
 
	mhód_pos
;

81 
zx_åaö_pos
 
	mèû_pos
;

83 
	mdi°™˚_åavñÀd_ö_dñè
;

85 
	mvñocôy_°©e
;

87 
	möôül_vñocôy
;

88 
	mföÆ_vñocôy
;

89 
	mcuºít_vñocôy
;

91 
	mt1
;

92 
	mt0
;

93 
	mt
;

95 
	m•ìd
;

103 
	m°›pög_di°™˚
[15];

110 
	m•ìd_to_vñocôy
[2][15];

112 
zx_node_öfo
 
	mex≥˘ed_£ns‹s
[
NEXT_SENSOR_COUNT
];

115 
	mdúe˘i⁄
;

117 
	mœ°_£ns‹_id
;

119 
zx_åaö_èrgë
 
	mèrgë
;

121 
zx_waypoöt
 
	mwaypoöts
[
WAYPOINT_COUNT
];

122 
	mwaypoöt_ödex
;

124 
	mrouã
 [
TRACK_MAX
];

125 
	mrouã_node_ödex
;

127 } 
	tzx_åaö
;

132 
	#TRAIN_COUNT
 1

	)

135 
zx_åaö
 *
	måaö
;

136 
	mex≥˘ed_time
;

137 }
	tzx_åaö_°›_ªque°
;

140 
	mvÆue
;

141 
	mtime
;

142 } 
	tzx_£ns‹_ªque°
;

147 
	mvÆue
;

148 } 
	tzx_ui_ªque°
;

152 
	mid
;

153 
	m°©e
;

154 
	mtime
;

155 } 
	tzx_tu∫out_°©e
;

158 
	mty≥
;

159 
	msour˚_id
;

160 
	mde°ö©i⁄_id
;

161 
åack_node
* 
	måack_±r
;

162 
zx_tu∫out_°©e
* 
	mtu∫out_°©es
;

163 
	m¥öt_row
;

164 
zx_åaö
* 
	måaö
;

165 
	mö˛ude_ªvî£
;

167 } 
	tzx_rouã_ªque°
;

170 
	#ROUTE_REQUEST_SHORTEST
 1

	)

171 
	#ROUTE_REQUEST_REVERSES
 2

	)

172 
	#ROUTE_REQUEST_EXIT
 3

	)

177 
	mty≥
;

178 } 
	tzx_rouã_ª•⁄£
;

181 
zx_åaö_c⁄åﬁÀr_èsk
();

184 
åaö_kî√l_°ªss_ã°ög
();

186 
zx_rouã_èsk
();

189 
	#TRACK_STATE_INIT
 0

	)

190 
	#TRACK_STATE_RUN
 1

	)

191 
	#TRACK_STATE_UI_WAIT
 2

	)

192 
	#TRACK_STATE_STOP_WAIT
 3

	)

193 
	#TRACK_STATE_RUN_FIRST
 4

	)

195 
	#SENSOR_BUF_SIZE
 10 * (
zx_£ns‹_ªque°
)

	)

198 
	#TURNOUT_STATE_STRAIGHT
 0

	)

199 
	#TURNOUT_STATE_CURVED
 1

	)

201 
	#TURNOUT_BUF_SIZE
 157

	)

204 
	#TRAIN_STATE_IMMOBILE
 0

	)

205 
	#TRAIN_STATE_ACCELERATING
 1

	)

206 
	#TRAIN_STATE_UNIFORM
 2

	)

207 
	#TRAIN_STATE_DECCELERATING
 3

	)

	@include/project/backup/zx_train_functions.h

8 #i‚de‡
ZX_TRAIN_FUNCTIONS_H


10 
	#ZX_TRAIN_FUNCTIONS_H


	)

12 
	~<zx_åack_£nsög.h
>

14 
åaö_öô
(
zx_åaö
* 
åaö
, 
åaö_id
);

15 
åaö_commô
(
zx_åaö
* 
åaö
);

16 
åaö_£t_•ìd
(
zx_åaö
* 
åaö
, 
√w_•ìd
);

17 
åaö_upd©e_vñocôy_™d_off£t
(
zx_åaö
* 
åaö
);

19 
åaö_upd©e_ex≥˘ed_£ns‹s
(
zx_åaö
* 
åaö
);

21 
åaö_commô_ªvî£
(
zx_åaö
* 
åaö
);

22 
åaö_gë_run_•ìd_‰om_di°™˚
(
zx_åaö
* 
åaö
, 
di°™˚
);

23 
åaö_°›_èsk
();

24 
åaö_put_©_£ns‹
(
zx_åaö
* 
åaö
, 
åack_node
* 
£ns‹_node
, 
time
);

	@include/project/backup/zx_ui.h

12 #i‚de‡
ZX_UI_H


13 
	#ZX_UI_H


	)

15 
	~<zx_åack_£nsög.h
>

18 
	m¨g1
;

19 
	m¨g2
;

20 
	m¨g3
;

21 
	m¨g4
;

22 } 
	tzx_comm™d_èsk_ªque°
;

24 
¥öt_åaö_d©a
(
åack_node
* 
åack
, 
zx_åaö
* 
åaö
, 
idÀ_èsk_≥r˚¡
 );

25 
¥öt_öôül_s¸ìn
();

26 
zx_ui_öput_èsk
();

27 
zx_ui_£rvî_èsk
();

	@include/project/zx_project.h

8 #i‚de‡
ZX_A0


10 
	#ZX_A0


	)

12 
	~<zx_¥oje˘_gøphics.h
>

15 
	#TR_CMD
 1

	)

16 
	#RV_CMD
 2

	)

17 
	#SW_CMD
 3

	)

18 
	#WH_CMD
 4

	)

19 
	#ST_CMD
 5

	)

20 
	#GO2_CMD
 7

21 
	#QUIT_CMD
 6

	)

24 
	#OFFSET_OPT
 1

	)

27 
	#RECEIVE_BUF_LEN
 30

	)

30 
	#SW_STRAIGHT
 33

	)

31 
	#SW_CURVED
 34

	)

32 
	#SOLENOID_OFF
 32

	)

33 
	#SENSOR_DUMP
 128+5

	)

34 
	#SENSOR_DATA
 192

	)

36 
	#REVERSE_SPEED
 5

	)

37 
	#STOP_TRAIN
 0

	)

38 
	#REVERSE_TRAIN
 15

	)

40 
	#TRAIN_LED
 16

	)

43 
	#SWITCH_COUNT
 22

	)

44 
	#SWITCH_TABLE_POS_X
 
TIMER_POS_X
+3

	)

45 
	#SWITCH_TABLE_POS_Y
 3

	)

46 
	#SWITCH_TABLES_SPACE
 3

	)

48 
	#INITIAL_SWITCH_POSITION
 
SW_CURVED


	)

49 
	#INITIAL_SWITCH_POSITION_ALPHABET
 ((
INITIAL_SWITCH_POSITION
 =
SW_STRAIGHT
Ë? 'S' : 'C' )

	)

52 
	#SENSOR_BUFFER_LEN
 10

	)

54 
	#DECODERS_COUNT
 5

	)

55 
	#SENSORS_PER_DECODER
 16

	)

57 
	#SENSOR_TABLE_DATA_X
 
TIMER_POS_X
+3+2

	)

58 
	#SENSOR_TABLE_DATA_Y
 29

	)

61 
	#TIMER_POS_X
 (
DISPLAY_ROW_START
+2)

	)

62 
	#TIMER_POS_Y
 (
DISPLAY_COLUMN_END
/2)

	)

64 
zx_a0_fú°_èsk
();

65 
zx_a0_öô_s¸ìn
();

67 
zx_a0_timî_èsk
();

68 
zx_a0_£ns‹_èsk
();

69 
zx_a0_comm™d_èsk
();

70 
zx_a0_tu∫_off_sﬁíoid
();

73 
zx_a0_upd©e_swôch_íåy
–
swôch_numbî
, 
swôch_°©e
);

74 
zx_a0_¥öt_swôch_èbÀ_hódî
–
x
, 
y
, * 
ouçut
, * 
ouçut_size_addr
 );

75 
zx_a0_öôülize_swôches
–
swôch_°©e
[]);

78 
zx_a0_¥öt_£ns‹_èbÀ_hódî
–
x
, 
y
, * 
ouçut
, * 
ouçut_size_addr
 );

79 
föd_£ns‹_«me
–*
«me
, 
byã_ödex
, 
pos
 );

80 
¥öt_¥om±
–*
¥om±
, *
ouçut
, *
ouçut_size
 );

82 
add_byã_to_buff
–
c
, *
buf„r
, 
pos
 );

83 
zx_a0_¥öt_îr‹_mesßge
–*
mesßge
 );

	@include/project/zx_project_calibration.h

12 #i‚de‡
ZX_CALIBRATION_H


14 
	#ZX_CALIBRATION_H


	)

16 
	~<zx_åack_£nsög.h
>

18 
åack_öô
(
åack_id
, 
åack_node
* 
åack
);

19 
tu∫out_commô
(
zx_tu∫out_°©e
* 
tu∫out
);

20 
tu∫out_öô
(
zx_tu∫out_°©e
 
tu∫out_°©es
[], 
c°©e
);

21 
tu∫out_toggÀ
(
zx_tu∫out_°©e
 
tu∫out_°©es
[], 
id
, 
c°©e
);

23 
åack_ˇlc_di°™˚
(
åack_node
* 
°¨t_node
,Åøck_node* 
íd_node
, 
zx_tu∫out_°©e
 
tu∫out_°©es
[]);

24 
åaö_gë_vñocôy_‰om_•ìd
(
zx_åaö
* 
åaö
, 
•ìd
);

25 
åaö_gë_°›pög_dñay
(
zx_åaö
* 
åaö
, 
öôül_•ìd
);

27 
åaö_ˇlc_dec˚Àøtög_vñocôy
(
zx_åaö
* 
åaö
, 
time
);

28 
åaö_ˇlc_dec˚Àøtög_dñay
(
zx_åaö
* 
åaö
);

29 
åaö_ˇlc_dec˚Àøtög_off£t
(
zx_åaö
* 
åaö
, 
time
);

31 
åaö_ˇlc_ac˚Àøtög_dñay
(
zx_åaö
* 
åaö
);

32 
åaö_ˇlc_ac˚Àøtög_vñocôy
(
zx_åaö
* 
åaö
, 
time
);

33 
åaö_ˇlc_ac˚Àøtög_off£t
(
zx_åaö
* 
åaö
, 
time
);

35 
åaö_ˇlc_unif‹m_off£t
(
zx_åaö
* 
åaö
, 
time
);

37 
åaö_ˇlc_√xt_node_time
(
zx_åaö
* 
åaö
);

39 
åaö_föd_vñocôy_™d_di°™˚_ö_dñè
–
zx_åaö
* 
åaö
 );

	@include/project/zx_project_graphics.h

5 #i‚de‡
ZX_A0_GRAPHICS_H


7 
	#ZX_A0_GRAPHICS_H


	)

9 
	#DISPLAY_ROW_START
 0

	)

10 
	#DISPLAY_ROW_END
 22 + 10

	)

11 
	#DISPLAY_COLUMN_START
 0

	)

12 
	#DISPLAY_COLUMN_END
 70

	)

14 
	#TERMINAL_LENGTH
 3

	)

15 
	#TERMINAL_POS_X
 
DISPLAY_ROW_END
+1+3

	)

16 
	#TERMINAL_POS_Y
 0

	)

17 
	#TERMINAL_PROMPT_LEN
 11

	)

19 
zx_£t_curs‹
–
row
, 
cﬁumn
, *
ouçut
, * 
ouçut_size_addr
 );

20 
zx_˛ór_s¸ìn
(*
ouçut
, * 
ouçut_size_addr
 );

21 
zx_døw_h_löe
–
row
 ,
°¨t
 , 
íd
, 
∑âîn
, *
ouçut
, * 
ouçut_size_addr
 );

22 
zx_îa£_löe
(*
ouçut
, * 
ouçut_size_addr
 );

23 
zx_îa£_‰om_cuºít_to_s¸íd
(*
ouçut
, * 
ouçut_size_addr
 );

24 
zx_öôülize_¥om±
–*
¥om±
);

26 
zx_put_numbî
–
num
, *
ouçut
, * 
ouçut_size_addr
 );

27 
zx_put_°rög
(*
°r
, *
ouçut
, * 
ouçut_size_addr
 );

	@include/project/zx_project_sensor.h

11 #i‚de‡
ZX_SENSOR_H


12 
	#ZX_SENSOR_H


	)

14 
zx_åack_£ns‹_èsk
();

15 
zx_£ns‹_courõr_èsk
();

16 
zx_£ns‹_£¸ë¨y_èsk
();

	@include/project/zx_project_shortest_path.h

8 
	~"zx_åack_£nsög.h
"

10 
	#ZX_INFINITY
 0x0fffffff

11 
	#YES
 'y'

	)

12 
	#NO
 'n'

	)

14 
föd_sh‹ã°_di°™˚_node
–
di°™˚
[], 
visôed
[]);

15 
zx_sh‹ã°_∑th
–
sour˚_ödex
, 
èrgë_ödex
, 
∑th_°ack
[], 
di°™˚
[], *
∑th_°ack_t›
, 
åack_node
 
åack
[]);

16 
zx_¥ï¨e_åack
–
zx_tu∫out_°©e
 
tu∫out_°©es
[], 
∑th_°ack
[], 
åack_node
 
åack
[], 
∑th_°ack_t›
);

18 
åack_ˇlc_sh‹ã°_∑th
(
åack_node
* 
åack
, 
sour˚_ödex
, 
de°ö©i⁄_ödex
, 
zx_tu∫out_°©e
 
tu∫out_°©es
[], * 
ªsu…_∑th
, * 
ªsu…_∑th_Àngth
, 
zx_waypoöt
 
waypoöts
[]);

19 
zx_gë_waypoöts
–
zx_waypoöt
 
waypoöts
[], 
∑th_°ack
[], 
∑th_di°™˚
[], 
åack_node
 
åack
[], 
∑th_°ack_t›
);

22 
	#ªvî£_off£t
 200

	)

	@include/project/zx_project_timer.h

6 #i‚de‡
ZX_A0_TIMER


7 
	#ZX_A0_TIMER


	)

9 
	~<zx_a0_gøphics.h
>

11 
	#TIMER_CONTROL_REGISTER
 0x80810088

	)

12 
	#TIMER_LOAD_REGISTER
 0x80810080

	)

13 
	#TIMER_READ_REGISTER
 0x80810084

	)

15 
	#TIMER3_CONTROL
 0x00

	)

16 
	#TIMER3_EN_MASK
 0x80

	)

17 
	#TIMER3_DIS_MASK
 0x3f

	)

18 
	#TIMER3_MODE_PERIODIC
 0x40

	)

20 
	#TIMER_MAX_VALUE
 64000

	)

21 
	#FRACTION_OF_SECOND
 10

	)

22 
	#CLOCK_TICKS
 200

	)

24 
	#TIMER_POS_X
 (
DISPLAY_ROW_START
+2)

	)

25 
	#TIMER_POS_Y
 (
DISPLAY_COLUMN_END
/2)

	)

29 
öôülize_timî
();

	@include/project/zx_project_track_data.h

12 #i‚de‡
ZX_KERNEL_TRACK_DATA


13 
	#ZX_KERNEL_TRACK_DATA


	)

15 
	~"zx_¥oje˘_åack_node.h
"

18 
	#TRACK_MAX
 144

	)

20 
	#TRACK_A
 'A'

	)

21 
	#TRACK_B
 'B'

	)

23 #ifde‡
USE_TRACK_A


24 
	#CURRENT_TRACK
 
TRACK_A


	)

27 
	#CURRENT_TRACK
 
TRACK_B


	)

34 
	#VALUE_TO_STRING
(
x
Ë#x

	)

35 
	#VALUE
(
x
Ë
	`VALUE_TO_STRING
(x)

	)

36 
	#VAR_NAME_VALUE
(
v¨
Ë#v¨ "=" 
	`VALUE
(v¨)

	)

39 #¥agm®#CURRENT_TRACK=
VALUE
(
CURRENT_TRACK
)

43 
	#SENSOR_A1
 0

	)

44 
	#SENSOR_A2
 1

	)

45 
	#SENSOR_A3
 2

	)

46 
	#SENSOR_A4
 3

	)

47 
	#SENSOR_A5
 4

	)

48 
	#SENSOR_A6
 5

	)

49 
	#SENSOR_A7
 6

	)

50 
	#SENSOR_A8
 7

	)

51 
	#SENSOR_A9
 8

	)

52 
	#SENSOR_A10
 9

	)

53 
	#SENSOR_A11
 10

	)

54 
	#SENSOR_A12
 11

	)

55 
	#SENSOR_A13
 12

	)

56 
	#SENSOR_A14
 13

	)

57 
	#SENSOR_A15
 14

	)

58 
	#SENSOR_A16
 15

	)

59 
	#SENSOR_B1
 16

	)

60 
	#SENSOR_B2
 17

	)

61 
	#SENSOR_B3
 18

	)

62 
	#SENSOR_B4
 19

	)

63 
	#SENSOR_B5
 20

	)

64 
	#SENSOR_B6
 21

	)

65 
	#SENSOR_B7
 22

	)

66 
	#SENSOR_B8
 23

	)

67 
	#SENSOR_B9
 24

	)

68 
	#SENSOR_B10
 25

	)

69 
	#SENSOR_B11
 26

	)

70 
	#SENSOR_B12
 27

	)

71 
	#SENSOR_B13
 28

	)

72 
	#SENSOR_B14
 29

	)

73 
	#SENSOR_B15
 30

	)

74 
	#SENSOR_B16
 31

	)

75 
	#SENSOR_C1
 32

	)

76 
	#SENSOR_C2
 33

	)

77 
	#SENSOR_C3
 34

	)

78 
	#SENSOR_C4
 35

	)

79 
	#SENSOR_C5
 36

	)

80 
	#SENSOR_C6
 37

	)

81 
	#SENSOR_C7
 38

	)

82 
	#SENSOR_C8
 39

	)

83 
	#SENSOR_C9
 40

	)

84 
	#SENSOR_C10
 41

	)

85 
	#SENSOR_C11
 42

	)

86 
	#SENSOR_C12
 43

	)

87 
	#SENSOR_C13
 44

	)

88 
	#SENSOR_C14
 45

	)

89 
	#SENSOR_C15
 46

	)

90 
	#SENSOR_C16
 47

	)

91 
	#SENSOR_D1
 48

	)

92 
	#SENSOR_D2
 49

	)

93 
	#SENSOR_D3
 50

	)

94 
	#SENSOR_D4
 51

	)

95 
	#SENSOR_D5
 52

	)

96 
	#SENSOR_D6
 53

	)

97 
	#SENSOR_D7
 54

	)

98 
	#SENSOR_D8
 55

	)

99 
	#SENSOR_D9
 56

	)

100 
	#SENSOR_D10
 57

	)

101 
	#SENSOR_D11
 58

	)

102 
	#SENSOR_D12
 59

	)

103 
	#SENSOR_D13
 60

	)

104 
	#SENSOR_D14
 61

	)

105 
	#SENSOR_D15
 62

	)

106 
	#SENSOR_D16
 63

	)

107 
	#SENSOR_E1
 64

	)

108 
	#SENSOR_E2
 65

	)

109 
	#SENSOR_E3
 66

	)

110 
	#SENSOR_E4
 67

	)

111 
	#SENSOR_E5
 68

	)

112 
	#SENSOR_E6
 69

	)

113 
	#SENSOR_E7
 70

	)

114 
	#SENSOR_E8
 71

	)

115 
	#SENSOR_E9
 72

	)

116 
	#SENSOR_E10
 73

	)

117 
	#SENSOR_E11
 74

	)

118 
	#SENSOR_E12
 75

	)

119 
	#SENSOR_E13
 76

	)

120 
	#SENSOR_E14
 77

	)

121 
	#SENSOR_E15
 78

	)

122 
	#SENSOR_E16
 79

	)

125 
öô_åacka
(
åack_node
 *
åack
);

126 
öô_åackb
(
åack_node
 *
åack
);

	@include/project/zx_project_track_functions.c

8 
	~<zx_åack_fun˘i⁄s.h
>

10 
	$åack_öô
(
åack_id
, 
åack_node
* 
åack
)

12 i‡(
åack_id
 == 'A')

13 
	`öô_åacka
(
åack
);

15 i‡(
åack_id
 == 'B')

16 
	`öô_åackb
(
åack
);

18 
	}
}

20 
	$tu∫out_commô
(
zx_tu∫out_°©e
* 
tu∫out
)

22 
com1_ouçut
[50];

23 
com1_ouçut_size
 = 0;

24 
swôch_vÆue
;

26 i‡(
tu∫out
->
°©e
 =
TURNOUT_STATE_CURVED
)

28 
swôch_vÆue
 = 34;

32 
swôch_vÆue
 = 33;

35 
com1_ouçut_size
 = 0;

36 
com1_ouçut
[
com1_ouçut_size
++] = 
swôch_vÆue
;

37 
com1_ouçut
[
com1_ouçut_size
++] = 
tu∫out
->
id
;

38 
com1_ouçut
[
com1_ouçut_size
++] = 
UART_PACKET_END_CHAR
;

39 
	`PutMu…ùÀ
–
COM1
, 
com1_ouçut
 );

41 
	}
}

43 
	$tu∫out_toggÀ
(
zx_tu∫out_°©e
 
tu∫out_°©es
[], 
id
, 
c°©e
)

46 i‡(
c°©e
 == 's' || cstate == 'S')

48 
tu∫out_°©es
[
id
].
°©e
 = 
TURNOUT_STATE_STRAIGHT
;

52 
tu∫out_°©es
[
id
].
°©e
 = 
TURNOUT_STATE_CURVED
;

55 
	`tu∫out_commô
(&
tu∫out_°©es
[
id
]);

56 
	}
}

58 
	$tu∫out_öô
(
zx_tu∫out_°©e
 
tu∫out_°©es
[], 
c°©e
)

60 
i
;

61 
°©e
;

63 i‡(
c°©e
 == 's' || cstate == 'S')

65 
°©e
 = 
TURNOUT_STATE_STRAIGHT
;

69 
°©e
 = 
TURNOUT_STATE_CURVED
;

72 
i
 = 0; i < 
TURNOUT_BUF_SIZE
; i++)

74 i‡((
i
 >= 1 && i <= 22) || (i >= 153))

76 
tu∫out_°©es
[
i
].
id
 = i;

77 
tu∫out_°©es
[
i
].
°©e
 = state;

78 
tu∫out_°©es
[
i
].
time
 = 0;

82 
tu∫out_°©es
[
i
].
id
 = 0;

86 
i
 = 0; i < 
TURNOUT_BUF_SIZE
; i++)

88 i‡(
tu∫out_°©es
[
i
].
id
 != 0)

90 
	`tu∫out_commô
(&
tu∫out_°©es
[
i
]);

94 
	}
}

	@include/project/zx_project_track_functions.h

8 #i‚de‡
ZX_TRACK_FUNCTIONS_H


10 
	#ZX_TRACK_FUNCTIONS_H


	)

12 
	~<zx_¥oje˘_åack_£nsög.h
>

14 
åack_öô
(
åack_id
, 
åack_node
* 
åack
);

15 
tu∫out_commô
(
zx_tu∫out_°©e
* 
tu∫out
);

16 
tu∫out_toggÀ
(
zx_tu∫out_°©e
 
tu∫out_°©es
[], 
id
, 
c°©e
);

17 
öô_åacka
–
åack_node
* );

18 
öô_åackb
–
åack_node
* );

20 
zx_åack_£ns‹_èsk
();

21 
zx_£ns‹_£rvî_èsk
();

	@include/project/zx_project_track_node.h

10 #i‚de‡
ZX_KERNEL_TRACK_NODE


11 
	#ZX_KERNEL_TRACK_NODE


	)

14 
	mNODE_NONE
,

15 
	mNODE_SENSOR
,

16 
	mNODE_BRANCH
,

17 
	mNODE_MERGE
,

18 
	mNODE_ENTER
,

19 
	mNODE_EXIT
,

20 } 
	tnode_ty≥
;

22 
	#DIR_AHEAD
 0

	)

23 
	#DIR_STRAIGHT
 0

	)

24 
	#DIR_CURVED
 1

	)

26 
	gåack_node
;

27 
åack_node
 
	tåack_node
;

28 
åack_edge
 
	tåack_edge
;

30 
	såack_edge
 {

31 
åack_edge
 *
	mªvî£
;

32 
åack_node
 *
	m§c
, *
	mde°
;

33 
	mdi°
;

36 
	såack_node
 {

37 
	mödex
;

38 *
	m«me
;

39 
node_ty≥
 
	mty≥
;

40 
	mnum
;

41 
åack_node
 *
	mªvî£
;

42 
åack_edge
 
	medge
[2];

	@include/project/zx_project_track_sensing.h

8 #i‚de‡
TRACK_SENSING_H


10 
	#TRACK_SENSING_H


	)

12 
	#FOREVER
 ;;)

	)

14 
	~"zx_¥oje˘_åack_d©a.h
"

18 
	mtime
;

20 
åack_node
* 
	mnode
;

21 
	mdi°
;

24 } 
	tzx_node_öfo
;

26 
	#DISTANCE_UNIT
 100

	)

31 
	mtime
;

33 
åack_node
* 
	mnode
;

34 
	mdi°
;

36 
åack_edge
* 
	medge
;

38 } 
	tzx_åaö_pos
;

42 
åack_node
* 
	mnode
;

43 
	mdi°™˚_to_node
;

44 
	moff£t_‰om_node
;

45 
	mvisibÀ
;

47 } 
	tzx_åaö_èrgë
;

50 
	#TRAIN_HT_LENGTH
 120

	)

52 
	#NEXT_SENSOR_COUNT
 15

	)

53 
	#NEXT_NODE_COUNT
 5

	)

56 
	#NEXT_SENSOR_LOOKUP_DEPTH
 1

	)

59 
	#NEXT_SENSOR_LOOKUP_BREADTH
 3

	)

64 
	mnode_id
;

65 
	moff£t
;

66 
	mdi°™˚
;

67 } 
	tzx_waypoöt
;

69 
	#WAYPOINT_COUNT
 5

	)

72 
	m°©e
;

74 } 
	tzx_åaö_rouã
;

78 
	måaö_id
;

80 
zx_åaö_pos
 
	mhód_pos
;

81 
zx_åaö_pos
 
	mèû_pos
;

83 
	mdi°™˚_åavñÀd_ö_dñè
;

85 
	mvñocôy_°©e
;

87 
	möôül_vñocôy
;

88 
	mföÆ_vñocôy
;

89 
	mcuºít_vñocôy
;

91 
	mt1
;

92 
	mt0
;

93 
	mt
;

95 
	m•ìd
;

103 
	m°›pög_di°™˚
[15];

110 
	m•ìd_to_vñocôy
[2][15];

112 
zx_node_öfo
 
	mex≥˘ed_£ns‹s
[
NEXT_SENSOR_COUNT
];

115 
	mdúe˘i⁄
;

117 
	mœ°_£ns‹_id
;

119 
zx_åaö_èrgë
 
	mèrgë
;

121 
zx_waypoöt
 
	mwaypoöts
[
WAYPOINT_COUNT
];

122 
	mwaypoöt_ödex
;

124 
	mrouã
 [
TRACK_MAX
];

125 
	mrouã_node_ödex
;

127 } 
	tzx_åaö
;

132 
	#TRAIN_COUNT
 1

	)

135 
zx_åaö
 *
	måaö
;

136 
	mex≥˘ed_time
;

137 }
	tzx_åaö_°›_ªque°
;

140 
	mvÆue
;

141 
	mtime
;

142 } 
	tzx_£ns‹_ªque°
;

147 
	mvÆue
;

148 } 
	tzx_ui_ªque°
;

152 
	mid
;

153 
	m°©e
;

154 
	mtime
;

155 } 
	tzx_tu∫out_°©e
;

158 
	mty≥
;

159 
	msour˚_id
;

160 
	mde°ö©i⁄_id
;

161 
åack_node
* 
	måack_±r
;

162 
zx_tu∫out_°©e
* 
	mtu∫out_°©es
;

163 
	m¥öt_row
;

164 
zx_åaö
* 
	måaö
;

165 
	mö˛ude_ªvî£
;

167 } 
	tzx_rouã_ªque°
;

170 
	#ROUTE_REQUEST_SHORTEST
 1

	)

171 
	#ROUTE_REQUEST_REVERSES
 2

	)

172 
	#ROUTE_REQUEST_EXIT
 3

	)

177 
	mty≥
;

178 } 
	tzx_rouã_ª•⁄£
;

181 
zx_åaö_c⁄åﬁÀr_èsk
();

184 
åaö_kî√l_°ªss_ã°ög
();

186 
zx_rouã_èsk
();

189 
	#TRACK_STATE_INIT
 0

	)

190 
	#TRACK_STATE_RUN
 1

	)

191 
	#TRACK_STATE_UI_WAIT
 2

	)

192 
	#TRACK_STATE_STOP_WAIT
 3

	)

193 
	#TRACK_STATE_RUN_FIRST
 4

	)

195 
	#SENSOR_BUF_SIZE
 10 * (
zx_£ns‹_ªque°
)

	)

198 
	#TURNOUT_STATE_STRAIGHT
 0

	)

199 
	#TURNOUT_STATE_CURVED
 1

	)

201 
	#TURNOUT_BUF_SIZE
 157

	)

204 
	#TRAIN_STATE_IMMOBILE
 0

	)

205 
	#TRAIN_STATE_ACCELERATING
 1

	)

206 
	#TRAIN_STATE_UNIFORM
 2

	)

207 
	#TRAIN_STATE_DECCELERATING
 3

	)

	@include/project/zx_project_train_functions.h

8 #i‚de‡
ZX_TRAIN_FUNCTIONS_H


10 
	#ZX_TRAIN_FUNCTIONS_H


	)

12 
	~<zx_¥oje˘_åack_£nsög.h
>

14 
åaö_öô
(
zx_åaö
* 
åaö
, 
åaö_id
);

15 
åaö_commô
(
zx_åaö
* 
åaö
);

16 
åaö_£t_•ìd
(
zx_åaö
* 
åaö
, 
√w_•ìd
);

17 
åaö_upd©e_vñocôy_™d_off£t
(
zx_åaö
* 
åaö
);

19 
åaö_upd©e_ex≥˘ed_£ns‹s
(
zx_åaö
* 
åaö
);

21 
åaö_commô_ªvî£
(
zx_åaö
* 
åaö
);

22 
åaö_gë_run_•ìd_‰om_di°™˚
(
zx_åaö
* 
åaö
, 
di°™˚
);

23 
åaö_°›_èsk
();

24 
åaö_put_©_£ns‹
(
zx_åaö
* 
åaö
, 
åack_node
* 
£ns‹_node
, 
time
);

	@include/project/zx_project_ui.h

12 #i‚de‡
ZX_UI_H


13 
	#ZX_UI_H


	)

15 
	~<zx_¥oje˘_åack_£nsög.h
>

18 
	m¨g1
;

19 
	m¨g2
;

20 
	m¨g3
;

21 
	m¨g4
;

22 } 
	tzx_comm™d_èsk_ªque°
;

24 
¥öt_åaö_d©a
(
åack_node
* 
åack
, 
zx_åaö
* 
åaö
, 
idÀ_èsk_≥r˚¡
 );

25 
¥öt_öôül_s¸ìn
();

26 
zx_ui_öput_èsk
();

27 
zx_ui_£rvî_èsk
();

	@include/project/zx_project_utilities.h

8 #i‚de‡
ZX_A0_UTILITIES


10 
	#ZX_A0_UTILITIES


	)

12 
	#FOREVER
 ;;)

	)

14 
num_to_°rög
–
num
, 
ba£
, *
bf
 );

15 
¥o˚ss_comm™d
–*
buf„r
, *
¨g1
, *
¨g2
, *
¨g3
, *
¨g4
);

17 
°rcmp
–*
°r1
, *
°r2
 );

	@src/generator.c

1 
	~"°dio.h
"

3 
	$maö
()

5 
i
=0, 
j
=0;

7  
i
='A'; i<='E'; i++ )

9  
j
=0; j<16; j++ )

11 
	`¥ötf
–"#deföêSENSOR_%c%d %d\n", 
i
,
j
+1, ((i-'A')*16)+j );

14 
	}
}

	@src/kernel/zx_clock_server.c

14 
	~<bwio.h
>

16 
	~<zx_sy°em_ˇŒs.h
>

17 
	~<zx_kî√l_c⁄fig.h
>

18 
	~<zx_úq_devi˚.h
>

19 
	~<zx_úq_vic.h
>

20 
	~<zx_èsks.h
>

21 
	~<zx_˛ock_£rvî.h
>

22 
	~<zx_˛ock£rvî_hóp.h
>

23 
	~<zx_timî.h
>

25 
	~<zx_îr.h
>

27 
	#FOREVER
 ;;)

	)

29 
	$zx_˛ock_nŸifõr
()

31 
zx_time_ªque°
 
ª∂y
;

33 
£rvî_tid
;

34 
zx_time_ªque°
 
ªq
;

36 
zx_time_ªque°
 
time_ª•⁄£
;

39 
	`Re˚ive
(&
£rvî_tid
, &
ªq
, (
zx_time_ªque°
));

42 
ªq
.
ty≥
 = 
TIME_REQUEST_READY
;

43 
	`Rïly
(
£rvî_tid
, &
ªq
, (
zx_time_ªque°
));

46 
ªq
.
ty≥
 = 
TIME_REQUEST_READY
;

48 
	`Síd
(
£rvî_tid
, &
ªq
, ‘eq), &
ª∂y
, (
zx_time_ªque°
));

51 
time_ª•⁄£
.
ty≥
 = 
TIME_REQUEST_TICK
;

54 
	`zx_devi˚_öô
 (
INTR_SOURCE_TIMER_1
);

55 
	`zx_devi˚_öå_⁄
(
INTR_SOURCE_TIMER_1
);

56 
FOREVER
{

58 
	`AwaôEvít
(
EVENT_TIMER
);

59 
	`Síd
(
£rvî_tid
, &
time_ª•⁄£
, (
zx_time_ªque°
), &
ª∂y
, (zx_time_request));

61 i‡(
ª∂y
.
ty≥
 =
API_CS_EXIT
)

63 
	`zx_timî_dißbÀ
–
IRQ_TIMER
 );

67 
	`Exô
();

68 
	}
}

70 
	$zx_˛ock_£rvî
()

72 
time
 ;

75 
zx_˛ock£rvî_hóp_node
 
˛ock_£rvî_hóp
[
TASK_COUNT
];

76 
íd_node_ödex
;

79 
	`zx_˛ock£rvî_hóp_öô
–&
˛ock_£rvî_hóp
[0], 
TASK_COUNT
, &
íd_node_ödex
);

83 
nŸifõr_tid
 = 
	`Cª©e
(
ZX_CLOCK_NOTIFIER_PRIORITY
, &
zx_˛ock_nŸifõr
);

84 
zx_time_ªque°
 
ªq
;

85 
zx_time_ªque°
 
ªs
;

88 
	`Regi°îAs
("zx_clock_server");

91 
ªq
.
ty≥
 = 
TIME_REQUEST_CONFIG
;

92 
	`Síd
(
nŸifõr_tid
, &
ªq
, (
zx_time_ªque°
), &
ªs
, (zx_time_request));

97 i‡(
ªs
.
ty≥
 !
TIME_REQUEST_READY
)

99 
	`Exô
();

102 
tid
;

105 
	`Re˚ive
(&
tid
, &
ªs
, (
zx_time_ªque°
));

106 i‡(
tid
 !
nŸifõr_tid
 || 
ªs
.
ty≥
 !
TIME_REQUEST_READY
)

108 
	`Exô
();

113 
ªq
.
ty≥
 = 
TIME_REQUEST_READY
;

114 
	`Rïly
(
nŸifõr_tid
, &
ªq
, (
zx_time_ªque°
));

116 
time
 = 0;

118 
to_exô
 = 0;

119 
exô_èsk_tid
 = 
INVALID_TASK_ID
;

122 
FOREVER


124 
	`Re˚ive
(&
tid
, &
ªs
, (
zx_time_ªque°
));

126 i‡(
tid
 =
nŸifõr_tid
)

129 i‡(
to_exô
 == 0)

131 
ªs
.
ty≥
 = 
TIME_REQUEST_READY
;

132 
	`Rïly
(
nŸifõr_tid
, &
ªs
, (
zx_time_ªque°
));

136 
ªs
.
ty≥
 = 
API_CS_EXIT
;

137 
	`Rïly
(
nŸifõr_tid
, &
ªs
, (
zx_time_ªque°
));

138 
	`zx_em±y_hóp_™d_nŸify_˛õ¡_èsks
–
˛ock_£rvî_hóp
 , &
íd_node_ödex
);

142 
time
++;

147 i‡(
to_exô
 == 1)

149 
ªs
.
ty≥
 = 
MSG_SERVER_EXITED
;

150 
ªs
.
vÆue
 = 0;

151 
	`Rïly
(
tid
, &
ªs
, (
zx_time_ªque°
));

154 
vÆue
;

156 
ªs
.
ty≥
)

158 
API_CS_DELAY
:

159 
vÆue
 = 
time
 + 
ªs
.value;

160 
	`zx_˛ock£rvî_hóp_ö£π
(
˛ock_£rvî_hóp
, &
íd_node_ödex
, 
tid
, 
vÆue
);

162 
API_CS_TIME
:

163 
ªs
.
vÆue
 = 
time
;

164 
	`Rïly
(
tid
, &
ªs
, (res));

166 
API_CS_DELAY_UNTIL
:

167 
	`zx_˛ock£rvî_hóp_ö£π
(
˛ock_£rvî_hóp
, &
íd_node_ödex
, 
tid
, 
ªs
.
vÆue
);

169 
API_CS_EXIT
:

170 
to_exô
 = 1;

171 
exô_èsk_tid
 = 
tid
;

172 
ªs
.
vÆue
 = 
time
;

173 
	`Rïly
(
exô_èsk_tid
, &
ªs
, (res));

180 
zx_˛ock£rvî_hóp_node
* 
node
 = &
˛ock_£rvî_hóp
[0];

182 i‡(
node
->
tid
 !
INVALID_TASK_ID
)

184 i‡(
time
 >
node
->
wake_up_time
)

186 
ªs
.
ty≥
 = 
TIME_REQUEST_READY
;

187 
ªs
.
vÆue
 = 
time
;

189 
	`Rïly
(
node
->
tid
, &
ªs
, (res));

191 
	`zx_˛ock£rvî_hóp_ªmove
(
˛ock_£rvî_hóp
, &
íd_node_ödex
);

196 i‡(
exô_èsk_tid
 =
INVALID_TASK_ID
)

198 
	`Exô
();

202 
	`Exô
();

204 
	}
}

206 
	$zx_em±y_hóp_™d_nŸify_˛õ¡_èsks
(
zx_˛ock£rvî_hóp_node
 
˛ock_£rvî_hóp
[], *
íd_node_ödex
)

209 
zx_˛ock£rvî_hóp_node
* 
node
 = &
˛ock_£rvî_hóp
[0];

211 
zx_time_ªque°
 
ªs
;

213 
node
->
tid
 !
INVALID_TASK_ID
)

215 
ªs
.
ty≥
 = 
MSG_SERVER_EXITED
;

216 
ªs
.
vÆue
 = 0;

218 
	`Rïly
(
node
->
tid
, &
ªs
, (res));

220 
	`zx_˛ock£rvî_hóp_ªmove
(
˛ock_£rvî_hóp
, 
íd_node_ödex
);

222 
	}
}

	@src/kernel/zx_clockserver_heap.c

9 
	~<zx_kî√l_c⁄fig.h
>

10 
	~<zx_˛ock£rvî_hóp.h
>

11 
	~<zx_èsks.h
>

12 
	~<bwio.h
>

25 
	$zx_˛ock£rvî_hóp_öô
–
zx_˛ock£rvî_hóp_node
 *
hóp
, 
hóp_size
, *
íd_node_ödex
 )

28 *
íd_node_ödex
 = -1;

33 
i
=0;

34  
i
=0; i<
hóp_size
 ; i++ )

36 
zx_˛ock£rvî_hóp_node
* 
ãmp
 = (
hóp
+
i
);

40 
ãmp
->
tid
 = 
INVALID_TASK_ID
;

41 
ãmp
->
wake_up_time
 = 0xffffffff;

44 
	}
}

53 
	$zx_˛ock£rvî_hóp_ö£π
–
zx_˛ock£rvî_hóp_node
 *
hóp
, *
√xt_node_ödex
, 
tid
, 
wake_up_time
 )

57 *
√xt_node_ödex
 = *next_node_index+1;

61 if–*
√xt_node_ödex
 >
TASK_COUNT
 )

63 *
√xt_node_ödex
 = *next_node_index - 1;

64 
	`bw¥ötf
–
COM2
, "zx_˛ock£rvî_hóp_ö£π: Somëhög sîiou¶y wr⁄g. Index = %d\n", *
√xt_node_ödex
);

69 
zx_˛ock£rvî_hóp_node
 *
node
 = 
hóp
 + (*
√xt_node_ödex
);

71 
node
->
tid
 =Åid;

72 
node
->
wake_up_time
 = wake_up_time;

76 
	`zx_˛ock£rvî_mö_hópify_a·î_ö£π
–
hóp
, (*
√xt_node_ödex
) );

81 
	}
}

87 
	$zx_˛ock£rvî_hóp_ªmove
–
zx_˛ock£rvî_hóp_node
 *
hóp
, *
íd_node_ödex
)

89 
ödex
 = *
íd_node_ödex
;

93 if–
ödex
 >
TASK_COUNT
 )

100 
zx_˛ock£rvî_hóp_node
 *
roŸ_node
 = 
hóp
;

102 if–
ödex
 == 0 )

107 *
íd_node_ödex
 = -1;

109 
roŸ_node
->
tid
 = 
INVALID_TASK_ID
;

110 
roŸ_node
->
wake_up_time
 = 0xffffffff;

116 
zx_˛ock£rvî_hóp_node
 *
íd_node
 = 
hóp
;

117 
íd_node
 =Énd_nodê+ 
ödex
;

122 
	`zx_˛ock£rvî_hóp_node_sw≠
–
roŸ_node
, 
íd_node
 );

123 
íd_node
->
tid
 = 
INVALID_TASK_ID
;

124 
íd_node
->
wake_up_time
 = 0xffffffff;

128 *
íd_node_ödex
 = *end_node_index-1;

131 
	`zx_˛ock£rvî_mö_hópify_a·î_dñëe
–
hóp
, 0 );

132 
	}
}

144 
	$zx_˛ock£rvî_mö_hópify_a·î_dñëe
–
zx_˛ock£rvî_hóp_node
 *
hóp
, 
ödex
 )

146 
À·
 = (2*
ödex
)+1;

147 
right
 = (2*
ödex
)+2;

148 
smÆÀ°
 = 
ödex
;

150 
zx_˛ock£rvî_hóp_node
* 
ba£_node
 = 
hóp
;

152 
zx_˛ock£rvî_hóp_node
* 
À·_chûd
 = 
hóp
;

153 
À·_chûd
 =Üe·_chûd + 
À·
;

154 
zx_˛ock£rvî_hóp_node
* 
right_chûd
 = 
hóp
;

155 
right_chûd
 =Ñight_chûd + 
right
;

158 
zx_˛ock£rvî_hóp_node
* 
sw≠_node
;

160 
zx_˛ock£rvî_hóp_node
 *
smÆÀ°_node
;

161 
smÆÀ°_node
 = 
ba£_node
+
smÆÀ°
;

163 if–
À·
 < 
TASK_COUNT
 &&

164 
À·_chûd
->
tid
 !
INVALID_TASK_ID
 &&

165 
À·_chûd
->
wake_up_time
 < 
smÆÀ°_node
->wake_up_time )

167 
smÆÀ°
 = 
À·
;

168 
smÆÀ°_node
 = 
ba£_node
+
smÆÀ°
;

169 
sw≠_node
 = 
À·_chûd
;

172 if–
right
 < 
TASK_COUNT
 &&

173 
right_chûd
->
tid
 !
INVALID_TASK_ID
 &&

174 
right_chûd
->
wake_up_time
 < 
smÆÀ°_node
->wake_up_time )

176 
smÆÀ°
 = 
right
;

177 
sw≠_node
 = 
right_chûd
;

180 if–
ödex
 !
smÆÀ°
 )

182 
zx_˛ock£rvî_hóp_node
* 
∑ª¡_node
 = 
hóp
;

183 
∑ª¡_node
 =Ö¨ít_nodê+ 
ödex
;

184 
	`zx_˛ock£rvî_hóp_node_sw≠
–
∑ª¡_node
, 
sw≠_node
 );

186 
	`zx_˛ock£rvî_mö_hópify_a·î_dñëe
(
hóp
 ,
smÆÀ°
 );

190 
	}
}

199 
	$zx_˛ock£rvî_mö_hópify_a·î_ö£π
–
zx_˛ock£rvî_hóp_node
 *
hóp
, 
ödex
 )

201 
∑ª¡_ödex
 = 0;

202 
À·
 = 0;

203 
right
 = 0;

205 if(
ödex
 <= 0 ) ;

207 if–
ödex
%2 == 0 )

209 
∑ª¡_ödex
 = (
ödex
-2)/2;

210 
right
 = 
ödex
;

211 
À·
 = 
ödex
-1;

215 
∑ª¡_ödex
 = (
ödex
-1)/2;

216 
À·
 = 
ödex
;

217 
right
 = 
ödex
+1;

220 
smÆÀ°
 = 
∑ª¡_ödex
;

222 
zx_˛ock£rvî_hóp_node
 *
sw≠_node
;

223 
zx_˛ock£rvî_hóp_node
 *
ba£_node
 = 
hóp
 ;

225 
zx_˛ock£rvî_hóp_node
 *
smÆÀ°_node
 = 
ba£_node
 + 
∑ª¡_ödex
;

227 
zx_˛ock£rvî_hóp_node
 *
À·_chûd
 = 
hóp
;

228 
À·_chûd
 =Üe·_chûd + 
À·
;

230 
zx_˛ock£rvî_hóp_node
 *
right_chûd
 = 
hóp
;

231 
right_chûd
 =Ñight_chûd + 
right
;

233 if–
À·
 < 
TASK_COUNT
 &&

234 
À·_chûd
->
tid
 !
INVALID_TASK_ID
 &&

235 
À·_chûd
->
wake_up_time
 < 
smÆÀ°_node
->wake_up_time )

237 
smÆÀ°
 = 
À·
;

238 
smÆÀ°_node
 = 
ba£_node
+
smÆÀ°
;

239 
sw≠_node
 = 
À·_chûd
;

242 if–
right
 < 
TASK_COUNT
 &&

243 
right_chûd
->
tid
 !
INVALID_TASK_ID
 &&

244 
right_chûd
->
wake_up_time
 < 
smÆÀ°_node
->wake_up_time )

246 
smÆÀ°
 = 
right
;

247 
sw≠_node
 = 
right_chûd
;

251 if–
smÆÀ°
 !
∑ª¡_ödex
 )

253 
zx_˛ock£rvî_hóp_node
* 
∑ª¡_node
 = 
hóp
;

254 
∑ª¡_node
 =Ö¨ít_nodê+ 
∑ª¡_ödex
;

255 
	`zx_˛ock£rvî_hóp_node_sw≠
–
∑ª¡_node
, 
sw≠_node
 );

257 
	`zx_˛ock£rvî_mö_hópify_a·î_ö£π
–
hóp
, 
∑ª¡_ödex
 );

260 
	}
}

265 
	$zx_˛ock£rvî_hóp_node_sw≠
–
zx_˛ock£rvî_hóp_node
 *
∑ª¡_node
, zx_˛ock£rvî_hóp_nodê*
chûd_node
)

267 
ãmp
;

269 
ãmp
 = 
∑ª¡_node
->
tid
;

270 
∑ª¡_node
->
tid
 = 
chûd_node
->tid;

271 
chûd_node
->
tid
 = 
ãmp
;

273 
ãmp
 = 
∑ª¡_node
->
wake_up_time
;

274 
∑ª¡_node
->
wake_up_time
 = 
chûd_node
->wake_up_time;

275 
chûd_node
->
wake_up_time
 = 
ãmp
;

276 
	}
}

281 
	$debug_¥öt_˛ock£rvî_hóp
–
zx_˛ock£rvî_hóp_node
 *
hóp
, 
ödex
 )

283 
zx_˛ock£rvî_hóp_node
* 
∑ª¡_node
 = 
hóp
;

284 
∑ª¡_node
 =Ö¨ít_nodê+ 
ödex
;

286 
	`bw¥ötf
–
COM2
, "Prötög hó∞nodê© index %d:", 
ödex
);

287 
	`bw¥ötf
–
COM2
, "tid = %d; up_time=%d\n", 
∑ª¡_node
->
tid
,Ö¨ít_node->
wake_up_time
);

288 
	}
}

	@src/kernel/zx_helper.c

10 
	~<bwio.h
>

12 
	~<zx_ªady_queue.h
>

13 
	~<zx_èsks.h
>

14 
	~<zx_kî√l_c⁄fig.h
>

15 
	~<zx_hñ≥r.h
>

16 
	~<zx_úq_devi˚.h
>

17 
	~<zx_úq_vic.h
>

27 
	$föd_√xt_bô_£t
–
byã
 , 
pos
 )

32 if–
byã
 & (0x80 >> (
pos
-1)) )

34  (
pos
);

36 
pos
++;

38 if–
pos
 > 8 ) ;

41 
	}
}

47 
	$zx_is_èskid_vÆid
(
tid
)

49 if–
tid
 =
INVALID_TASK_ID
 )

54 
¨øy_ödex
 = 
tid
 & 
TASK_ARRAY_INDEX_PART_MASK
;

56 if–
¨øy_ödex
 < 0 ||áºay_ödex >(
TASK_COUNT
) )

61 
	}
}

67 
	$zx_d€s_èsk_exi°
(
tid
)

69 
zx_td
 *
td
 = 
	`zx_gë_td
–
tid
 );

71 if–
TASK_STATE_ZOMBIE
 =
td
->
°©e
)

76 if–
td
->
tid
 !=Åid )

81 
	}
}

88 
zx_td
* 
	$zx_gë_td
(
tid
)

90 
id
 = 
tid
 & 
TASK_ARRAY_INDEX_PART_MASK
;

92 
zx_td
 *
td
 = (zx_td*)(
TASK_DESCRIPTOR_BASE
 + 
id
 * (zx_td));

93  
td
;

94 
	}
}

101 
zx_td
* 
	$zx_gë_a˘ive_td
()

103 * 
cuºít_èsk_id_addr
 = (*)
ACTIVE_TASK_ID
;

104 
cuºít_èsk_id
 = (*
cuºít_èsk_id_addr
Ë& 
TASK_ARRAY_INDEX_PART_MASK
;

106 
zx_td
 *
td
 = (zx_td*)(
TASK_DESCRIPTOR_BASE
 + 
cuºít_èsk_id
 * (zx_td));

107  
td
;

108 
	}
}

115 
	$zx_gë_a˘ive_èsk_id
()

117  *((*)
ACTIVE_TASK_ID
);

118 
	}
}

123 
	$zx_£t_a˘ive_èsk_id
(
tid
)

125 * 
cuºít_èsk_id
 = (*)
ACTIVE_TASK_ID
;

126 *
cuºít_èsk_id
 = 
tid
;

127 
	}
}

133 
	$zx_cou¡_åaûög_zîos
(
x
)

135 
n
;

136 i‡(
x
 == 0)

139 
n
 = 1;

141 i‡((
x
 & 0x0000FFFFË=0Ë{
n
 =Ç + 16; x = x >> 16;}

142 i‡((
x
 & 0x000000FFË=0Ë{
n
 =Ç + 8; x = x >> 8;}

143 i‡((
x
 & 0x0000000FË=0Ë{
n
 =Ç + 4; x = x >> 4;}

144 i‡((
x
 & 0x00000003Ë=0Ë{
n
 =Ç + 2; x = x >> 2;}

146  
n
 - (
x
 & 1);

147 
	}
}

154 
	$zx_cou¡_åaûög_zîos_64
(
x
)

156 
n
;

157 i‡(
x
 == 0)

160 
n
 = 1;

162 i‡((
x
 & 0x00000000FFFFFFFFË=0Ë{
n
 =Ç + 32; x = x >> 32;}

163 i‡((
x
 & 0x000000000000FFFFË=0Ë{
n
 =Ç + 16; x = x >> 16;}

164 i‡((
x
 & 0x00000000000000FFË=0Ë{
n
 =Ç + 8; x = x >> 8;}

165 i‡((
x
 & 0x000000000000000FË=0Ë{
n
 =Ç + 4; x = x >> 4;}

166 i‡((
x
 & 0x0000000000000003Ë=0Ë{
n
 =Ç + 2; x = x >> 2;}

168  ()(
n
 - (
x
 & 1));

169 
	}
}

171 
	$zx_£t_bô_64
(
x
, 
ödex
, 
vÆue
)

173 
l⁄_vÆue
 = (Ë
ödex
;

174 
l⁄_vÆue
 = (()1 <<Üon_value);

176 i‡(
vÆue
 == 1)

177  ()(
x
 | 
l⁄_vÆue
);

180  ()(
x
 & ()(~
l⁄_vÆue
));

181 
	}
}

188 
	$debug_¥öt_li°
()

190 
i
=0;

191  
i
=0; i<5; i++ )

193 
	`bw¥ötf
–
COM2
, "%x i†thêcuºíàèsk\n\r", 
	`zx_q_gë_√xt_tid
() );

196 
	}
}

206 
	$debug_¥öt_ª˚ive_queue
–
ª˚ivî_tid
 )

209 
	`bw¥ötf
–
COM2
, "Prötög Re˚ivî Queuêf‹Åask %d\n\r", 
ª˚ivî_tid
 );

211 
zx_ª˚ive_queue_node
 *
node

	`zx_ª˚ive_q_gë_√xt_node
–
ª˚ivî_tid
 );

212  
node
 !
NULL
 )

214 
	`bw¥ötf
–
COM2
, "%d i†thê£ndîÇode\n\r", 
node
->
tid
);

215 
node
 =Çode->
√xt
;

218 
	}
}

229 
	$debug_¥öt_°ack
(
°ack_ªgi°î
, * 
sour˚
)

231 * 
°ack_poöãr
;

232 i‡(
°ack_ªgi°î
 =
DEBUG_PRINT_STACK_SP
)

233 
	`asm
("mov %[v], sp" : [
v
]"Ù"(
°ack_poöãr
));

234 i‡(
°ack_ªgi°î
 =
DEBUG_PRINT_STACK_IP
)

235 
	`asm
("mov %[v], ip" : [
v
]"Ù"(
°ack_poöãr
));

237 
°ack_poöãr
 = 
sour˚
;

239 
	`bw¥ötf
–
COM2
, "Stack (printing,Åhen incrementing): \n");

240 
i
 = 0;

241  
i
 = 0; i < 10; i++ )

243 
	`bw¥ötf
–
COM2
, "Add∏(hex): %x. VÆuê(hex): %x. VÆuê(dec): %d.\n", 
°ack_poöãr
, *stack_pointer, *stack_pointer);

244 
°ack_poöãr
++;

247 
	}
}

251 
	$zx_øndom
(
¥evious
)

253  (
¥evious
 * 214013 + 2531011) % (1 << 15);

254 
	}
}

256 
	$zx_øndom_ønge
(
¥evious
, 
limô
, * 
√w_øndom
)

258 
divis‹
 = 
MAX_RANDOM
 / (
limô
 + 1);

259 
ªsu…
;

260 
cuºít_øndom
 = 
¥evious
;

264 
cuºít_øndom
 = 
	`zx_øndom
(current_random);

265 
ªsu…
 = 
cuºít_øndom
 / 
divis‹
;

266 i‡(
ªsu…
 <
limô
)

270 *
√w_øndom
 = 
cuºít_øndom
;

272  
ªsu…
;

273 
	}
}

	@src/kernel/zx_irq_device.c

10 
	~<ts7200.h
>

11 
	~<zx_u¨t_io.h
>

12 
	~<zx_úq_devi˚.h
>

13 
	~<zx_úq_vic.h
>

14 
	~<zx_kî√l_c⁄fig.h
>

15 
	~<zx_èsks.h
>

16 
	~<zx_hñ≥r.h
>

17 
	~<zx_ªady_queue.h
>

18 
	~<zx_timî.h
>

32 
	$zx_devi˚_öô
–
devi˚_numbî
)

34  
devi˚_numbî
 )

36 
INTR_SOURCE_TIMER_1
:

39 
	`zx_timî_dißbÀ
–
IRQ_TIMER
 );

41 
	`zx_timî_lﬂd_vÆ
–
IRQ_TIMER
, 
ONE_TICK
 );

42 
	`zx_timî_£t_≥riodic
–
IRQ_TIMER
, 
ON
 );

43 
	`zx_timî_£À˘_˛ock
–
IRQ_TIMER
, 
TIMER_508KHZ_CLKSEL_MASK
 );

44 
	`zx_timî_íabÀ
–
IRQ_TIMER
 );

47 
INTR_SOURCE_UART1_MODEM
:

48 
	`zx_öô_modem_öå
();

51 
INTR_SOURCE_UART2_RX
:

52 
INTR_SOURCE_UART1_RX
:

53 
INTR_SOURCE_UART1_TX
:

57 
	}
}

64 
	$zx_öô_modem_öå
()

67 * 
u¨t_Êag_addr
 = (*)
VAR_OLD_UART1_FLAG
;

68 * 
˘s_addr
 = (*)
VAR_MODEM_CTS_ON
;

69 * 
tx„_addr
 = (*)
VAR_TXFE_ON
;

72 *
u¨t1_Êags
 = (*)–
UART1_BASE
 + 
UART_FLAG_OFFSET
);

75 *
u¨t_Êag_addr
 = *
u¨t1_Êags
;

76 *
˘s_addr
 = (*
u¨t1_Êags
) & 0x01;

77 *
tx„_addr
 = 0;

78 
	}
}

81 
	$zx_devi˚_öå_dißbÀ_Æl
()

83 
	`zx_devi˚_öå_off
–
INTR_SOURCE_TIMER_1
 );

84 
	`zx_devi˚_öå_off
–
INTR_SOURCE_UART1_TX
 );

85 
	`zx_devi˚_öå_off
–
INTR_SOURCE_UART1_MODEM
 );

86 
	`zx_devi˚_öå_off
–
INTR_SOURCE_UART2_TX
 );

87 
	`zx_devi˚_öå_off
–
INTR_SOURCE_UART1_RX
 );

88 
	`zx_devi˚_öå_off
–
INTR_SOURCE_UART2_RX
 );

89 
	}
}

94 
	$zx_devi˚_öå_˛ór_Æl
()

96 
	`zx_devi˚_öå_˛ór
–
INTR_SOURCE_TIMER_1
 );

97 
	`zx_devi˚_öå_˛ór
–
INTR_SOURCE_UART1_TX
 );

98 
	`zx_devi˚_öå_˛ór
–
INTR_SOURCE_UART1_MODEM
 );

99 
	`zx_devi˚_öå_˛ór
–
INTR_SOURCE_UART2_TX
 );

100 
	`zx_devi˚_öå_˛ór
–
INTR_SOURCE_UART1_RX
 );

101 
	`zx_devi˚_öå_˛ór
–
INTR_SOURCE_UART2_RX
 );

102 
	}
}

112 
	$zx_devi˚_öå_˛ór
–
devi˚_numbî
)

114 *
addr
;

115  
devi˚_numbî
 )

117 
INTR_SOURCE_TIMER_1
:

118 
addr
 = (*)(
TIMER_1
 + 
TIMER_CLEAR_OFFSET
);

119 *
addr
 = 121112121;

125 
INTR_SOURCE_UART2_RX
:

126 
INTR_SOURCE_UART1_RX
:

133 
INTR_SOURCE_UART1_TX
:

134 
INTR_SOURCE_UART2_TX
:

137 
INTR_SOURCE_UART1_MODEM
:

138 
addr
 = (*)(
UART1_STATUS
);

139 *
addr
 = (*addrË& (~
MIS_MASK
);

142 
	}
}

147 
	$zx_devi˚_öå_off
–
devi˚_numbî
 )

149 *
addr
;

150 
vÆue
;

152  
devi˚_numbî
 )

154 
INTR_SOURCE_TIMER_1
:

155 
	`zx_vic_dißbÀ_öãºu±
(
devi˚_numbî
);

158 
INTR_SOURCE_UART1_RX
:

159 
addr
 = (*)(
UART1_CONTROL
);

160 
vÆue
 = *
addr
;

161 *
addr
 = (
vÆue
 & (~
RIE_MASK
));

164 
INTR_SOURCE_UART2_RX
:

165 
addr
 = (*)(
UART2_CONTROL
);

166 
vÆue
 = *
addr
;

167 *
addr
 = (
vÆue
 & (~
RIE_MASK
));

171 
INTR_SOURCE_UART1_TX
:

172 
addr
 = (*)(
UART1_CONTROL
);

173 
vÆue
 = *
addr
;

174 *
addr
 = (
vÆue
 & (~
TIE_MASK
));

177 
INTR_SOURCE_UART1_MODEM
:

178 
addr
 = (*)(
UART1_CONTROL
);

179 
vÆue
 = *
addr
;

180 *
addr
 = (
vÆue
 & (~
MIE_MASK
));

184 
INTR_SOURCE_UART2_TX
:

185 
addr
 = (*)(
UART2_CONTROL
);

186 
vÆue
 = *
addr
;

187 *
addr
 = (
vÆue
 & (~
TIE_MASK
));

190 
	}
}

196 
	$zx_devi˚_öå_⁄
–
devi˚_numbî
 )

198 *
addr
;

199 
vÆue
;

201  
devi˚_numbî
 )

203 
INTR_SOURCE_TIMER_1
:

204 
	`zx_vic_íabÀ_öãºu±
(
devi˚_numbî
);

207 
INTR_SOURCE_UART1_RX
:

208 
addr
 = (*)(
UART1_CONTROL
);

209 
vÆue
 = *
addr
;

210 *
addr
 = (
vÆue
 | 
RIE_MASK
);

213 
INTR_SOURCE_UART2_RX
:

214 
addr
 = (*)(
UART2_CONTROL
);

215 
vÆue
 = *
addr
;

216 *
addr
 = (
vÆue
 | 
RIE_MASK
);

220 
INTR_SOURCE_UART1_TX
:

221 
addr
 = (*)(
UART1_CONTROL
);

222 
vÆue
 = *
addr
;

223 *
addr
 = (
vÆue
 | 
TIE_MASK
);

226 
INTR_SOURCE_UART1_MODEM
:

227 
addr
 = (*)(
UART1_CONTROL
);

228 
vÆue
 = *
addr
;

229 *
addr
 = (
vÆue
 | 
MIE_MASK
);

233 
INTR_SOURCE_UART2_TX
:

234 
addr
 = (*)(
UART2_CONTROL
);

235 
vÆue
 = *
addr
;

236 *
addr
 = (
vÆue
 | 
TIE_MASK
);

239 
	}
}

250 
	$zx_h™dÀ_timî_öãºu±
(
make_deÁu…
)

252 
tid
;

254 * 
addr
 = (*)(
AWAIT_TIMER_TID
);

255 
tid
 = *
addr
;

257 i‡(
tid
 =
INVALID_TASK_ID
)

259 *
ãmp_addr
 = (*)(
DEBUG_VAR_MISSED_INTR_CLOCK
 );

260 *
ãmp_addr
 = *temp_addr + 1;

264 
zx_td
* 
td
 = 
	`zx_gë_td
(
tid
);

266 
td
->
°©e
 = 
TASK_STATE_READY
;

268 i‡(
make_deÁu…
 == 1)

270 
td
->
ªtu∫_vÆue
 = -1;

274 
td
->
ªtu∫_vÆue
 = 0;

276 
	`zx_q_≠≥nd_to_íd
–
tid
, 
td
->
¥i‹ôy
 );

279 
addr
 = (*)(
AWAIT_TIMER_TID
);

280 *
addr
 = 
INVALID_TASK_ID
;

282 if–!
make_deÁu…
 )

283 
	`zx_devi˚_öå_⁄
(
INTR_SOURCE_TIMER_1
);

284 
	}
}

292 
	$zx_h™dÀ_u¨t1_å™smô_öãºu±
(
sour˚
, 
make_deÁu…
)

295 * 
u¨t_Êag_addr
 = (*)
VAR_OLD_UART1_FLAG
;

296 * 
˘s_addr
 = (*)
VAR_MODEM_CTS_ON
;

297 * 
tx„_addr
 = (*)
VAR_TXFE_ON
;

300 
ﬁd_u¨t_Êag
;

301 
˘s
;

302 
tx„
;

304 *
u¨t1_Êags
 = (*)–
UART1_BASE
 + 
UART_FLAG_OFFSET
);

306 
√w_u¨t_Êag
;

308 
˘s
 = *
˘s_addr
;

309 
tx„
 = *
tx„_addr
;

312 if–
make_deÁu…
 == 1 )

314 
˘s
 = 1;

317 
sour˚
)

319 
INTR_SOURCE_UART1_TX
:

322 
	`zx_devi˚_öå_off
(
sour˚
);

324 
tx„
 = 1;

325 *
tx„_addr
 = 
tx„
;

328 
INTR_SOURCE_UART1_MODEM
:

336 
ﬁd_u¨t_Êag
 = *
u¨t_Êag_addr
;

337 
√w_u¨t_Êag
 = *
u¨t1_Êags
;

340 i‡(((
ﬁd_u¨t_Êag
 & 0x1Ë=0Ë&& ((
√w_u¨t_Êag
 & 0x1) == 1))

342 
˘s
 = 1;

346 
˘s
 = 0;

349 *
u¨t_Êag_addr
 = 
√w_u¨t_Êag
;

350 *
˘s_addr
 = 
˘s
;

357 i‡(!((
˘s
 =1Ë&& (
tx„
 == 1)))

362 *
˘s_addr
 = 0;

363 *
tx„_addr
 = 0;

368 * 
addr
 = (*)(
AWAIT_UART1_TX_TID
);

369 
tid
 = *
addr
;

371 i‡(
tid
 =
INVALID_TASK_ID
)

373 *
ãmp_addr
 = (*)(
DEBUG_VAR_MISSED_INTR_UART1_TX
 );

374 *
ãmp_addr
 = *temp_addr + 1;

378 
zx_td
* 
td
 = 
	`zx_gë_td
(
tid
);

380 
td
->
°©e
 = 
TASK_STATE_READY
;

381 i‡(
make_deÁu…
 == 1)

383 
td
->
ªtu∫_vÆue
 = -1;

387 
td
->
ªtu∫_vÆue
 = 0;

390 
	`zx_q_≠≥nd_to_íd
–
tid
, 
td
->
¥i‹ôy
 );

393 
addr
 = (*)(
AWAIT_UART1_TX_TID
);

394 *
addr
 = 
INVALID_TASK_ID
;

395 
	}
}

400 
	$zx_h™dÀ_u¨t_öãºu±
(
sour˚
, 
make_deÁu…
)

402 
tid
 = 0;

403 
èsk_poöãr
 = 0;

404 
ªtu∫_vÆue
 = 0;

406 
	`zx_devi˚_öå_off
(
sour˚
);

408 *
ãmp_addr
;

410 
sour˚
)

417 
INTR_SOURCE_UART1_RX
:

418 
ªtu∫_vÆue
 = 
	`zx_ªad_byã
(
COM1
);

419 
èsk_poöãr
 = 
AWAIT_UART1_RX_TID
;

420 
ãmp_addr
 = (*)(
DEBUG_VAR_MISSED_INTR_UART1_RX
 );

422 
INTR_SOURCE_UART2_TX
:

423 
èsk_poöãr
 = 
AWAIT_UART2_TX_TID
;

424 
ãmp_addr
 = (*)(
DEBUG_VAR_MISSED_INTR_UART2_TX
 );

426 
INTR_SOURCE_UART2_RX
:

427 
ªtu∫_vÆue
 = 
	`zx_ªad_byã
(
COM2
);

428 
èsk_poöãr
 = 
AWAIT_UART2_RX_TID
;

429 
ãmp_addr
 = (*)(
DEBUG_VAR_MISSED_INTR_UART2_RX
 );

433 * 
addr
 = (*)(
èsk_poöãr
);

434 
tid
 = *
addr
;

436 i‡(
tid
 =
INVALID_TASK_ID
)

438 *
ãmp_addr
 = *temp_addr + 1;

442 
zx_td
* 
td
 = 
	`zx_gë_td
(
tid
);

444 
td
->
°©e
 = 
TASK_STATE_READY
;

445 i‡(
make_deÁu…
 == 1)

447 
td
->
ªtu∫_vÆue
 = -1;

451 
td
->
ªtu∫_vÆue
 =Ñeturn_value;

454 
	`zx_q_≠≥nd_to_íd
–
tid
, 
td
->
¥i‹ôy
 );

457 
addr
 = (*)(
èsk_poöãr
);

458 *
addr
 = 
INVALID_TASK_ID
;

459 
	}
}

	@src/kernel/zx_irq_vic.c

10 
	~<ts7200.h
>

11 
	~<zx_u¨t_io.h
>

12 
	~<zx_úq_devi˚.h
>

13 
	~<zx_úq_vic.h
>

14 
	~<zx_kî√l_c⁄fig.h
>

15 
	~<zx_èsks.h
>

16 
	~<zx_hñ≥r.h
>

17 
	~<zx_ªady_queue.h
>

18 
	~<zx_timî.h
>

21 
	$zx_ª£t_Æl_öãºu±s
()

23 
	`zx_vic_dißbÀ_Æl_öãºu±s
();

25 
	`zx_devi˚_öå_dißbÀ_Æl
();

27 
	`zx_devi˚_öå_˛ór_Æl
();

28 
	}
}

34 
	$zx_vic_dißbÀ_Æl_öãºu±s
()

36 * 
addr
 = (*)(
VIC1_BASE
 + 
IRQ_INTR_CLEAR_OFFSET
);

37 *
addr
 = 0xffffffff;

39 
addr
 = (*)(
VIC2_BASE
 + 
IRQ_INTR_CLEAR_OFFSET
);

40 *
addr
 = 0xffffffff;

41 
	}
}

46 
	$zx_vic_íabÀ_Æl_öãºu±s
()

49 
	`zx_vic_dißbÀ_Æl_öãºu±s
();

52 
	`zx_vic_íabÀ_öãºu±
(
INTR_SOURCE_TIMER_1
);

55 
	`zx_vic_íabÀ_öãºu±
(
INTR_SOURCE_UART_2
);

58 
	`zx_vic_íabÀ_öãºu±
(
INTR_SOURCE_UART_1
);

59 
	}
}

66 
	$zx_vic_dißbÀ_öãºu±
–
öå_numbî
 )

68 
off£t
;

69 
bô
;

71 i‡(
öå_numbî
 < 32)

73 
off£t
 = 
VIC1_BASE
 + 
IRQ_INTR_CLEAR_OFFSET
;

74 
bô
 = 
öå_numbî
;

78 
off£t
 = 
VIC2_BASE
 + 
IRQ_INTR_CLEAR_OFFSET
;

79 
bô
 = 
öå_numbî
 - 32;

82 * 
addr
 = (*)(
off£t
);

83 
vÆue
 = *
addr
;

85 
vÆue
 |(1 << 
bô
);

86 *
addr
 = 
vÆue
;

87 
	}
}

93 
	$zx_vic_íabÀ_öãºu±
–
öå_numbî
 )

95 
off£t
;

96 
bô
;

98 i‡(
öå_numbî
 < 32)

100 
off£t
 = 
VIC1_BASE
 + 
IRQ_INTR_ENABLE_OFFSET
;

101 
bô
 = 
öå_numbî
;

105 
off£t
 = 
VIC2_BASE
 + 
IRQ_INTR_ENABLE_OFFSET
;

106 
bô
 = 
öå_numbî
 - 32;

109 * 
addr
 = (*)(
off£t
);

110 
vÆue
 = *
addr
;

112 
vÆue
 |(1 << 
bô
);

113 *
addr
 = 
vÆue
;

114 
	}
}

120 
	$zx_gë_öãºu±_sour˚
()

123 * 
addr
 = (*)(
VIC1_BASE
 + 
IRQ_STATUS_OFFSET
);

124 
vÆue1
 = *
addr
;

126 
addr
 = (*)(
VIC2_BASE
 + 
IRQ_STATUS_OFFSET
);

127 
vÆue2
 = *
addr
;

129 
devi˚_numbî
 = 0;

142 i‡((
vÆue2
 & 
UART1_INTR_MASK
) > 0)

145 * 
devi˚_°©us_addr
 = (*)(
UART1_STATUS
);

146 
dev_vÆue
 = *
devi˚_°©us_addr
;

149 i‡((
dev_vÆue
 & 
MIS_MASK
) > 0)

151 
devi˚_numbî
 = 
INTR_SOURCE_UART1_MODEM
;

155 i‡((
dev_vÆue
 & 
RIS_MASK
) > 0)

157 
devi˚_numbî
 = 
INTR_SOURCE_UART1_RX
;

161 i‡((
dev_vÆue
 & 
TIS_MASK
) > 0)

163 
devi˚_numbî
 = 
INTR_SOURCE_UART1_TX
;

166 i‡((
vÆue1
 & 
TIMER1_INTR_MASK
) > 0)

168 
devi˚_numbî
 = 
INTR_SOURCE_TIMER_1
;

174 i‡((
vÆue2
 & 
UART2_INTR_MASK
) > 0)

176 * 
devi˚_°©us_addr
 = (*)(
UART2_STATUS
);

177 
dev_vÆue
 = *
devi˚_°©us_addr
;

180 i‡((
dev_vÆue
 & 
RIS_MASK
) > 0)

182 
devi˚_numbî
 = 
INTR_SOURCE_UART2_RX
;

186 i‡((
dev_vÆue
 & 
TIS_MASK
) > 0)

188 
devi˚_numbî
 = 
INTR_SOURCE_UART2_TX
;

207 i‡(
devi˚_numbî
 != 0)

215 
	`zx_devi˚_öå_off
–
devi˚_numbî
 );

216 
	`zx_devi˚_öå_˛ór
 ( 
devi˚_numbî
 );

222  
devi˚_numbî
;

224 
	}
}

	@src/kernel/zx_kernel_body.c

12 
	~<ts7200.h
>

14 
	~<zx_hñ≥r.h
>

15 
	~<zx_sy°em_ˇŒ_h™dÀrs.h
>

16 
	~<zx_kî√l_body.h
>

17 
	~<zx_kî√l_c⁄fig.h
>

18 
	~<zx_èsks.h
>

19 
	~<zx_ªady_queue.h
>

20 
	~<zx_kî√l_hód.h
>

21 
	~<zx_sy°em_ˇŒs.h
>

22 
	~<zx_ns_åì.h
>

23 
	~<zx_úq_devi˚.h
>

24 
	~<zx_úq_vic.h
>

25 
	~<zx_timî.h
>

26 
	~<zx_˛ock_£rvî.h
>

29 
	~<zx_u¨t_io.h
>

30 
	~<zx_ã°ög.h
>

44 
	$zx_kî√l_öô
(
¨g
) {

51 i‡(
¨g
 < -1)

53 
h™dÀr
;

56 
íd
;

61 * 
magicPoöãr
;

62 *
v¨_addr
;

69 
h™dÀr
:

71 
	`asm
(

79 
	`asm
(

238 
íd
:

245 
	`asm
(

286 
v¨_addr
 = (*)(
STAT_VAR1
 );

287 *
v¨_addr
 = 0x0;

289 
v¨_addr
 = (*)(
STAT_VAR2
 );

290 *
v¨_addr
 = 0x0;

292 
v¨_addr
 = (*)(
DEBUG_VAR_MISSED_INTR_CLOCK
 );

293 *
v¨_addr
 = 0x0;

295 
v¨_addr
 = (*)(
DEBUG_VAR_MISSED_INTR_UART1_TX
 );

296 *
v¨_addr
 = 0x0;

298 
v¨_addr
 = (*)(
DEBUG_VAR_MISSED_INTR_UART1_RX
 );

299 *
v¨_addr
 = 0x0;

301 
v¨_addr
 = (*)(
DEBUG_VAR_MISSED_INTR_UART2_TX
 );

302 *
v¨_addr
 = 0x0;

304 
v¨_addr
 = (*)(
DEBUG_VAR_MISSED_INTR_UART2_RX
 );

305 *
v¨_addr
 = 0x0;

307 
i
 = 0;

309 
i
 = 0; i < 5; i++)

311 
v¨_addr
 = (*)(
DEBUG_VAR_BASE
 + 5 * 4 + 
i
 * 4);

312 *
v¨_addr
 = 0x0;

326 
	`zx_timî_dißbÀ
(
IRQ_TIMER
);

327 
	`zx_timî_dißbÀ
(
IDLE_TASK_TIMER
);

329 
	`zx_ª£t_Æl_öãºu±s
();

346 
magicPoöãr
 = (*Ë(
SWI_VECTOR
);

347 *
fun˘i⁄Addªss
;

348 
fun˘i⁄Addªss
 = &&
h™dÀr
;

349 
vÆue
 = (()
fun˘i⁄Addªss
);

351 
vÆue
 = value - 0x08 - 0x8;

352 
vÆue
 = (value >> 2);

353 
vÆue
 |= 0xEA000000;

354 *
magicPoöãr
 = 
vÆue
;

364 
magicPoöãr
 = (*Ë(
IRQ_VECTOR
);

365 
fun˘i⁄Addªss
 = &&
h™dÀr
;

366 
vÆue
 = (()
fun˘i⁄Addªss
);

368 
vÆue
 = value - 0x18 - 0x8;

369 
vÆue
 = (value >> 2);

370 
vÆue
 |= 0xEA000000;

371 *
magicPoöãr
 = 
vÆue
;

380  
i
 =0 ; i<
TASK_COUNT
; i++ )

382 
zx_td
 *
td
 = 
	`zx_gë_td
(
i
);

383 
td
->
tid
 = ( 0xffffff00 | 
i
 );

384 
td
->
°©e
 = 
TASK_STATE_ZOMBIE
;

391 
i
 = 0;

392 * 
ªcv_q_hód_addr
 = 
	`zx_ª˚ive_q_gë_hód_addr
(0);

394  
i
 = 0; i < 
TASK_COUNT
; i++ )

396 *
ªcv_q_hód_addr
 = 
NULL
;

397 
ªcv_q_hód_addr
++;

399 * 
ªcv_q_èû_addr
 = 
	`zx_ª˚ive_q_gë_èû_addr
(0);

401  
i
 = 0; i < 
TASK_COUNT
; i++ )

403 *
ªcv_q_èû_addr
 = 
NULL
;

404 
ªcv_q_èû_addr
++;

411 
i
 = 0;

412 * 
hód_addr
 = 
	`zx_q_gë_hód_addr
(0);

414  
i
 = 0; i < 
PRIORITY_COUNT
; i++ )

416 *
hód_addr
 = 
NULL
;

417 
hód_addr
++;

423 *
¥i‹ôy
 = (*)(
PRIORITY_BIT_DATA
);

424 *
¥i‹ôy
 = 0;

426 *
td_bô_d©a
 = (*)(
TD_BIT_DATA
);

427 
Æl_⁄_64
 = ()(-1);

429 *
td_bô_d©a
 = 
Æl_⁄_64
;

431 
tid_fú°
 = 
	`zx_¸óã
–
FIRST_USER_TASK_PRIORITY
, &
FIRST_USER_TASK
 );

432 
	`zx_q_≠≥nd_to_íd
–
tid_fú°
, 
FIRST_USER_TASK_PRIORITY
 );

435 * 
addr
 = (*)(
AWAIT_TIMER_TID
);

436 *
addr
 = 
INVALID_TASK_ID
;

437 
addr
 = (*)(
AWAIT_UART1_TX_TID
);

438 *
addr
 = 
INVALID_TASK_ID
;

439 
addr
 = (*)(
AWAIT_UART1_RX_TID
);

440 *
addr
 = 
INVALID_TASK_ID
;

441 
addr
 = (*)(
AWAIT_UART2_TX_TID
);

442 *
addr
 = 
INVALID_TASK_ID
;

443 
addr
 = (*)(
AWAIT_UART2_RX_TID
);

444 *
addr
 = 
INVALID_TASK_ID
;

452 *
idÀ_èsk_timî_addr
 = (*)
VAR_IDLE_TASK_TIME
;

453 *
idÀ_èsk_timî_addr
 = 0;

456 
	`zx_¸óã
–
IDLE_TASK_PRIORITY
, &
zx_idÀ
 );

457 
	`zx_q_≠≥nd_to_íd
–
IDLE_TASK_TID
, 
IDLE_TASK_PRIORITY
 );

465 
	`zx_öôülize_u¨t2
();

468 
	`zx_öôülize_u¨t1
();

471 
	`zx_vic_íabÀ_Æl_öãºu±s
();

475 
	}
}

481 
	$zx_h™dÀ
–*
ªq
 )

483 
tid
;

484 
ªsu…
;

485 
zx_td
 *
mytd
;

486 *
poöãr
;

488 
zx_ªque°
 *
ªque°
 = (zx_ªque°*)
ªq
;

490 
ªque°
->
swi_numbî
)

492 
SWI_CREATE_TASK
:

493 
tid
 = 
	`zx_¸óã
–()(
ªque°
->
¨g1
), (*Ïeque°->
¨g2
 );

494 
	`zx_q_≠≥nd_to_íd
–
tid
, ()(
ªque°
->
¨g1
) );

496 
mytd
 = 
	`zx_gë_a˘ive_td
();

497 
mytd
->
ªtu∫_vÆue
 = 
tid
;

501 
SWI_PASS
:

507 
SWI_EXIT
:

508 
	`zx_exô
();

511 
SWI_MYTID
:

512 
tid
 = 
	`zx_my_tid
();

513 
mytd
 = 
	`zx_gë_a˘ive_td
();

514 
mytd
->
ªtu∫_vÆue
 = 
tid
;

517 
SWI_MYPTID
:

518 
tid
 = 
	`zx_∑ª¡_tid
();

519 
mytd
 = 
	`zx_gë_a˘ive_td
();

520 
mytd
->
ªtu∫_vÆue
 = 
tid
;

525 
SWI_SEND
:

526 
	`zx_£nd
–()(
ªque°
->
¨g1
), (*Ïeque°->
¨g2
, ()‘eque°->
¨g3
),

527 (*)
ªque°
->
¨g4
, ()‘eque°->
¨g5
) );

531 
SWI_RECEIVE
:

532 
	`zx_ª˚ive
–(*)(
ªque°
->
¨g1
), (*Ïeque°->
¨g2
, ()‘eque°->
¨g3
) );

536 
SWI_REPLY
:

537 
	`zx_ª∂y
–()(
ªque°
->
¨g1
), (*Ïeque°->
¨g2
, ()‘eque°->
¨g3
) );

541 
SWI_ALLOC
:

542 
poöãr
 = (*)
	`zx_Æloc
();

543 
mytd
 = 
	`zx_gë_a˘ive_td
();

544 
mytd
->
ªtu∫_vÆue
 = ()
poöãr
;

547 
SWI_FREE
:

548 
	`zx_‰ì
–(*)(
ªque°
->
¨g1
) );

551 
SWI_AWAIT_EVENT
:

552 
	`zx_awaô_evít
(()(
ªque°
->
¨g1
));

555 
SWI_SHUTDOWN
:

556 
	`zx_shutdown
();

559 
SWI_KILL
:

560 
	`zx_kûl
(()(
ªque°
->
¨g1
));

562 
HWI
:

564 
	`zx_h™dÀ_hwi
(()(
ªque°
->
¨g1
));

568 
DEBUG_SWI_MANYARGS
:

569 
ªsu…
 = 
	`debug_m™y_¨gs
(
ªq
);

570 
mytd
 = 
	`zx_gë_a˘ive_td
();

571 
mytd
->
ªtu∫_vÆue
 = 
ªsu…
;

579 
	}
}

584 
zx_ªque°
* 
	$zx_gë_˛osuª_îr‹s
()

586 
îr‹
 = 
SWI_NONE
;

587 
i
;

589 
i
 = 0; i < 
TASK_COUNT
; i++)

591 
zx_td
* 
td
 = 
	`zx_gë_td
(
i
);

592 i‡(
TASK_STATE_SEND_BLOCKED
 =
td
->
°©e
)

594 
	`bw¥ötf
(
COM2
, "W¨nög:Åask '%d' i†ö SEND_BLOCKED sèã.\n", 
td
->
tid
);

595 
îr‹
 = 
SWI_ERROR
;

597 i‡(
TASK_STATE_RECEIVE_BLOCKED
 =
td
->
°©e
)

599 
	`bw¥ötf
(
COM2
, "W¨nög:Åask '%d' i†ö RECEIVE_BLOCKED sèã.\n", 
td
->
tid
);

600 
îr‹
 = 
SWI_ERROR
;

602 i‡(
TASK_STATE_REPLY_BLOCKED
 =
td
->
°©e
)

604 
	`bw¥ötf
(
COM2
, "W¨nög:Åask '%d' i†ö REPLY_BLOCKED sèã.\n", 
td
->
tid
);

605 
îr‹
 = 
SWI_ERROR
;

607 i‡(
TASK_STATE_EVENT_BLOCKED
 =
td
->
°©e
)

609 
	`bw¥ötf
(
COM2
, "W¨nög:Åask '%d' i†ö EVENT_BLOCKED sèã.\n", 
td
->
tid
);

610 
îr‹
 = 
SWI_ERROR
;

614 
zx_ªque°
 *
ªq_°ru˘uª
 = (zx_ªque°*Ë(
REQUEST_STRUCTURE
);

615 
ªq_°ru˘uª
->
swi_numbî
 = 
îr‹
;

617  
ªq_°ru˘uª
;

618 
	}
}

625 
zx_ªque°
* 
	$zx_gë_√xt_ªque°
()

628 
tid
 = 
	`zx_q_gë_√xt_tid
();

634 i‡(
tid
 != -1)

639 if–
tid
 =
IDLE_TASK_TID
 )

644 
	`zx_timî_lﬂd_vÆ
–
IDLE_TASK_TIMER
, 
IDLE_TASK_TIMER_INIT_VAL
 );

645 
	`zx_timî_£t_≥riodic
–
IDLE_TASK_TIMER
, 
ON
 );

646 
	`zx_timî_£À˘_˛ock
–
IDLE_TASK_TIMER
, 
TIMER_508KHZ_CLKSEL_MASK
 );

647 
	`zx_timî_íabÀ
–
IDLE_TASK_TIMER
 );

652 
zx_ªque°
* 
ªq
 = 
	`zx_ª°‹e_c⁄ãxt
(
tid
);

659  
ªq
;

663  
NULL
;

665 
	}
}

676 
zx_ªque°
* 
	$zx_ßve_c⁄ãxt_™d_ªtu∫_to_kî√l
()

680 
•
;

681 
ù
;

682 
•§
;

683 
ödiˇt‹
;

685 
r0
;

686 
r1
;

687 
r2
;

688 
r3
;

690 
Ã
;

691 
swi_numbî
;

692 
ö°ru˘i⁄
 = 0;

697 
	`asm
(

701 "MOV %[v],Ñ0" : [
v
]"Ù"(
ù
)

704 
	`asm
(

708 "MOV %[v],Ñ0" : [
v
]"Ù"(
•§
)

711 
	`asm
(

715 "MOV %[v],Ñ0" : [
v
]"Ù"(
•
)

718 
	`asm
(

722 "MOV %[v],Ñ0" : [
v
]"Ù"(
r0
)

725 
	`asm
(

729 "MOV %[v],Ñ0" : [
v
]"Ù"(
r1
)

732 
	`asm
(

736 "MOV %[v],Ñ0" : [
v
]"Ù"(
r2
)

739 
	`asm
(

743 "MOV %[v],Ñ0" : [
v
]"Ù"(
r3
)

746 
	`asm
(

750 "MOV %[v],Ñ0" : [
v
]"Ù"(
Ã
)

753 
	`asm
(

757 "MOV %[v],Ñ0" : [
v
]"Ù"(
ödiˇt‹
)

765 
	`asm
("LDR %[v], [Ã, #-4]" : [
v
]"Ù"(
ö°ru˘i⁄
));

767 
	`asm
(

776 
swi_numbî
 = 
ö°ru˘i⁄
 & 0x00ffffff;

778 
ö°ru˘i⁄
 &= 0x0f000000;

783 
zx_td
* 
td
 = 
	`zx_gë_a˘ive_td
();

785 
td
->
ªtu∫_vÆue
 = 
r0
;

786 
td
->
•
 = (*)sp;

787 
td
->
•§
 = spsr;

792 
zx_ªque°
 *
ªq_°ru˘uª
 = (zx_ªque°*Ë(
REQUEST_STRUCTURE
);

793 
ªq_°ru˘uª
->
¨g1
 = (*)
r0
;

794 
ªq_°ru˘uª
->
¨g2
 = (*)
r1
;

795 
ªq_°ru˘uª
->
¨g3
 = (*)
r2
;

796 
ªq_°ru˘uª
->
¨g4
 = (*)
r3
;

798 if–
ödiˇt‹
 != 123 )

801 * 
¨g5
 = (*)(
ù
 + 0);

805 
ªq_°ru˘uª
->
¨g5
 = (*) (*árg5 );

808 
ªq_°ru˘uª
->
¨g5
 = 0;

818 if–
td
->
tid
 =
IDLE_TASK_TID
 )

822 
	`zx_timî_dißbÀ
–
IDLE_TASK_TIMER
 );

825 
timî_vÆue
 = 
	`zx_timî_gë_vÆue
–
IDLE_TASK_TIMER
 );

826 
mûli£cs
 = (
IDLE_TASK_TIMER_INIT_VAL
-
timî_vÆue
)/
ONE_MILLISECOND_TICK
;

828 *
idÀ_èsk_time
 = (*)(
VAR_IDLE_TASK_TIME
);

829 *
idÀ_èsk_time
 = *idÀ_èsk_timê+ 
mûli£cs
;

831 *
debug
 = (*)(
DEBUG_VAR_30
);

832 *
debug
 = 0x12345678;

838 if–
ödiˇt‹
 == 123 )

841 
devi˚_numbî
 = 
	`zx_gë_öãºu±_sour˚
();

846 
	`zx_devi˚_öå_˛ór
 (
devi˚_numbî
);

848 
swi_numbî
 = 
HWI
;

849 
ªq_°ru˘uª
->
¨g1
 = (*)
devi˚_numbî
;

858 
ªq_°ru˘uª
->
swi_numbî
 = swi_number;

860 
ªq_addªss
 = ()
ªq_°ru˘uª
;

865 
	`asm
("MOVÑ0, %[v]" : [
v
]"Ù"(()
ªq_addªss
));

868 
	`asm
(

885 
	`asm
("ldmfd sp!, {r4-r12,Ür}\n\t ");

893 
	`asm
(

899 
	`asm
(

909 
zx_ªque°
 *
ªq
 = (zx_ªque°*Ë(
REQUEST_STRUCTURE
);

911  
ªq
;

912 
	}
}

920 
zx_ªque°
* 
	$zx_ª°‹e_c⁄ãxt
(
tid
)

934 
	`zx_£t_a˘ive_èsk_id
(
tid
);

942 
	`asm
("stmfd sp!, {r4-r12,Ür}\n\t");

947 
zx_td
* 
mytd
 = 
	`zx_gë_a˘ive_td
();

949 
ªtvÆ
 = 
mytd
 -> 
ªtu∫_vÆue
;

951 
	`asm
("movÑ1, %[v]" : [
v
]"Ù"(
ªtvÆ
));

952 
	`asm
("stmfd sp!, {r1}");

954 
•§
 = 
mytd
 -> spsr;

956 
	`asm
("movÑ1, %[v]" : [
v
]"Ù"(
•§
));

957 
	`asm
("stmfd sp!, {r1}");

959 
•
 = ()
mytd
 -> sp;

961 
	`asm
("movÑ5, %[v]" : [
v
]"Ù"(
•
));

964 
	`asm
(

1061  
NULL
;

1062 
	}
}

1068 
	$åuly_idÀ_
()

1076 
	}
}

1080 
	$zx_idÀ
()

1082 
	`åuly_idÀ_
();

1083 
	}
}

	@src/kernel/zx_kernel_head.c

9 
	~<ts7200.h
>

10 
	~<zx_u¨t_io.h
>

11 
	~<zx_sy°em_ˇŒs.h
>

12 
	~<zx_kî√l_body.h
>

13 
	~<zx_kî√l_hód.h
>

14 
	~<zx_èsks.h
>

15 
	~<zx_ªady_queue.h
>

16 
	~<zx_úq_devi˚.h
>

17 
	~<zx_úq_vic.h
>

19 
	~<zx_kî√l_c⁄fig.h
>

20 
	~<zx_hñ≥r.h
>

22 
	~<zx_ã°ög.h
>

23 
	~<zx_timî.h
>

25 
	#FOREVER
 ;;)

	)

28 
	$maö
–
¨gc
, *
¨gv
[])

30 
zx_ªque°
 *
ªq
;

33 
	`zx_kî√l_öô
(
¨gc
);

37 
FOREVER


39 
ªq
 = 
	`zx_gë_√xt_ªque°
();

45 i‡(
ªq
 !
NULL
)

47 
	`zx_h™dÀ
(
ªq
);

52 
ªq
 = 
	`zx_gë_˛osuª_îr‹s
();

54 i‡(
ªq
->
swi_numbî
 !
SWI_NONE
)

63 
	}
}

	@src/kernel/zx_memory.c

8 
	~<zx_ªady_queue.h
>

9 
	~<zx_èsks.h
>

10 
	~<zx_hñ≥r.h
>

11 
	~<zx_kî√l_c⁄fig.h
>

12 
	~<zx_sy°em_ˇŒ_h™dÀrs.h
>

13 
	~<zx_mem‹y.h
>

14 
	~<zx_îr.h
>

16 
	~"bwio.h
"

18 * 
	$zx_mem˝y
–* 
de°
, * 
§c
, 
byãs
)

20 *
§c_c
 = (*)
§c
;

21 *
de°_c
 = (*)
de°
;

23 
byãs
)

25 *
de°_c
++ = *
§c_c
++;

26 
byãs
--;

29  
de°
;

30 
	}
}

36 * 
	$zx_Æloc
()

38 
zx_td
 *
mytd
 = (zx_td*)
	`zx_gë_a˘ive_td
();

40 if–
mytd
->
hóp_hód
 =
NULL
 )

42  
NULL
;

46 
zx_hóp_chunk
 *
Æloˇãd_mem‹y
 = 
mytd
->
hóp_hód
;

52 
mytd
->
hóp_hód
 = mytd->hóp_hód->
√xt
;

54 if–
mytd
->
hóp_hód
 =
NULL
 )

56 
mytd
->
hóp_èû
 = 
NULL
;

64  (*)
Æloˇãd_mem‹y
;

65 
	}
}

73 
	$zx_‰ì
–*
mem‹y
)

75 
zx_td
 *
mytd
 = (zx_td*)
	`zx_gë_a˘ive_td
();

77 if–
mem‹y
 =
NULL
 ) ;

79 i‡(!–()
mem‹y
 < ()
mytd
->
°ack_ba£
 && ()mem‹y > ()mytd->
°ack_limô
 ))

84 if–
mytd
->
hóp_hód
 =
NULL
 )

87 
mytd
->
hóp_hód
 = mytd->
hóp_èû
 = 
mem‹y
;

88 
mytd
->
hóp_hód
->
√xt
=
NULL
;

93 
mytd
->
hóp_èû
->
√xt
 = (
zx_hóp_chunk
*)
mem‹y
;

95 
mytd
->
hóp_èû
 = mytd->hóp_èû->
√xt
;

97 
mytd
->
hóp_èû
->
√xt
 = 
NULL
;

105 
mem‹y
 = 
NULL
;

107 
	}
}

115 
	$zx_hóp_¸óã
–*
td±r
)

118 
chunks
 = 1;

121 
zx_td
 *
mytd
 = (zx_td*)
td±r
;

123 
°ack_limô
 = ()
mytd
->stack_limit;

148 if–
HEAP_SIZE
 < 16 ) ;

151 
zx_hóp_chunk
* 
hóp_poöãr
 = (zx_hóp_chunk*)(
°ack_limô
 + 
HEAP_SIZE
);

153 
zx_hóp_chunk
 *
ãmp
;

156 
mytd
->
hóp_hód
 = 
hóp_poöãr
;

160  ()(
hóp_poöãr
-4Ë> 
°ack_limô
 )

165 
ãmp
 = 
hóp_poöãr
;

166 
hóp_poöãr
 = heap_pointer-4;

167 
ãmp
->
√xt
 = 
hóp_poöãr
;

169 
chunks
++;

172 
hóp_poöãr
->
√xt
 = 
NULL
;

174 
mytd
->
hóp_èû
 = 
hóp_poöãr
;

175 
	}
}

178 
	$debug_wÆk_hóp
( )

180 
chunks
 = 0;

181 
zx_td
 *
mytd
 = (zx_td*)
	`zx_gë_a˘ive_td
();

183 
zx_hóp_chunk
 *
hód
 = 
mytd
->
hóp_hód
;

184 
zx_hóp_chunk
 *
ãmp
 = 
mytd
->
hóp_èû
;

186 
ãmp
 = 
hód
;

188 
	`bw¥ötf
–
COM2
, "zx_hóp_wÆk: Begöáddªs†ªad = %x\n", (Ë
ãmp
 );

190  
ãmp
 )

192 
chunks
++;

193 
hód
 = 
ãmp
;

194 
ãmp
 =Åemp->
√xt
;

197 
	`bw¥ötf
–
COM2
, "zx_hóp_wÆk: La°áddªs†ªad = %x\n", (Ë
hód
 );

199 
	`bw¥ötf
–
COM2
, "zx_hóp_wÆk:Çumbî o‡chunk†%d\n", (Ë
chunks
 );

201  
chunks
;

202 
	}
}

206 * 
	$zx_mem£t
(*
s
, 
c
, 
n
)

208 *
p
 = 
s
;

209 
n
 --> 0Ë{ *
p
++ = ()
c
; }

210  
s
;

211 
	}
}

	@src/kernel/zx_ns.c

10 
	~<bwio.h
>

12 
	~<zx_ns.h
>

13 
	~<zx_ns_åì.h
>

14 
	~<zx_sy°em_ˇŒs.h
>

15 
	~<zx_kî√l_c⁄fig.h
>

17 
	$zx_«me_£rvî
()

19 
˛õ¡_tid
;

20 
zx_ns_ªque°
 
ªq
;

21 
ª∂y_ªsu…
;

23 
to_exô
 = 0;

25 
zx_b°_node
 *
roŸ
 = 0;

27 0 =
to_exô
)

31 
ªsu…
 = 
	`Re˚ive
(&
˛õ¡_tid
, &
ªq
, (
zx_ns_ªque°
));

36 
ªq
.
ty≥
)

38 
API_NS_WHOIS
:

40 
ªsu…
 = 
	`zx_b°_gë_by_«me
–
ªq
.
«me
, 
roŸ
);

41 i‡(
ªsu…
 >= 0)

43 
ªq
.
tid
 = 
ªsu…
;

48 
ªq
.
tid
 = 
API_NS_WHOIS_FAIL
;

54 
API_NS_REGISTER
:

56 
ªsu…
 = 
	`zx_b°_add_by_«me
–&
roŸ
, 
ªq
.
«me
,Ñeq.
tid
);

57 i‡(
ªsu…
 >= 0)

59 
ªq
.
tid
 = 
API_NS_REGISTER_SUCCESS
;

63 
ªq
.
tid
 = 
API_NS_REGISTER_FAIL
;

69 
API_NS_HANDSHAKE
:

70 
ªq
.
tid
 = 
	`MyTid
();

73 
API_NS_EXIT
:

74 
ªq
.
tid
 = 0;

75 
to_exô
 = 1;

80 
ªq
.
ty≥
 = 
API_NS_UNSUPPORTED
;

84 
ª∂y_ªsu…
 = 
	`Rïly
(
˛õ¡_tid
, &
ªq
, (
zx_ns_ªque°
));

87 
	`Exô
();

88 
	}
}

102 
	$«me_£rvî_quîy_¥o˚ss‹
–
tid
, *
«me
, 
quîy_ty≥
 )

104  
quîy_ty≥
 )

106 
API_NS_WHOIS
:

107 
tid
 = 
	`zx_b°_gë_by_«me
–
«me
, 
roŸ
);

108 
	`bw¥ötf
–
COM2
, "WhoI†-Çamê:%†;Åid:%d;ÑoŸ:%x, %x\n", 
«me
, 
tid
, ()
roŸ
, *root );

109  
tid
;

111 
API_NS_REGISTER
:

112 
	`zx_b°_add_by_«me
–&
roŸ
, 
«me
, 
tid
);

113 
	`bw¥ötf
–
COM2
, "Regi°îe:ÑoŸ :%x %x\n",(*)
roŸ
, ()root);

117 
	`bw¥ötf
–
COM2
, "Debbug\n" );

118 
	`debug_b°_åavî£_po°‹dî
(
roŸ
);

122 
	}
}

125 
	$zx_who_is
(* 
«me
)

134 –
	`«me_£rvî_quîy_¥o˚ss‹
–-1, 
«me
, 
API_NS_WHOIS
) );

135 
	}
}

138 
	$zx_ªgi°î_as
(
tid
, * 
«me
)

148 –
	`«me_£rvî_quîy_¥o˚ss‹
(
tid
, 
«me
, 
API_NS_REGISTER
) );

149 
	}
}

	@src/kernel/zx_ns_tree.c

10 
	~<bwio.h
>

11 
	~<zx_ns_åì.h
>

12 
	~<zx_sy°em_ˇŒs.h
>

13 
	~<zx_mem‹y.h
>

15 
	#NULL
 0

	)

17 
	$zx_gë_hash_vÆue
–*
«me
 ){

18 
hash
 = 0;

19 
ch¨_pos
=0;

21  *
«me
 )

23 
ch¨_pos
++;

24 
hash
 +–(*
«me
Ë* (
ch¨_pos
) );

25 
«me
++;

28 
°rög_Àngth
 = 
ch¨_pos
;

30 
shi·ed
 = (
°rög_Àngth
 << 24);

35 
hash
 |
shi·ed
;

38  
hash
;

39 
	}
}

47 
	$zx_b°_add_by_«me
–
zx_b°_node
** 
roŸ
, *
«me
, 
tid
)

49 
hash_vÆue
 = 
	`zx_gë_hash_vÆue
–
«me
 );

51 
zx_b°_node
 *
node
 = 
	`zx_ö£π_öto_b°
(*
roŸ
, 
hash_vÆue
, 
tid
);

53 if–
node
 =
NULL
 ){

56 *
roŸ
 = 
node
;

58 
	}
}

60 
zx_b°_node
* 
	$zx_ö£π_öto_b°
–
zx_b°_node
 *
roŸ
,
hash_vÆue
, 
tid
)

62 i‡(
roŸ
==
NULL
) {

66 
roŸ
 = (
zx_b°_node
*Ë
	`AŒoc
((zx_bst_node*));

68 if–
roŸ
 =
NULL
 )

71  
NULL
;

74 
roŸ
 -> 
hash_vÆue
 = hash_value;

75 
roŸ
 -> 
tid
 =Åid;

77 
roŸ
 -> 
À·
 = 
NULL
;

78 
roŸ
 -> 
right
 = 
NULL
;

80  
roŸ
;

83 i‡(
hash_vÆue
 < 
roŸ
->hash_value) {

87 
roŸ
->
À·
 = 
	`zx_ö£π_öto_b°
‘oŸ->À·, 
hash_vÆue
, 
tid
);

88 
roŸ
=
	`zx_b°_bÆ™cög
(root);

91 i‡(
hash_vÆue
 > 
roŸ
->hash_value) {

94 
roŸ
->
right
 = 
	`zx_ö£π_öto_b°
‘oŸ->right, 
hash_vÆue
, 
tid
);

95 
roŸ
=
	`zx_b°_bÆ™cög
(root);

100  
roŸ
;

101 
	}
}

104 
	$Fªe_b°
–
zx_b°_node
 **
roŸ
 )

106 if–*
roŸ
 =
NULL
 ) ;

108 if–(*
roŸ
)->
À·
 ) 
	`Fªe_b°
( &((*root)->left) );

109 if–(*
roŸ
)->
right
 ) 
	`Fªe_b°
 ( &((*root)->right) );

111 
	`Fªe
–*
roŸ
 );

112 
	}
}

114 
zx_b°_node
* 
	$zx_b°_bÆ™cög
(
zx_b°_node
 *
node
)

116 
b_f

	`zx_b°_gë_diff
(
node
);

117 i‡(
b_f
 >1) {

118 i‡(
	`zx_b°_gë_diff
(
node
->
À·
) >0)

119 
node
=
	`À·_À·_rŸ©i⁄
(node);

121 
node
=
	`À·_right_rŸ©i⁄
(node);

123 if(
b_f
 < -1) {

124 if(
	`zx_b°_gë_diff
(
node
 ->
right
) >0)

125 
node
=
	`right_À·_rŸ©i⁄
(node);

127 
node
=
	`right_right_rŸ©i⁄
(node);

129  
node
;

130 
	}
}

132 
	$zx_b°_föd_height
(
zx_b°_node
* 
node
)

134 
height
=0;

135 i‡(
node
 !=
NULL
){

136 
À·_height

	`zx_b°_föd_height
(
node
 ->
À·
);

137 
right_height

	`zx_b°_föd_height
(
node
 -> 
right
);

138 
max
=(
À·_height
 > 
right_height
) ?Üeft_height :Ñight_height;

139 
height
 = 1+ 
max
;

141  
height
;

142 
	}
}

144 
	$zx_b°_gë_by_«me
–*
«me
, 
zx_b°_node
 *
roŸ
)

146 
hash_vÆue
 = 
	`zx_gë_hash_vÆue
(
«me
);

147  
	`zx_gë_èsk_id_by_«me
–
hash_vÆue
, 
roŸ
 );

148 
	}
}

150 
	$zx_gë_èsk_id_by_«me
–
hash_vÆue
, 
zx_b°_node
 *
roŸ
 )

153 if–
roŸ
 =
NULL
 )  -1;

156 if–
roŸ
->
hash_vÆue
 == hash_value )

158  
roŸ
->
tid
;

160 i‡–
hash_vÆue
 < 
roŸ
->hash_value )

162  
	`zx_gë_èsk_id_by_«me
–
hash_vÆue
, 
roŸ
->
À·
 );

164  
	`zx_gë_èsk_id_by_«me
–
hash_vÆue
, 
roŸ
->
right
 );

165 
	}
}

167 
	$zx_b°_gë_diff
(
zx_b°_node
* 
node
)

169 
À·_height
=
	`zx_b°_föd_height
(
node
 -> 
À·
);

170 
right_height
=
	`zx_b°_föd_height
(
node
 -> 
right
);

171 
b_Á˘‹

À·_height
 - 
right_height
;

172  
b_Á˘‹
;

173 
	}
}

175 
zx_b°_node
* 
	$À·_right_rŸ©i⁄
(
zx_b°_node
* 
∑ª¡
)

177 
zx_b°_node
 *
node
;

178 
node

∑ª¡
 -> 
À·
;

179 
∑ª¡
-> 
À·
 = 
	`right_right_rŸ©i⁄
(
node
);

180  
	`À·_À·_rŸ©i⁄
(
∑ª¡
);

181 
	}
}

183 
zx_b°_node
* 
	$À·_À·_rŸ©i⁄
(
zx_b°_node
* 
∑ª¡
)

185 
zx_b°_node
 *
node
;

186 
node
 = 
∑ª¡
 -> 
À·
;

187 
∑ª¡
 -> 
À·
 = 
node
 -> 
right
;

188 
node
 -> 
right
 = 
∑ª¡
;

189  
node
;

190 
	}
}

192 
zx_b°_node
* 
	$right_À·_rŸ©i⁄
(
zx_b°_node
 *
∑ª¡
)

194 
zx_b°_node
 *
node
;

195 
node
=
∑ª¡
 -> 
right
;

196 
∑ª¡
->
right
 = 
	`À·_À·_rŸ©i⁄
(
node
);

197  
	`right_right_rŸ©i⁄
(
∑ª¡
);

198 
	}
}

200 
zx_b°_node
* 
	$right_right_rŸ©i⁄
(
zx_b°_node
 *
∑ª¡
)

202 
zx_b°_node
 *
node
;

203 
node
=
∑ª¡
 ->
right
;

204 
∑ª¡
->
right
 = 
node
 -> 
À·
;

205 
node
 -> 
À·

∑ª¡
;

206  
node
;

207 
	}
}

209 
	$debug_b°_åavî£_po°‹dî
–
zx_b°_node
 *
roŸ
 )

211 if–
roŸ
 =
NULL
 ) ;

213 
	`debug_b°_åavî£_po°‹dî
–
roŸ
->
À·
 );

214 
	`debug_b°_åavî£_po°‹dî
–
roŸ
->
right
 );

215 
	`bw¥ötf
–
COM2
, " hash = %dÅid=%d\n", 
roŸ
->
hash_vÆue
,ÑoŸ->
tid
 );

216 
	}
}

	@src/kernel/zx_queue.c

15 
	~<zx_queue.h
>

16 
	~<zx_mem‹y.h
>

17 
	~<bwio.h
>

28 
	$zx_queue_öôülize
–
zx_cúcuœr_queue
 **
q
, *
queue
, 
d©a_size
, 
queue_size
 )

30 (*
q
)->
queue
 = queue;

31 (*
q
)->
queue_size
 = queue_size;

32 (*
q
)->
hód
 = -1;

33 (*
q
)->
èû
 = -1;

34 (*
q
)->
is_em±y_Êag
 = 1;

35 (*
q
)->
is_fuŒ_Êag
 = 0;

36 (*
q
)->
d©a_size
 = data_size;

38 if–
queue_size
 == 0 )

40 (*
q
)->
is_fuŒ_Êag
 = 1;

41 (*
q
)->
is_em±y_Êag
 = 0;

43  
ZX_Q_SUCCESS
;

44 
	}
}

49 
	$zx_queue_ö£π
–
zx_cúcuœr_queue
 **
q
, *
d©a
)

52 
èû
 = (*
q
)->tail;

53 
hód
 = (*
q
)->head;

55 
d©a_size
 = (*
q
)->data_size;

56 
queue_size
 = (*
q
)->queue_size;

59 if–(*
q
)->
is_fuŒ_Êag
 )

61  
ZX_ERR_QUEUE_FULL
;

65 
èû
 = (èû+1)%
queue_size
;

66 (*
q
)->
èû
 =Åail;

69 *
queue
 = (*)((*
q
)->queue) ;

70 
queue
 = queuê+ (
èû
*
d©a_size
);

71 
	`zx_mem˝y
–
queue
, 
d©a
, 
d©a_size
 );

76 if–
hód
 == -1 )

78 (*
q
)->
hód
 = (*q)->
èû
;

82 (*
q
)->
is_em±y_Êag
 = 0;

83 (*
q
)->
is_fuŒ_Êag
 = 
	`zx_queue_is_fuŒ
–
hód
, 
èû
, 
queue_size
);

85  
ZX_Q_SUCCESS
;

88  
d©a_size
 )

91 
queue
 = (*Ëqueuê+ 
èû
;

92 
queue
[
èû
] = (*Ë
d©a
;

96 
queue
 = (*Ëqueuê+ 
èû
;

97 
queue
[
èû
] = (*Ë
d©a
;

101 
queue
 = (*Ëqueuê+ (
èû
*
d©a_size
);

102 
	`zx_mem˝y
–
queue
, 
d©a
, 
d©a_size
 );

106 
	}
}

113 
	$zx_queue_ªmove
–
zx_cúcuœr_queue
 **
q
, *
d©a
)

115 
èû
 = (*
q
)->tail;

116 
hód
 = (*
q
)->head;

118 
d©a_size
 = (*
q
)->data_size;

119 
queue_size
 = (*
q
)->queue_size;

122 if–(*
q
)->
is_em±y_Êag
 )

124  
ZX_ERR_QUEUE_EMPTY
;

127 *
queue
 = (*)((*
q
)->queueË+ (
hód
*
d©a_size
);

128 
	`zx_mem˝y
–
d©a
, 
queue
, 
d©a_size
 );

131 (*
q
)->
is_fuŒ_Êag
 = 0;

132 (*
q
)->
is_em±y_Êag
 = 
	`zx_is_queue_em±y
–
hód
, 
èû
 );

134 
hód
 = (hód+1)%
queue_size
;

135 (*
q
)->
hód
 = head;

137  
ZX_Q_SUCCESS
;

138 
	}
}

145 
	$zx_is_queue_em±y
–
hód
, 
èû
)

148 if–
hód
 =
èû
 )

151 
	}
}

158 
	$zx_queue_is_fuŒ
–
hód
, 
èû
, 
queue_size
)

161 if–(
èû
+1)%
queue_size
 =
hód
 )

166 
	}
}

	@src/kernel/zx_ready_queue.c

11 
	~<bwio.h
>

12 
	~<zx_ªady_queue.h
>

13 
	~<zx_kî√l_c⁄fig.h
>

14 
	~<zx_hñ≥r.h
>

23 
zx_ªady_queue_node
* 
	$zx_q_¸óã_node
–
tid
)

25 
zx_ªady_queue_node
* 
node
 = 
	`zx_q_gë_node
(
tid
 & 
TASK_ARRAY_INDEX_PART_MASK
);

26 
node
->
tid
 =Åid;

27 
node
->
√xt
 = 
NULL
;

28 
node
->
¥ev
 = 
NULL
;

30  
node
;

31 
	}
}

41 
	$zx_q_≠≥nd_to_íd
–
tid
, 
¥i‹ôy
 )

43 * 
hód_addr
 = 
	`zx_q_gë_hód_addr
(
¥i‹ôy
);

44 
zx_ªady_queue_node
* 
√w_node
 = 
	`zx_q_¸óã_node
–
tid
);

46 
zx_td
 *
td
 = 
	`zx_gë_td
(
tid
);

47 if–
td
->
°©e
 =
TASK_STATE_ZOMBIE
 )

52 if–*
hód_addr
 =
NULL
 ) {

53 *
hód_addr
 = ()
√w_node
;

54 
√w_node
->
√xt
 =Çew_node->
¥ev
 =Çew_node;

59 
zx_ªady_queue_node
 *
√xt_node
 = (zx_ªady_queue_nodê*)(*
hód_addr
);

60 
zx_ªady_queue_node
 *
¥ev_node
 = ((zx_ªady_queue_nodê*)(*
hód_addr
))->
¥ev
;

62 
¥ev_node
->
√xt
 = 
√w_node
;

63 
√w_node
->
√xt
 = 
√xt_node
;

64 
√xt_node
->
¥ev
 = 
√w_node
;

65 
√w_node
->
¥ev
 = 
¥ev_node
;

68 
	`zx_q_add_¥i‹ôy
(
¥i‹ôy
);

69 
	}
}

76 
	$zx_q_≠≥nd_to_≥nu…im©e
–
tid
, 
¥i‹ôy
 )

78 * 
hód_addr
 = 
	`zx_q_gë_hód_addr
(
¥i‹ôy
);

79 
zx_ªady_queue_node
* 
√w_node
 = 
	`zx_q_¸óã_node
–
tid
);

81 if–*
hód_addr
 =
NULL
 ) {

85 *
hód_addr
 = ()
√w_node
;

86 
√w_node
->
√xt
 =Çew_node->
¥ev
 =Çew_node;

91 
zx_ªady_queue_node
 *
íd_node
 = ((zx_ªady_queue_nodê*)(*
hód_addr
))->
¥ev
;

92 
zx_ªady_queue_node
 *
≥n_u…im©e_node
 = 
íd_node
->
¥ev
;

94 
≥n_u…im©e_node
->
√xt
 = 
√w_node
;

95 
√w_node
->
√xt
 = 
íd_node
;

96 
íd_node
->
¥ev
 = 
√w_node
;

97 
√w_node
->
¥ev
 = 
≥n_u…im©e_node
;

100 if–*
hód_addr
 =()
íd_node
 )

102 *
hód_addr
 = ()
√w_node
;

106 
	`zx_q_add_¥i‹ôy
(
¥i‹ôy
);

107 
	}
}

116 
	$zx_q_add_¥i‹ôy
–
√w_¥i‹ôy
)

118 *
¥i‹ôy_addr
 = (*)(
PRIORITY_BIT_DATA
);

119 
¥i‹ôy_d©a
 = *
¥i‹ôy_addr
;

120 
¥i‹ôy_d©a
 |(1 << (
√w_¥i‹ôy
));

121 *
¥i‹ôy_addr
 = 
¥i‹ôy_d©a
;

122 
	}
}

132 
	$zx_q_ªmove_¥i‹ôy
–
¥i‹ôy
)

134 *
¥i‹ôy_addr
 = (*)(
PRIORITY_BIT_DATA
);

135 
¥i‹ôy_d©a
 = *
¥i‹ôy_addr
;

136 
¥i‹ôy_d©a
 =Öri‹ôy_d©®& (~(1 << (
¥i‹ôy
)));

137 *
¥i‹ôy_addr
 = 
¥i‹ôy_d©a
;

138 
	}
}

149 
	$zx_q_gë_highe°_¥i‹ôy
()

151 *
¥i‹ôy_addr
 = (*)(
PRIORITY_BIT_DATA
);

152 
¥i‹ôy_d©a
 = *
¥i‹ôy_addr
;

154 
ªsu…
 = 
	`zx_cou¡_åaûög_zîos
(
¥i‹ôy_d©a
);

156  
ªsu…
;

157 
	}
}

168 
	$zx_q_ªmove_node
–
tid
, 
¥i‹ôy
 )

170 
zx_ªady_queue_node
* 
node
 = 
	`zx_q_gë_node
(
tid
 & 
TASK_ARRAY_INDEX_PART_MASK
);

172 i‡–
node
->
√xt
 =
NULL
 ||Çode->
¥ev
 == NULL ) ;

174 
zx_ªady_queue_node
 *
¥ev
 = 
node
->prev;

175 
zx_ªady_queue_node
 *
√xt
 = 
node
->next;

177 if–
node
 =
¥ev
 &&Çodê=
√xt
 )

180 * 
hód_addr
 = 
	`zx_q_gë_hód_addr
 ( 
¥i‹ôy
 );

181 
	`zx_q_ªmove_¥i‹ôy
(
¥i‹ôy
);

182 *
hód_addr
 = 
NULL
;

186 
¥ev
->
√xt
 = 
node
->next;

187 
√xt
->
¥ev
 = 
node
->prev;

190 
	`zx_q_‰ì_node
(
node
);

191 
	}
}

201 
	$zx_q_gë_√xt_tid
()

203 
¥i‹ôy
 = 
	`zx_q_gë_highe°_¥i‹ôy
();

205 i‡(
¥i‹ôy
 =
PRIORITY_COUNT
)

208 *
hód_addr
 = 
	`zx_q_gë_hód_addr
–
¥i‹ôy
 );

210 
zx_ªady_queue_node
* 
hód
 = (zx_ªady_queue_nodê*)(*
hód_addr
);

212 
tid
 = 
hód
->tid;

214 *
hód_addr
 = ()
hód
->
√xt
;

216  
tid
;

217 
	}
}

226 
	$zx_q_‰ì_node
–
zx_ªady_queue_node
 *
node
 )

228 
node
->
tid
 = 0;

229 
node
->
√xt
 = 0;

230 
node
->
¥ev
 = 0;

231 
	}
}

240 
zx_ªady_queue_node
* 
	$zx_q_gë_node
–
tid
 )

242  ((
zx_ªady_queue_node
*)(
READY_QUEUE_BASE
 + ((
tid
)*(zx_ready_queue_node))));

243 
	}
}

253 * 
	$zx_q_gë_hód_addr
–
¥i‹ôy
 )

255  ((*)(
READY_QUEUE_HEADER_BASE
 + (
¥i‹ôy
*(*))));

256 
	}
}

	@src/kernel/zx_receive_queue.c

11 
	~<bwio.h
>

12 
	~<zx_ªady_queue.h
>

13 
	~<zx_kî√l_c⁄fig.h
>

14 
	~<zx_hñ≥r.h
>

23 
zx_ª˚ive_queue_node
* 
	$zx_ª˚ive_q_¸óã_node
–
tid
, *
msg
, 
msgÀn
)

25 
zx_ª˚ive_queue_node
* 
node
 = 
	`zx_ª˚ive_q_gë_node
(
tid
 & 
TASK_ARRAY_INDEX_PART_MASK
);

26 
node
->
tid
 =Åid;

27 
node
->
msg
 = msg;

28 
node
->
msgÀn
 = msglen;

29 
node
->
√xt
 = 
NULL
;

31  
node
;

32 
	}
}

42 
	$zx_ª˚ive_q_≠≥nd_to_íd
–
tid
, 
zx_ª˚ive_queue_node
* 
√w_node
 )

44 * 
èû_addr
 = (*)
	`zx_ª˚ive_q_gë_èû_addr
(
tid
 & 
TASK_ARRAY_INDEX_PART_MASK
);

46 if–*
èû_addr
 =
NULL
 ) {

48 *
èû_addr
 = ()
√w_node
;

52 * 
hód_addr
 = (*)
	`zx_ª˚ive_q_gë_hód_addr
(
tid
 & 
TASK_ARRAY_INDEX_PART_MASK
);

53 *
hód_addr
 = ()
√w_node
;

58 
zx_ª˚ive_queue_node
 *
ãmp
 = (zx_ª˚ive_queue_nodê*)(*
èû_addr
);

59 
ãmp
->
√xt
 = 
√w_node
;

60 *
èû_addr
 = ()
√w_node
;

62 
	}
}

72 
zx_ª˚ive_queue_node
* 
	$zx_ª˚ive_q_gë_√xt_node
(
tid
)

74 *
hód_addr
 = 
	`zx_ª˚ive_q_gë_hód_addr
–
tid
 & 
TASK_ARRAY_INDEX_PART_MASK
 );

76 if–*
hód_addr
 =
NULL
 )  NULL;

78 
zx_ª˚ive_queue_node
 *
ãmp
 = (zx_ª˚ive_queue_nodê*)(*
hód_addr
);

80 *
hód_addr
 = ()(
ãmp
->
√xt
);

82 if–*
hód_addr
 =
NULL
 )

86 * 
èû_addr
 = 
	`zx_ª˚ive_q_gë_èû_addr
(
tid
 & 
TASK_ARRAY_INDEX_PART_MASK
);

87 *
èû_addr
 = 
NULL
;

91  
ãmp
;

92 
	}
}

101 
	$zx_ª˚ive_q_‰ì_hód
–
zx_ª˚ive_queue_node
 *
node
 )

103 
node
->
tid
 = 0xffffffff;

104 
node
->
msg
 = 0x0;

105 
node
->
msgÀn
 = 0;

106 
node
->
√xt
 = 0;

107 
	}
}

116 
zx_ª˚ive_queue_node
* 
	$zx_ª˚ive_q_gë_node
–
¨øy_ödex
)

118  ((
zx_ª˚ive_queue_node
*)(
RECEIVE_QUEUE_BASE
 + ((
¨øy_ödex
)*(zx_receive_queue_node))));

119 
	}
}

130 * 
	$zx_ª˚ive_q_gë_èû_addr
–
¨øy_ödex
 )

132  ((*)(
RECEIVE_QUEUE_TAIL_HEADER_BASE
 + ((
¨øy_ödex
)*(*))));

133 
	}
}

143 * 
	$zx_ª˚ive_q_gë_hód_addr
–
¨øy_ödex
 )

145  ((*)(
RECEIVE_QUEUE_HEAD_HEADER_BASE
 + ((
¨øy_ödex
)*(*))));

146 
	}
}

	@src/kernel/zx_system_call_handlers.c

11 
	~<zx_ªady_queue.h
>

12 
	~<zx_èsks.h
>

13 
	~<zx_hñ≥r.h
>

14 
	~<zx_kî√l_c⁄fig.h
>

15 
	~<zx_sy°em_ˇŒ_h™dÀrs.h
>

16 
	~<zx_sy°em_ˇŒs.h
>

17 
	~<zx_mem‹y.h
>

18 
	~<zx_îr.h
>

19 
	~<zx_úq_devi˚.h
>

20 
	~<zx_úq_vic.h
>

22 
	~<bwio.h
>

33 
	$zx_∑ª¡_tid
()

35 
zx_td
 *
cuºít_td
 = 
	`zx_gë_a˘ive_td
();

36 
∑ª¡_tid
 = 
cuºít_td
->
pid
;

37 
zx_td
 *
±d
 = 
	`zx_gë_td
(
∑ª¡_tid
);

39 if–
±d
->
°©e
 !
TASK_STATE_ZOMBIE
 )

41  
∑ª¡_tid
;

45 
	}
}

56 
	$zx_my_tid
()

58  
	`zx_gë_a˘ive_èsk_id
();

59 
	}
}

67 
	$zx_exô
()

69 
zx_td
* 
mytd
 = 
	`zx_gë_a˘ive_td
();

71 
	`zx_kûl
–
mytd
->
tid
 );

72 
	}
}

79 
zx_¸óã
–
¥i‹ôy
, (*
zx_èsk
)() )

81 
¨øy_ödex
;

86 *
td_bô_d©a_±r
 = (*)(
TD_BIT_DATA
);

90 
td_bô_d©a
 = *
td_bô_d©a_±r
;

93 if–()
zx_èsk
 =()
IDLE_TASK
 )

96 
¨øy_ödex
 = 
IDLE_TASK_TID
;

100 
¨øy_ödex
 = 
	`zx_cou¡_åaûög_zîos_64
(
td_bô_d©a
);

103 i‡(
¨øy_ödex
 =
TASK_COUNT
)

104  
ERR_CANNOT_CREATE_TASK
;

106 
td_bô_d©a
 = 
	`zx_£t_bô_64
—d_bô_d©a, 
¨øy_ödex
, 0);

108 
	`zx_mem˝y
(
td_bô_d©a_±r
, &
td_bô_d©a
, ());

110 
zx_td
 *
√w_td
 = 
	`zx_gë_td
(
¨øy_ödex
);

112 
gíî©i⁄_numbî
 = (
√w_td
->
tid
 >> 8);

114 
gíî©i⁄_numbî
++;

116 if–()
zx_èsk
 =()
zx_idÀ
 )

119 
gíî©i⁄_numbî
 = 0;

122 
√w_td
->
tid
 &
ARRAY_INDEX_MASK
;

123 
√w_td
->
tid
 |(
gíî©i⁄_numbî
 << 8);

126 
√w_td
->
pid
 = 
	`zx_my_tid
();

127 
√w_td
->
°©e
 = 
TASK_STATE_READY
;

128 
√w_td
->
¥i‹ôy
 =Öriority;

130 
√w_td
->
°ack_limô
 = (*)(
USER_STACK_SPACE_BASE
 + (
¨øy_ödex
 * 
TASK_STACK_SPACE_SIZE
));

131 
√w_td
->
°ack_ba£
 = (*)“ew_td->
°ack_limô
 + 
TASK_STACK_SPACE_SIZE
);

150 
√w_td
->
•§
 = 
TASK_NORMAL_CPSR
;

153 
√w_td
->
ªtu∫_vÆue
 = 
TASK_NO_RETURN_VALUE
;

155 
√w_td
->
•
 = (*)
	`zx_öôülize_°ack
–√w_td->
°ack_ba£
, (*)
zx_èsk
 );

158 
	`zx_hóp_¸óã
((*)
√w_td
);

160  
√w_td
->
tid
;

161 
	}
}

168 
	$zx_£nd
–
ªcv_tid
, *
mesßge
, 
msgÀn
, *
ª∂y
, 
ª∂yÀn
 )

170 *
•
;

173 
zx_td
 *
£ndîtd
 = (zx_td*)
	`zx_gë_a˘ive_td
();

176 if((
ªcv_tid
 =
£ndîtd
->
tid
Ë|| !(
	`zx_is_èskid_vÆid
(Ñecv_tid )) )

178 
£ndîtd
->
ªtu∫_vÆue
 = 
ERR_IMPOSSIBLE_TASKID
;

184 if–!(
	`zx_d€s_èsk_exi°
–
ªcv_tid
 )) )

186 
£ndîtd
->
ªtu∫_vÆue
 = 
ERR_NONEXISTENT_TASK
;

192 
zx_td
 *
ª˚ivîtd
 = (zx_td*)
	`zx_gë_td
(
ªcv_tid
);

194 i‡(
ª˚ivîtd
->
°©e
 =
TASK_STATE_REPLY_BLOCKED
)

196 
£ndîtd
->
ªtu∫_vÆue
 = 
ERR_SEND_RECEIVE_REPLY_TRANSACTION_INCOMPLETE
;

202 
	`zx_q_ªmove_node
–
£ndîtd
->
tid
 , sídîtd->
¥i‹ôy
 );

206 
•
 = 
£ndîtd
->sp;

207 
•
--;

208 *
•
 = ()
ª∂y
;

209 
•
--;

210 *
•
 = 
ª∂yÀn
;

211 
£ndîtd
->
•
 = sp;

214 if–
TASK_STATE_SEND_BLOCKED
 =
ª˚ivîtd
->
°©e
 )

223 
•
 = 
ª˚ivîtd
->sp;

224 *
£ndî_tid
 = (*)(*
•
);

225 
•
++;

226 *
ª˚ive_mesßge
 = (*Ë(*
•
);

227 
•
++;

228 
ª˚ive_msgÀn
 = ()(*
•
);

229 
•
++;

230 
ª˚ivîtd
->
•
 = sp;

233 *
£ndî_tid
 = 
	`zx_gë_a˘ive_èsk_id
();

234 
	`zx_mem˝y
–
ª˚ive_mesßge
, 
mesßge
, 
ª˚ive_msgÀn
 );

236 
ª˚ivîtd
->
ªtu∫_vÆue
 = 
msgÀn
;

239 
£ndîtd
 -> 
°©e
 = 
TASK_STATE_REPLY_BLOCKED
;

242 
ª˚ivîtd
->
°©e
 = 
TASK_STATE_READY
;

246 
	`zx_q_≠≥nd_to_≥nu…im©e
–
ªcv_tid
, 
ª˚ivîtd
->
¥i‹ôy
 );

253 
zx_ª˚ive_queue_node
 *
ª˚ive_queue_node
 = 
	`zx_ª˚ive_q_¸óã_node
–
£ndîtd
->
tid
, 
mesßge
, 
msgÀn
 );

254 
	`zx_ª˚ive_q_≠≥nd_to_íd
–
ªcv_tid
, 
ª˚ive_queue_node
 );

256 
£ndîtd
 -> 
°©e
 = 
TASK_STATE_RECEIVE_BLOCKED
;

261 
	}
}

268 
	$zx_ª˚ive
–*
£ndîtid
, *
mesßge
, 
msgÀn
)

270 
zx_td
 *
ª˚ivîtd
 = (zx_td*)
	`zx_gë_a˘ive_td
();

271 
ªcv_tid
 = 
ª˚ivîtd
->
tid
;

274 
zx_ª˚ive_queue_node
 *
ª˚ive_queue_node
 = 
	`zx_ª˚ive_q_gë_√xt_node
–
ªcv_tid
 );

277 if–
ª˚ive_queue_node
 =
NULL
 )

282 
ª˚ivîtd
 -> 
°©e
 = 
TASK_STATE_SEND_BLOCKED
;

285 
	`zx_q_ªmove_node
–
ªcv_tid
, 
ª˚ivîtd
->
¥i‹ôy
 );

289 *
•
 = 
ª˚ivîtd
 -> sp;

290 
•
--;

291 *
•
 = 
msgÀn
;

293 
•
--;

294 *
•
 = ()
mesßge
;

296 
•
--;

297 *
•
 = ()
£ndîtid
;

298 
ª˚ivîtd
 -> 
•
 = sp;

303 
£ndî_tid_‰om_q
 = 
ª˚ive_queue_node
->
tid
;

305 *
£ndîtid
 = 
£ndî_tid_‰om_q
;

307 
zx_td
 *
£ndîtd
 = 
	`zx_gë_td
–
£ndî_tid_‰om_q
 );

309 
£ndîtd
->
°©e
 = 
TASK_STATE_REPLY_BLOCKED
;

312 
	`zx_mem˝y
–
mesßge
 ,
ª˚ive_queue_node
->
msg
, 
msgÀn
 );

315 
ª˚ivîtd
->
ªtu∫_vÆue
 = 
ª˚ive_queue_node
 ->
msgÀn
;

318 
	`zx_ª˚ive_q_‰ì_hód
–
ª˚ive_queue_node
 );

322 
	}
}

329 
	$zx_ª∂y
–
£ndîtid
, *
ª∂y
, 
ª∂y_Àn
)

332 
zx_td
 *
ª∂y_td
 = (zx_td*)
	`zx_gë_a˘ive_td
();

333 
£ndî_ª∂y_buf„r_Àn
 = 0;

338 if–!(
	`zx_is_èskid_vÆid
(
£ndîtid
 )) )

340 
ª∂y_td
 -> 
ªtu∫_vÆue
 = 
ERR_IMPOSSIBLE_TASKID
;

345 if–!(
	`zx_d€s_èsk_exi°
(
£ndîtid
 )) )

347 
ª∂y_td
 -> 
ªtu∫_vÆue
 = 
ERR_NONEXISTENT_TASK
;

351 
zx_td
 *
£ndî_td
 = 
	`zx_gë_td
–
£ndîtid
 );

353 *
£ndî_•
 = 
£ndî_td
->
•
;

357 if–
£ndî_td
 -> 
°©e
 !
TASK_STATE_REPLY_BLOCKED
 )

359 
ª∂y_td
 -> 
ªtu∫_vÆue
 = 
ERR_SENDER_NOT_REPLY_BLOCKED
;

363 
£ndî_ª∂y_buf„r_Àn
 = *
£ndî_•
;

364 
£ndî_•
++;

367 if–
£ndî_ª∂y_buf„r_Àn
 < 
ª∂y_Àn
 )

369 
ª∂y_td
 -> 
ªtu∫_vÆue
 = 
ERR_INSUFFICIENT_REPLY_BUFFER
;

375 *
£ndî_ª∂y_buf„r_±r
 = (*)(*
£ndî_•
);

376 
£ndî_•
++;

379 
£ndî_td
->
•
 = 
£ndî_•
;

382 
	`zx_mem˝y
–(*)
£ndî_ª∂y_buf„r_±r
, 
ª∂y
, 
ª∂y_Àn
 );

385 
£ndî_td
->
ªtu∫_vÆue
 = 
ª∂y_Àn
;

388 
£ndî_td
->
°©e
 = 
TASK_STATE_READY
;

391 if–
£ndî_td
->
¥i‹ôy
 =
ª∂y_td
->priority )

403 
	`zx_q_≠≥nd_to_≥nu…im©e
–
£ndîtid
, 
£ndî_td
->
¥i‹ôy
 );

410 
	`zx_q_≠≥nd_to_íd
–
£ndîtid
, 
£ndî_td
->
¥i‹ôy
 );

413 
ª∂y_td
 -> 
ªtu∫_vÆue
 = 0;

415 
	}
}

423 
	$zx_awaô_evít
(
evít_numbî
)

425 * 
addr
;

427 
evít_numbî
)

429 
EVENT_TIMER
:

430 
addr
 = (*)(
AWAIT_TIMER_TID
);

434 
EVENT_UART1_RX
:

435 
addr
 = (*)(
AWAIT_UART1_RX_TID
);

436 
	`zx_devi˚_öå_⁄
(
INTR_SOURCE_UART1_RX
);

440 
EVENT_UART1_TX
:

441 
addr
 = (*)(
AWAIT_UART1_TX_TID
);

442 
	`zx_devi˚_öå_⁄
(
INTR_SOURCE_UART1_TX
);

443 
	`zx_devi˚_öå_⁄
(
INTR_SOURCE_UART1_MODEM
);

448 
EVENT_UART2_RX
:

449 
addr
 = (*)(
AWAIT_UART2_RX_TID
);

450 
	`zx_devi˚_öå_⁄
(
INTR_SOURCE_UART2_RX
);

452 
EVENT_UART2_TX
:

453 
addr
 = (*)(
AWAIT_UART2_TX_TID
);

454 
	`zx_devi˚_öå_⁄
(
INTR_SOURCE_UART2_TX
);

457 
	`bw¥ötf
(
COM2
, "zx_awaô_evít: Unsuµ‹ãdÉvít_numbî: %d.\n", 
evít_numbî
);

462 
zx_td
* 
td
 = 
	`zx_gë_a˘ive_td
();

465 
td
->
°©e
 = 
TASK_STATE_EVENT_BLOCKED
;

468 
	`zx_q_ªmove_node
–
td
->
tid
 ,Åd->
¥i‹ôy
 );

469 *
addr
 = 
td
->
tid
;

470 
	}
}

477 
	$zx_h™dÀ_hwi
(
devi˚_numbî
)

479 
devi˚_numbî
)

481 
INTR_SOURCE_TIMER_1
:

482 
	`zx_h™dÀ_timî_öãºu±
(0);

484 
INTR_SOURCE_UART1_RX
:

485 
	`zx_h™dÀ_u¨t_öãºu±
(
INTR_SOURCE_UART1_RX
, 0);

487 
INTR_SOURCE_UART1_TX
:

488 
	`zx_h™dÀ_u¨t1_å™smô_öãºu±
(
INTR_SOURCE_UART1_TX
, 0);

490 
INTR_SOURCE_UART1_MODEM
:

491 
	`zx_h™dÀ_u¨t1_å™smô_öãºu±
(
INTR_SOURCE_UART1_MODEM
, 0);

493 
INTR_SOURCE_UART2_RX
:

494 
	`zx_h™dÀ_u¨t_öãºu±
(
INTR_SOURCE_UART2_RX
, 0);

496 
INTR_SOURCE_UART2_TX
:

497 
	`zx_h™dÀ_u¨t_öãºu±
(
INTR_SOURCE_UART2_TX
, 0);

503 
	}
}

506 
	$zx_kûl
–
tid
 )

508 
zx_td
* 
mytd
 = 
	`zx_gë_td
(
tid
);

510 
∑π_¨øy
 = (
mytd
->
tid
Ë& (
TASK_ARRAY_INDEX_PART_MASK
);

512 * 
td_bô_d©a_±r
 = (*)(
TD_BIT_DATA
);

513 
td_bô_d©a
 = * 
td_bô_d©a_±r
;

515 
td_bô_d©a
 = 
	`zx_£t_bô_64
—d_bô_d©a, 
∑π_¨øy
, 1);

517 
	`zx_mem˝y
(
td_bô_d©a_±r
, &
td_bô_d©a
, ());

519 
mytd
->
°©e
 = 
TASK_STATE_ZOMBIE
;

520 
	`zx_q_ªmove_node
(
∑π_¨øy
, 
mytd
->
¥i‹ôy
 );

521 
	}
}

524 
	$zx_shutdown
()

529 
	`zx_h™dÀ_timî_öãºu±
(1);

530 
	`zx_h™dÀ_u¨t_öãºu±
(
INTR_SOURCE_UART1_RX
, 1);

531 
	`zx_h™dÀ_u¨t_öãºu±
(
INTR_SOURCE_UART2_RX
, 1);

532 
	`zx_h™dÀ_u¨t_öãºu±
(
INTR_SOURCE_UART2_TX
, 1);

533 
	`zx_h™dÀ_u¨t1_å™smô_öãºu±
(
INTR_SOURCE_UART1_TX
, 1);

535 
	`zx_timî_dißbÀ
–
IDLE_TASK_TIMER
 );

536 
	`zx_timî_dißbÀ
–
IRQ_TIMER
 );

538 
	`zx_ª£t_Æl_öãºu±s
();

542 
zx_td
 *
idÀtd
 = 
	`zx_gë_td
(
IDLE_TASK_TID
);

543 
idÀtd
->
°©e
 = 
TASK_STATE_ZOMBIE
;

544 
	`zx_q_ªmove_node
(
IDLE_TASK_TID
, 
idÀtd
->
¥i‹ôy
 );

545 
	}
}

552 
	$zx_öôülize_°ack
–* 
ba£
, *
zx_èsk
 )

554 * 
°ack_t›
 = 
ba£
;

556 *
°ack_t›
 = ()(
zx_èsk
);

557 
°ack_t›
--;

558 *
°ack_t›
 = 
R12_INIT_VAL
;

559 
°ack_t›
--;

560 *
°ack_t›
 = 
R11_INIT_VAL
;

561 
°ack_t›
--;

562 *
°ack_t›
 = 
R10_INIT_VAL
;

563 
°ack_t›
--;

564 *
°ack_t›
 = 
R9_INIT_VAL
;

565 
°ack_t›
--;

566 *
°ack_t›
 = 
R8_INIT_VAL
;

567 
°ack_t›
--;

568 *
°ack_t›
 = 
R7_INIT_VAL
;

569 
°ack_t›
--;

570 *
°ack_t›
 = 
R6_INIT_VAL
;

571 
°ack_t›
--;

572 *
°ack_t›
 = 
R5_INIT_VAL
;

573 
°ack_t›
--;

574 *
°ack_t›
 = 
R4_INIT_VAL
;

575 
°ack_t›
--;

576 *
°ack_t›
 = 
R3_INIT_VAL
;

577 
°ack_t›
--;

578 *
°ack_t›
 = 
R2_INIT_VAL
;

579 
°ack_t›
--;

580 *
°ack_t›
 = 
R1_INIT_VAL
;

581 
°ack_t›
--;

582 *
°ack_t›
 = 
R0_INIT_VAL
;

583 
°ack_t›
--;

585 *
°ack_t›
 = ()(
zx_èsk
);

587  ()
°ack_t›
;

588 
	}
}

590 
	$debug_m™y_¨gs
–
zx_ªque°
* 
ªq
)

592 
	`bw¥ötf
(
COM2
, "Arg1: %x. \n", 
ªq
->
¨g1
);

593 
	`bw¥ötf
(
COM2
, "Arg2: %x. \n", 
ªq
->
¨g2
);

594 
	`bw¥ötf
(
COM2
, "Arg3: %x. \n", 
ªq
->
¨g3
);

595 
	`bw¥ötf
(
COM2
, "Arg4: %x. \n", 
ªq
->
¨g4
);

596 
	`bw¥ötf
(
COM2
, "Arg5: %x. \n", 
ªq
->
¨g5
);

597 
	`bw¥ötf
(
COM2
, "Arg6: %x. \n", 
ªq
->
¨g6
);

598 
	`bw¥ötf
(
COM2
, "Arg7: %x. \n", 
ªq
->
¨g7
);

600 
	}
}

	@src/kernel/zx_system_calls.c

13 
	~<zx_sy°em_ˇŒs.h
>

14 
	~<zx_kî√l_c⁄fig.h
>

15 
	~<zx_ns.h
>

16 
	~<zx_èsks.h
>

17 
	~<zx_˛ock_£rvî.h
>

18 
	~<zx_îr.h
>

19 
	~<zx_u¨t_io.h
>

21 
Cª©e
–
¥i‹ôy
, (*
code
)() )

23 
	`__asm__
(

26 
ªsu…
;

27 
	`asm
("mov %[v],Ñ0" : [
v
]"Ù"(
ªsu…
));

28  
ªsu…
;

29 
	}
}

31 
	$Pass
()

33 
	`__asm__
(

36 
	}
}

38 
	$Exô
()

40 
	`__asm__
(

43 
	}
}

45 
	$MyTid
()

47 
	`__asm__
(

50 
ªsu…
;

51 
	`asm
("mov %[v],Ñ0" : [
v
]"Ù"(
ªsu…
));

52  
ªsu…
;

53 
	}
}

55 
	$MyP¨ítTid
()

57 
	`__asm__
(

60 
ªsu…
;

61 
	`asm
("mov %[v],Ñ0" : [
v
]"Ù"(
ªsu…
));

62  
ªsu…
;;

63 
	}
}

66 
	$Síd
–
tid
, *
mesßge
, 
msgÀn
, *
ª∂y
, 
ª∂yÀn
 )

69 
ªsu…
;

71 
	`__asm__
(

75 
	`asm
("mov %[v],Ñ0" : [
v
]"Ù"(
ªsu…
));

77  
ªsu…
;

78 
	}
}

82 
	$Re˚ive
–*
tid
, *
mesßge
, 
msgÀn
 )

84 
	`__asm__
(

87 
ªsu…
;

88 
	`asm
("mov %[v],Ñ0" : [
v
]"Ù"(
ªsu…
));

89  
ªsu…
;;

90 
	}
}

93 
	$Rïly
–
tid
, *
ª∂y
, 
ª∂yÀn
 )

95 
	`__asm__
(

98 
ªsu…
;

99 
	`asm
("mov %[v],Ñ0" : [
v
]"Ù"(
ªsu…
));

100  
ªsu…
;;

101 
	}
}

103 * 
	$AŒoc
()

105 
	`__asm__
(

108 
ªsu…
;

109 
	`asm
("mov %[v],Ñ0" : [
v
]"Ù"(
ªsu…
));

110  (*)
ªsu…
;

111 
	}
}

114 
	$Fªe
()

116 
	`__asm__
(

119 
	}
}

123 
	$AwaôEvít
(
evít_numbî
)

125 
	`__asm__
(

128 
ªsu…
;

129 
	`asm
("mov %[v],Ñ0" : [
v
]"Ù"(
ªsu…
));

130  
ªsu…
;

131 
	}
}

135 
	$Dñay
(
ticks
)

137 * 
˛ock_£rvî_id_addr
 = (*)(
CLOCK_SERVER_TID
);

138 
˛ock_£rvî_id
 = *
˛ock_£rvî_id_addr
;

140 
zx_time_ªque°
 
ªque°
;

141 
zx_time_ªque°
 
ª•⁄£
;

143 
ªque°
.
ty≥
 = 
API_CS_DELAY
;

144 
ªque°
.
vÆue
 = 
ticks
;

146 
ªsu…
 = 
	`Síd
(
˛ock_£rvî_id
, &
ªque°
, (
zx_time_ªque°
), &
ª•⁄£
, (zx_time_request));

148 if–
ªsu…
 < 0 ) Ñesult;

150 
ªsu…
 = 
ª•⁄£
.
vÆue
;

152 if–
ª•⁄£
.
ty≥
 =
MSG_SERVER_EXITED
 )

154 
ªsu…
 = 
ERR_NONEXISTENT_TASK
;

157  
ªsu…
;

158 
	}
}

162 
	$Time
()

164 * 
˛ock_£rvî_id_addr
 = (*)(
CLOCK_SERVER_TID
);

165 
˛ock_£rvî_id
 = *
˛ock_£rvî_id_addr
;

167 
zx_time_ªque°
 
ªque°
;

168 
zx_time_ªque°
 
ª•⁄£
;

170 
ªque°
.
ty≥
 = 
API_CS_TIME
;

171 
ªque°
.
vÆue
 = 0;

173 
ªsu…
 = 
	`Síd
(
˛ock_£rvî_id
, &
ªque°
, (
zx_time_ªque°
), &
ª•⁄£
, (zx_time_request));

175 if–
ªsu…
 < 0 ) Ñesult;

177 
ªsu…
 = 
ª•⁄£
.
vÆue
;

179 if–
ª•⁄£
.
ty≥
 =
MSG_SERVER_EXITED
 )

181 
ªsu…
 = 
ERR_NONEXISTENT_TASK
;

184  
ªsu…
;

186 
	}
}

190 
	$DñayU¡û
(
ticks
)

192 * 
˛ock_£rvî_id_addr
 = (*)(
CLOCK_SERVER_TID
);

193 
˛ock_£rvî_id
 = *
˛ock_£rvî_id_addr
;

195 
zx_time_ªque°
 
ªque°
;

196 
zx_time_ªque°
 
ª•⁄£
;

198 
ªque°
.
ty≥
 = 
API_CS_DELAY_UNTIL
;

199 
ªque°
.
vÆue
 = 
ticks
;

201 
ªsu…
 = 
	`Síd
(
˛ock_£rvî_id
, &
ªque°
, (
zx_time_ªque°
), &
ª•⁄£
, (zx_time_request));

203 if–
ªsu…
 < 0 ) Ñesult;

205 
ªsu…
 = 
ª•⁄£
.
vÆue
;

207 if–
ª•⁄£
.
ty≥
 =
MSG_SERVER_EXITED
 )

209 
ªsu…
 = 
ERR_NONEXISTENT_TASK
;

212  
ªsu…
;

214 
	}
}

221 
	$WhoIs
–* 
«me
 )

223 * 
ns_id_addr
 = (*)(
NAME_SERVER_TID
);

224 
ns_id
 = *
ns_id_addr
;

226 
zx_ns_ªque°
 
ªque°
;

227 
zx_ns_ªque°
 
ª•⁄£
;

229 
ªque°
.
tid
 = 0;

230 
ªque°
.
ty≥
 = 
API_NS_WHOIS
;

231 
ªque°
.
«me
 =Çame;

233 
	`Síd
(
ns_id
, &
ªque°
, (
zx_ns_ªque°
), &
ª•⁄£
, (zx_ns_request));

235  
ª•⁄£
.
tid
;

236 
	}
}

239 
	$Regi°îAs
–* 
«me
 )

241 * 
ns_id_addr
 = (*)(
NAME_SERVER_TID
);

242 
ns_id
 = *
ns_id_addr
;

244 
zx_ns_ªque°
 
ªque°
;

245 
zx_ns_ªque°
 
ª•⁄£
;

247 
ªque°
.
tid
 = 
	`MyTid
();

248 
ªque°
.
ty≥
 = 
API_NS_REGISTER
;

249 
ªque°
.
«me
 =Çame;

251 
	`Síd
(
ns_id
, &
ªque°
, (
zx_ns_ªque°
), &
ª•⁄£
, (zx_ns_request));

253  
ª•⁄£
.
tid
;

254 
	}
}

257 
	$GëC
(
ch™√l
)

259 * 
u¨t_£rvî_id_addr
;

261 
zx_u¨t_ªque°
 
ªque°
;

262 
zx_u¨t_ªque°
 
ª•⁄£
;

264  
ch™√l
 )

266 
COM1
:

267 
u¨t_£rvî_id_addr
 = (*)(
UART1_RX_SERVER_TID
);

268 
ªque°
.
ty≥
 = 
API_UART1_GETC
;

271 
COM2
:

272 
u¨t_£rvî_id_addr
 = (*)(
UART2_RX_SERVER_TID
);

273 
ªque°
.
ty≥
 = 
API_UART2_GETC
;

277  
ZXERR_UART_INVALID_CHANNEL
;

280 
u¨t_£rvî_id
 = *
u¨t_£rvî_id_addr
;

282 
ªsu…
 = 
	`Síd
(
u¨t_£rvî_id
, &
ªque°
, (
zx_u¨t_ªque°
), &
ª•⁄£
, (zx_uart_request));

284 if–
ªsu…
 < 0 ) Ñesult;

286 if–
ª•⁄£
.
ty≥
 =
MSG_SERVER_EXITED
 )

288  
ERR_NONEXISTENT_TASK
;

291 if–
ª•⁄£
.
vÆue
 =
UART_RX_ERROR
 )

293 
ªsu…
 = 
RECEIVE_ERROR
;

298 
ªsu…
 = 
ª•⁄£
.
vÆue
;

301  
ªsu…
;

302 
	}
}

306 
	$PutC
(
ch™√l
, 
c
)

310 * 
u¨t_£rvî_id_addr
;

312 
zx_u¨t_ªque°
 
ªque°
;

313 
zx_u¨t_ªque°
 
ª•⁄£
;

315  
ch™√l
 )

317 
COM1
:

318 
u¨t_£rvî_id_addr
 = (*)(
UART1_TX_SERVER_TID
);

319 
ªque°
.
ty≥
 = 
API_UART1_PUTC
;

322 
COM2
:

323 
u¨t_£rvî_id_addr
 = (*)(
UART2_TX_SERVER_TID
);

324 
ªque°
.
ty≥
 = 
API_UART2_PUTC
;

328  
ZXERR_UART_INVALID_CHANNEL
;

331 
u¨t_£rvî_id
 = *
u¨t_£rvî_id_addr
;

334 
ªque°
.
vÆue
 = 
c
;

336 
ªsu…
 = 
	`Síd
(
u¨t_£rvî_id
, &
ªque°
, (
zx_u¨t_ªque°
), &
ª•⁄£
, (zx_uart_request));

338 if–
ª•⁄£
.
ty≥
 =
MSG_SERVER_EXITED
 )

340  
ERR_NONEXISTENT_TASK
;

344 if–
ª•⁄£
.
vÆue
 =
UART_TX_ERROR
 )

347 
ªsu…
 = 
TRANSMISSION_ERROR
;

349  
ªsu…
;

350 
	}
}

356 
	$Cª©eNameSîvî
()

358 
tid
 = 
	`Cª©e
–
ZX_NAME_SERVER_PRIORITY
, &
zx_«me_£rvî
 );

362 * 
ns_addr
 = (*)(
NAME_SERVER_TID
);

363 *
ns_addr
 = 
tid
;

365  
tid
;

366 
	}
}

369 
	$Clo£NameSîvî
()

371 * 
ns_id_addr
 = (*)(
NAME_SERVER_TID
);

372 
ns_id
 = *
ns_id_addr
;

374 
zx_ns_ªque°
 
ªque°
;

375 
zx_ns_ªque°
 
ª•⁄£
;

377 
ªque°
.
tid
 = 0;

378 
ªque°
.
ty≥
 = 
API_NS_EXIT
;

379 
ªque°
.
«me
 = 0;

381 
	`Síd
(
ns_id
, &
ªque°
, (
zx_ns_ªque°
), &
ª•⁄£
, (zx_ns_request));

384 
	}
}

388 
	$Cª©eClockSîvî
()

390 
tid
 = 
	`Cª©e
–
ZX_CLOCK_SERVER_PRIORITY
, &
zx_˛ock_£rvî
 );

395 * 
cs_addr
 = (*)(
CLOCK_SERVER_TID
);

396 *
cs_addr
 = 
tid
;

398  
tid
;

399 
	}
}

403 
	$Clo£ClockSîvî
()

405 * 
cs_id_addr
 = (*)(
CLOCK_SERVER_TID
);

406 
cs_id
 = *
cs_id_addr
;

408 
zx_time_ªque°
 
ªque°
;

409 
zx_time_ªque°
 
ª•⁄£
;

411 
ªque°
.
ty≥
 = 
API_CS_EXIT
;

412 
ªque°
.
vÆue
 = 0;

414 
	`Síd
(
cs_id
, &
ªque°
, (
zx_time_ªque°
), &
ª•⁄£
, (zx_time_request));

416  
ª•⁄£
.
vÆue
;

417 
	}
}

422 
	$Cª©eUARTSîvîs
()

424 
tid
;

427 
tid
 = 
	`Cª©e
–
ZX_UART2_TX_SERVER_PRIORITY
, &
zx_u¨t2_tx_£rvî
 );

428 * 
u¨t_tx_addr
 = (*)(
UART2_TX_SERVER_TID
);

429 *
u¨t_tx_addr
 = 
tid
;

432 
tid
 = 
	`Cª©e
–
ZX_UART2_RX_SERVER_PRIORITY
, &
zx_u¨t2_rx_£rvî
 );

433 * 
u¨t_rx_addr
 = (*)(
UART2_RX_SERVER_TID
);

434 *
u¨t_rx_addr
 = 
tid
;

437 
tid
 = 
	`Cª©e
–
ZX_UART1_TX_SERVER_PRIORITY
, &
zx_u¨t1_tx_£rvî
 );

438 *
u¨t1_tx_addr
 = (*)(
UART1_TX_SERVER_TID
);

439 *
u¨t1_tx_addr
 = 
tid
;

442 
tid
 = 
	`Cª©e
–
ZX_UART1_RX_SERVER_PRIORITY
, &
zx_u¨t1_rx_£rvî
 );

443 *
u¨t2_rx_addr
 = (*)(
UART1_RX_SERVER_TID
);

444 *
u¨t2_rx_addr
 = 
tid
;

447 
	}
}

450 
	$Clo£UARTSîvîs
()

455 
zx_u¨t_ªque°
 
ªque°
;

456 
zx_u¨t_ªque°
 
ª•⁄£
;

458 
ªque°
.
ty≥
 = 
API_UART_EXIT
;

459 
ªque°
.
vÆue
 = 0;

461 *
u¨t1_tx_addr
 = (*)(
UART1_TX_SERVER_TID
);

462 
	`Síd
–*
u¨t1_tx_addr
 , &
ªque°
, (
zx_u¨t_ªque°
), &
ª•⁄£
, (zx_uart_request));

463 *
u¨t1_tx_addr
 = 
INVALID_TASK_ID
;

465 *
u¨t1_rx_addr
 = (*)(
UART1_RX_SERVER_TID
);

466 
	`Síd
–*
u¨t1_rx_addr
 , &
ªque°
, (
zx_u¨t_ªque°
), &
ª•⁄£
, (zx_uart_request));

467 *
u¨t1_rx_addr
 = 
INVALID_TASK_ID
;

469 * 
u¨t2_tx_addr
 = (*)(
UART2_TX_SERVER_TID
);

470 
	`Síd
–*
u¨t2_tx_addr
 , &
ªque°
, (
zx_u¨t_ªque°
), &
ª•⁄£
, (zx_uart_request));

471 *
u¨t2_tx_addr
 = 
INVALID_TASK_ID
;

473 * 
u¨t2_rx_addr
 = (*)(
UART2_RX_SERVER_TID
);

474 
	`Síd
–*
u¨t2_rx_addr
 , &
ªque°
, (
zx_u¨t_ªque°
), &
ª•⁄£
, (zx_uart_request));

475 *
u¨t2_rx_addr
 = 
INVALID_TASK_ID
;

478 
	}
}

481 
	$Shutdown
()

486 
	`Clo£NameSîvî
();

489 
˛ock_£rvî_time
 = 
	`Clo£ClockSîvî
();

492 
	`Clo£UARTSîvîs
();

498 *
time
 = (*)(
VAR_IDLE_TASK_TIME
);

500 
˛ock_£rvî_time
 *= 10;

503 
≥r˚¡age
 = ((*
time
)*100)/(
˛ock_£rvî_time
);

507 *
addr2
 = (*)
STAT_VAR2
;

510 *
addr2
 = 
≥r˚¡age
;

512 
	`__asm__
(

515 
	}
}

518 
	$Kûl
–
tid
)

520 
	`__asm__
(

523 
	}
}

526 
	$DebugM™yArgs
(
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
)

528 
	`__asm__
(

531 
ªsu…
;

532 
	`asm
("mov %[v],Ñ0" : [
v
]"Ù"(
ªsu…
));

533  
ªsu…
;

534 
	}
}

538 
	$PutMu…ùÀ
(
ch™√l
, * 
¨øy
)

540 * 
u¨t_£rvî_id_addr
;

542 
zx_u¨t_ªque°
 
ªque°
;

543 
zx_u¨t_ªque°
 
ª•⁄£
;

545  
ch™√l
 )

547 
COM1
:

548 
u¨t_£rvî_id_addr
 = (*)(
UART1_TX_SERVER_TID
);

549 
ªque°
.
ty≥
 = 
API_UART1_PUT_MULTIPLE
;

552 
COM2
:

553 
u¨t_£rvî_id_addr
 = (*)(
UART2_TX_SERVER_TID
);

554 
ªque°
.
ty≥
 = 
API_UART2_PUT_MULTIPLE
;

558  
ZXERR_UART_INVALID_CHANNEL
;

561 
u¨t_£rvî_id
 = *
u¨t_£rvî_id_addr
;

564 
ªque°
.
vÆue
 = ()
¨øy
;

566 
ªsu…
 = 
	`Síd
(
u¨t_£rvî_id
, &
ªque°
, (
zx_u¨t_ªque°
), &
ª•⁄£
, (zx_uart_request));

568 if–
ª•⁄£
.
ty≥
 =
MSG_SERVER_EXITED
 )

570  
ERR_NONEXISTENT_TASK
;

574 if–
ª•⁄£
.
vÆue
 =
UART_TX_ERROR
 )

580  
ªsu…
;

581 
	}
}

	@src/kernel/zx_testing.c

9 
	~<ts7200.h
>

10 
	~<zx_sy°em_ˇŒs.h
>

11 
	~<zx_kî√l_body.h
>

12 
	~<zx_kî√l_hód.h
>

13 
	~<zx_èsks.h
>

14 
	~<zx_ªady_queue.h
>

16 
	~<zx_kî√l_c⁄fig.h
>

17 
	~<zx_ã°ög.h
>

19 
	~<zx_mem‹y.h
>

20 
	~<zx_ns_åì.h
>

21 
	~<zx_ns.h
>

23 
	~<zx_queue.h
>

24 
	~<zx_u¨t_io.h
>

26 
	~<zx_¥oje˘.h
>

28 
	~<zx_¥oje˘_åack_£nsög.h
>

47 
	$ã°1_Ÿhî_èsk
()

49 
tid
 = 
	`MyTid
();

50 
∑ª¡_id
 = 
	`MyP¨ítTid
();

52 
	`zx_¥ötf
–
COM2
, "MyTid: %d, MyP¨ítTid: %d\n", 
tid
, 
∑ª¡_id
 );

54 
	`Pass
();

56 
	`zx_¥ötf
–
COM2
, "MyTid: %d, MyP¨ítTid: %d\n", 
tid
, 
∑ª¡_id
 );

58 
	`Exô
();

59 
	}
}

62 
	$ã°1
()

65 
tid1
 = 
	`Cª©e
–
FIRST_USER_TASK_PRIORITY
+1, &
ã°1_Ÿhî_èsk
 );

66 
	`zx_¥ötf
–
COM2
, "Cª©ed: %d\n", 
tid1
 );

68 
tid2
 = 
	`Cª©e
–
FIRST_USER_TASK_PRIORITY
+1, &
ã°1_Ÿhî_èsk
 );

69 
	`zx_¥ötf
–
COM2
, "Cª©ed: %d\n", 
tid2
 );

72 
tid3
 = 
	`Cª©e
–
FIRST_USER_TASK_PRIORITY
-1, &
ã°1_Ÿhî_èsk
 );

73 
	`zx_¥ötf
–
COM2
, "Cª©ed: %d\n", 
tid3
 );

75 
tid4
 = 
	`Cª©e
–
FIRST_USER_TASK_PRIORITY
-1, &
ã°1_Ÿhî_èsk
 );

76 
	`zx_¥ötf
–
COM2
, "Cª©ed: %d\n", 
tid4
 );

78 
	`zx_¥ötf
–
COM2
, "First: Exiting\n" );

80 
	}
}

90 
	$ã°2_Ÿhî_èsk
()

92 
tid
 = 
	`MyTid
();

93 
∑ª¡_id
 = 
	`MyP¨ítTid
();

95 
	`zx_¥ötf
–
COM2
, "MyTid: %d, MyP¨ítTid: %d\n", 
tid
, 
∑ª¡_id
 );

97 
	`Pass
();

99 
	`zx_¥ötf
–
COM2
, "MyTid: %d, MyP¨ítTid: %d\n", 
tid
, 
∑ª¡_id
 );

101 
	`Exô
();

102 
	}
}

104 
	$ã°2
()

106 
	`zx_¥ötf
–
COM2
, "First: Starting\n" );

107 
ªsu…
 = 
	`DebugM™yArgs
(0x11111112, 0x22222223, 0x33333334, 0x44444445, 0x55555556, 0x66666667, 0x77777778);

108 
	`zx_¥ötf
–
COM2
, "Resu…: %x. \n", 
ªsu…
);

110 
i
;

111 
i
 = 0; i < 66; i++)

113 
¥i‹ôy
 = 0;

115 i‡(
i
 == 2 || i == 20 || i == 60)

116 
¥i‹ôy
 = 
FIRST_USER_TASK_PRIORITY
 - 1;

118 
¥i‹ôy
 = 
FIRST_USER_TASK_PRIORITY
 + 1;

120 
tid1
 = 
	`Cª©e
–
¥i‹ôy
, &
ã°2_Ÿhî_èsk
 );

121 i‡(
tid1
 == -1)

123 
	`zx_¥ötf
–
COM2
, "Task Limit Exceeded");

124 
	`Exô
();

126 
	`zx_¥ötf
–
COM2
, "Cª©ed: %x\n", 
tid1
 );

129 
	`zx_¥ötf
–
COM2
, "VÆue: %x\n", 
GLOBAL_VARIABLES_BASE
 + 0x4);

132 
	}
}

142 
£ndî_èsk
();

143 
ª˚ivî_èsk
();

145 
	$ã°3
()

147 
	`zx_¥ötf
–
COM2
, "\nFirst: Starting\n" );

149 
tid1
 = 
	`Cª©e
–
FIRST_USER_TASK_PRIORITY
+2, &
£ndî_èsk
 );

150 
	`zx_¥ötf
–
COM2
, "Cª©ed Sídî1: %x\n", 
tid1
 );

152 
tid1
 = 
	`Cª©e
–
FIRST_USER_TASK_PRIORITY
+2, &
£ndî_èsk
 );

153 
	`zx_¥ötf
–
COM2
, "Cª©ed Sídî2: %x\n", 
tid1
 );

155 
tid2
 = 
	`Cª©e
–
FIRST_USER_TASK_PRIORITY
+1, &
ª˚ivî_èsk
 );

156 
	`zx_¥ötf
–
COM2
, "Cª©ed Re˚ivî: %x\n", 
tid2
 );

159 
	}
}

163 
	$SídMesßgeTo
(
ª˚ivî_tid
, 
‰om_id
, * 
±ext
)

165 
mesßge
[30];

168 
ª∂y
[30];

169 
ª∂y_Àn
 = 30;

171 
msg_Àn
 = 0;

173 * 
ãxt
 = 
±ext
;

175 *
ãxt
 != 0)

177 
mesßge
[
msg_Àn
++] = *
ãxt
;

178 
ãxt
++;

181 
mesßge
[
msg_Àn
] = 0;

183 
	`zx_¥ötf
–
COM2
, "--- oooÿ-- TASK %d: SídögÅo: %d o‡thêÀngth=%d...\n", 
‰om_id
, 
ª˚ivî_tid
, 
msg_Àn
);

185 
no_of_byãs
 = 
	`Síd
–
ª˚ivî_tid
, &
mesßge
, 
msg_Àn
, 
ª∂y
, 
ª∂y_Àn
 );

187 
	`zx_¥ötf
–
COM2
, "--- oooÿ-- TASK %d: Rëu∫ vÆuêo‡Síd(Ë: %d byãs\n", 
‰om_id
, 
no_of_byãs
 );

189 if–
no_of_byãs
 > 0 )

191 
ª∂y
[
no_of_byãs
] = 0;

192 
	`zx_¥ötf
–
COM2
, "--- oooÿ-- TASK %d: RïlyÑe˚ived: '%s'.\n", 
‰om_id
, 
ª∂y
 );

196 
	`zx_¥ötf
–
COM2
, "--- oooÿ-- TASK %d: Rïly NŸ Re˚ived. Eº‹: %d\n", 
‰om_id
, 
no_of_byãs
);

199 
	}
}

202 
	$RïlyMesßgeTo
(
tid
, 
‰om_id
, * 
±ext
)

204 
ª∂y
[30];

206 
ª∂y_Àn
 = 0;

208 * 
ãxt
 = 
±ext
;

210 *
ãxt
 != 0)

212 
ª∂y
[
ª∂y_Àn
++] = *
ãxt
;

213 
ãxt
++;

216 
ª∂y
[
ª∂y_Àn
] = 0;

218 
	`zx_¥ötf
–
COM2
, "--- oooÿ-- TASK %d: REPLYING wôh '%s'..\n", 
‰om_id
, 
ª∂y
);

220 
ªsu…
 = 
	`Rïly
(
tid
, &
ª∂y
, 
ª∂y_Àn
);

222 if–
ªsu…
 == 0 )

224 
	`zx_¥ötf
–
COM2
, "--- oooÿ-- TASK %d: REPLY SUCCESSFUL ___\n", 
‰om_id
);

228 
	`zx_¥ötf
–
COM2
, "--- oooÿ-- TASK %d: REPLYING ERROR :–%d\n", 
‰om_id
, 
ªsu…
 );

230 
	}
}

235 
	$Re˚iveMesßge
(
‰om_id
)

237 
mesßge
[30];

238 
msg_Àn
=30;

239 
tid
;

241 
	`zx_¥ötf
–
COM2
, "\n\r--- oooÿ-- TASK %d: Re˚ivög... \n", 
‰om_id
);

243 
no_of_byãs
 = 
	`Re˚ive
–&
tid
, &
mesßge
[0], 
msg_Àn
 );

245 if–
no_of_byãs
 > 0 )

247 
	`zx_¥ötf
–
COM2
, "--- oooÿ-- TASK %d: Mesßgêª˚ived fromÅid = %x. Byãs:%d\n", 
‰om_id
, 
tid
, 
no_of_byãs
 );

248 
mesßge
[
no_of_byãs
] = 0;

249 
	`zx_¥ötf
(
COM2
, "Mesßge:'%s'\n", 
mesßge
);

252 
	`zx_¥ötf
–
COM2
, "--- oooÿ-- TASK %d: ERRORÑe˚ivög. Eº‹ code: %d\n", 
‰om_id
, 
no_of_byãs
);

254  
tid
;

255 
	}
}

257 
	$£ndî_èsk
()

259 
	`SídMesßgeTo
(3, 
	`MyTid
(), "MESMESMES1");

260 
	`SídMesßgeTo
(3, 
	`MyTid
(), "MESMESMESMES2");

261 
	`SídMesßgeTo
(3, 
	`MyTid
(), "MESMESMESMESMESMES3");

262 
	`SídMesßgeTo
(3, 
	`MyTid
(), "MESMESMESMESMESMESMESMESMES");

264 
tid
 = 
	`MyTid
();

265 
∑ª¡_id
 = 
	`MyP¨ítTid
();

267 
	`zx_¥ötf
–
COM2
, "MyTid: %x, MyP¨ítTid: %x\n", 
tid
, 
∑ª¡_id
 );

269 
	`zx_¥ötf
–
COM2
, "--- oooÿ-- TASK %d: Föished... \n\r", 
	`MyTid
());

271 
	`Exô
();

272 
	}
}

274 
	$ª˚ivî_èsk
()

276 
£ndî
;

278 
£ndî
 = 
	`Re˚iveMesßge
(
	`MyTid
());

279 
	`RïlyMesßgeTo
(
£ndî
, 
	`MyTid
(), "REPLY1");

281 
£ndî
 = 
	`Re˚iveMesßge
(
	`MyTid
());

282 
	`RïlyMesßgeTo
(
£ndî
, 
	`MyTid
(), "REPLY 2");

284 
£ndî
 = 
	`Re˚iveMesßge
(
	`MyTid
());

285 
	`RïlyMesßgeTo
(
£ndî
, 
	`MyTid
(), "REPLY 3");

287 
£ndî
 = 
	`Re˚iveMesßge
(
	`MyTid
());

288 
	`RïlyMesßgeTo
(
£ndî
, 
	`MyTid
(), "REPLY 4");

292 
£ndî
 = 
	`Re˚iveMesßge
(
	`MyTid
());

293 
	`RïlyMesßgeTo
(
£ndî
, 
	`MyTid
(), "REPLY1");

295 
£ndî
 = 
	`Re˚iveMesßge
(
	`MyTid
());

296 
	`RïlyMesßgeTo
(
£ndî
, 
	`MyTid
(), "REPLY 2");

298 
£ndî
 = 
	`Re˚iveMesßge
(
	`MyTid
());

299 
	`RïlyMesßgeTo
(
£ndî
, 
	`MyTid
(), "REPLY 3");

301 
£ndî
 = 
	`Re˚iveMesßge
(
	`MyTid
());

302 
	`RïlyMesßgeTo
(
£ndî
, 
	`MyTid
(), "REPLY 4");

305 
	`zx_¥ötf
–
COM2
, "--- oooÿ-- TASK %d: Föished... \n\r", 
	`MyTid
());

306 
	`Exô
();

307 
	}
}

316 
	$ã°4
()

318 
	`zx_¥ötf
–
COM2
, "\nFirst: Starting\n" );

320 
tid1
 = 
	`Cª©e
–
FIRST_USER_TASK_PRIORITY
+2, &
«me£rvî_èsk
 );

321 
	`zx_¥ötf
–
COM2
, "Cª©ed NamêSîvî: %x\n", 
tid1
 );

322 
	}
}

324 
	$«me£rvî_èsk
()

326 
«me
[10];

328 
tid
;

331 * 
roŸ_addr
 = 0;

333 
zx_b°_node
 *
roŸ
 = (zx_b°_node*)(*
roŸ_addr
);

335 
	`zx_¥ötf
–
COM2
, "«me£rvî: RoŸ Nodê: %x; RoŸ Nodê->À· :%x; RoŸ Nodê->righà:%x \n", (Ë
roŸ
, ()‘oŸ->
À·
), ()‘oŸ->
right
) );

337 
	`zx_¥ötf
–
COM2
, "nameserver: Registeringás 12345\n");

338 
	`zx_mem˝y
–
«me
, "12345", 6 );

339 
	`zx_b°_add_by_«me
–&
roŸ
, 
«me
, 444);

340 
	`zx_¥ötf
–
COM2
, "«me£rvî: RoŸ Nodê: %x; RoŸ Nodê->À· :%x; RoŸ Nodê->righà:%x \n", (Ë
roŸ
, ()‘oŸ->
À·
), ()‘oŸ->
right
) );

342 
	`zx_¥ötf
–
COM2
, "nameserver: Who is 12345\n");

343 
tid
 = 
	`zx_b°_gë_by_«me
–
«me
, 
roŸ
);

344 
	`zx_¥ötf
–
COM2
, "«me£rvî: 12345 : %d\n", 
tid
);

345 
	`zx_¥ötf
–
COM2
, "«me£rvî: RoŸ Nodê: %x; RoŸ Nodê->À· :%x; RoŸ Nodê->righà:%x \n", (Ë
roŸ
, ()‘oŸ->
À·
), ()‘oŸ->
right
) );

347 
	`zx_¥ötf
–
COM2
, "nameserver: Registeringás 123456\n");

348 
	`zx_mem˝y
–
«me
, "123456", 7 );

349 
	`zx_b°_add_by_«me
–&
roŸ
, 
«me
, 777);

350 
	`zx_¥ötf
–
COM2
, "«me£rvî: RoŸ Nodê: %x; RoŸ Nodê->À· :%x; RoŸ Nodê->righà:%x \n", (Ë
roŸ
, ()‘oŸ->
À·
), ()‘oŸ->
right
) );

352 
	`zx_¥ötf
–
COM2
, "nameserver: Who is 123456\n");

353 
tid
 = 
	`zx_b°_gë_by_«me
–
«me
, 
roŸ
);

354 
	`zx_¥ötf
–
COM2
, "«me£rvî: 123456 : %d\n", 
tid
);

355 
	`zx_¥ötf
–
COM2
, "«me£rvî: RoŸ Nodê: %x; RoŸ Nodê->À· :%x; RoŸ Nodê->righà:%x \n", (Ë
roŸ
, ()‘oŸ->
À·
), ()‘oŸ->
right
) );

358 
	`zx_¥ötf
–
COM2
, "nameserver: Registeringás 1234\n");

359 
	`zx_mem˝y
–
«me
, "1234", 5 );

360 
	`zx_b°_add_by_«me
–&
roŸ
, 
«me
, 555);

361 
	`zx_¥ötf
–
COM2
, "«me£rvî: RoŸ Nodê: %x; RoŸ Nodê->À· :%x; RoŸ Nodê->righà:%x \n", (Ë
roŸ
, ()‘oŸ->
À·
), ()‘oŸ->
right
) );

363 
	`zx_¥ötf
–
COM2
, "nameserver: Who is 1234\n");

364 
tid
 = 
	`zx_b°_gë_by_«me
–
«me
, 
roŸ
);

365 
	`zx_¥ötf
–
COM2
, "«me£rvî: 1234 : %d\n", 
tid
);

366 
	`zx_¥ötf
–
COM2
, "«me£rvî: RoŸ Nodê: %x; RoŸ Nodê->À· :%x; RoŸ Nodê->righà:%x \n", (Ë
roŸ
, ()‘oŸ->
À·
), ()‘oŸ->
right
) );

368 
	`zx_¥ötf
–
COM2
, "nameserver: Traversing Tree\n");

369 
	`zx_¥ötf
–
COM2
, "«me£rvî: RoŸ Nodê: %x; RoŸ Nodê->À· :%x; RoŸ Nodê->righà:%x \n", (Ë
roŸ
, ()‘oŸ->
À·
), ()‘oŸ->
right
) );

370 
	`debug_b°_åavî£_po°‹dî
–
roŸ
 );

372 
	`zx_¥ötf
–
COM2
, "nameserver: Freeing Tree\n");

373 
	`zx_¥ötf
–
COM2
, "«me£rvî: RoŸ Nodê: %x; RoŸ Nodê->À· :%x; RoŸ Nodê->righà:%x \n", (Ë
roŸ
, ()‘oŸ->
À·
), ()‘oŸ->
right
) );

374 
	`Fªe_b°
–&
roŸ
 );

376 
	`debug_wÆk_hóp
();

378 
	`Exô
();

379 
	}
}

388 
	$ã°5
()

390 
	`zx_¥ötf
–
COM2
, "\nFirst: Starting\n" );

392 
tid1
 = 
	`Cª©e
–
FIRST_USER_TASK_PRIORITY
+2, &
hóp_ã°
 );

393 
	`zx_¥ötf
–
COM2
, "Te°ög Hóp: %x\n", 
tid1
 );

394 
	}
}

396 
	$hóp_ã°
()

398 
	`zx_¥ötf
–
COM2
, "heap_test: AllocatingÇode\n" );

399 *
mem1
 = (*)
	`AŒoc
();

400 
	`zx_¥ötf
–
COM2
, "hóp_ã°: Mem‹y_Addªs†%x\n", ()
mem1
 );

402 
	`zx_¥ötf
–
COM2
, "heap_test: AllocatingÇode\n" );

403 *
mem2
 = (*)
	`AŒoc
();

404 
	`zx_¥ötf
–
COM2
, "hóp_ã°: Mem‹y_Addªs†mem2%x\n", ()
mem2
 );

406 
	`zx_¥ötf
–
COM2
, "heap_test: FreeingÇode mem2\n" );

407 
	`Fªe
(
mem2
);

409 
	`zx_¥ötf
–
COM2
, "heap_test: AllocatingÇode\n" );

410 *
mem3
 = (*)
	`AŒoc
();

411 
	`zx_¥ötf
–
COM2
, "hóp_ã°: Mem‹y_Addªs†%x\n", ()
mem3
 );

413 
	`zx_¥ötf
–
COM2
, "heap_test: FreeingÇode mem3\n" );

414 
	`Fªe
(
mem3
);

416 
	`zx_¥ötf
–
COM2
, "heap_test: FreeingÇode mem1\n" );

417 
	`Fªe
(
mem1
);

419 
	`Exô
();

421 
	}
}

432 
	$ns_ã°_èsk
()

434 
	`Regi°îAs
("Priyaa");

435 
	`Regi°îAs
("Alex");

436 
	`Exô
();

437 
	}
}

439 
	$ã°_ns
()

442 
tid
 = 
	`Cª©e
–
FIRST_USER_TASK_PRIORITY
, &
zx_«me_£rvî
 );

443 
	`zx_¥ötf
–
COM2
, "Cª©ed NamêSîvî: %x\n", 
tid
 );

446 * 
ns_addr
 = (*)(
NAME_SERVER_TID
);

447 *
ns_addr
 = 
tid
;

450 
	`Regi°îAs
("Main");

451 
	`zx_¥ötf
–
COM2
, "MaöÅask is: %d\n", 
	`WhoIs
("Main"));

454 
tid1
 = 
	`Cª©e
–
FIRST_USER_TASK_PRIORITY
-1, &
ns_ã°_èsk
 );

455 
	`zx_¥ötf
–
COM2
, "Cª©ed Task 1: %x\n", 
tid1
 );

457 
	`zx_¥ötf
–
COM2
, "PriyØ is: %d\n", 
	`WhoIs
("Priyaa"));

458 
	`zx_¥ötf
–
COM2
, "AÀx is: %d\n", 
	`WhoIs
("Alex"));

460 
	`zx_¥ötf
–
COM2
, "Unknow¿is: %d\n", 
	`WhoIs
("Unknown"));

462 
	`Clo£NameSîvî
();

464 
	}
}

475 
	$¥öt_dif„ªn˚
(
diff
)

480 
	}
}

490 
	#FOREVER
 ;;)

	)

493 
	mticks
;

494 
	mcou¡
;

495 } 
	tk3_ªque°
;

497 
	$zx_˛ock_˛õ¡
()

499 
k3_ªque°
 
ªque°
;

500 
k3_ªque°
 
ª∂y
;

502 
fú°_èsk_tid
;

503 
i
;

504 
my_tid
;

506 
my_tid
 = 
	`MyTid
();

508 
fú°_èsk_tid
 = 
	`WhoIs
("first_task_kernel_3");

509 
	`Síd
(
fú°_èsk_tid
, &
ªque°
, (
k3_ªque°
), &
ª∂y
, (k3_request));

511 
i
 = 0; i < 
ª∂y
.
cou¡
; i++)

513 
	`Dñay
(
ª∂y
.
ticks
);

514 
	`zx_¥ötf
(
COM2
, "%d: Dñay %d com∂ëe. Dñay i¡îvÆ: %d. (DñayÅick†tŸÆ: %d)\n", 
my_tid
, 
i
, 
ª∂y
.
ticks
,Ñeply.ticks * (i + 1));

517 
	`zx_¥ötf
(
COM2
, "%d: Exôög...\n", 
my_tid
);

518 
	`Exô
();

519 
	}
}

522 
	$zx_fú°_u£r_èsk_kî√l_3
()

524 
	#èsk_cou¡
 4

	)

526 
dñay_˛õ¡s
[
èsk_cou¡
];

528 
dñay_¥i‹ôõs
[
èsk_cou¡
] = {2, 4, 5, 6};

529 
dñay_ticks
[
èsk_cou¡
] = {10, 23, 33, 71};

530 
dñay_cou¡s
[
èsk_cou¡
] = {20, 9, 6, 3};

532 
tid
;

533 
i
;

535 
k3_ªque°
 
ª•⁄£
;

536 
k3_ªque°
 
ª∂y
;

538 
	`zx_¥ötf
(
COM2
, "Hello, world!\n");

539 
	`Cª©eNameSîvî
();

540 
	`Cª©eClockSîvî
();

542 
	`Regi°îAs
("first_task_kernel_3");

544 
i
 = 0; i < 
èsk_cou¡
; i++)

546 
dñay_˛õ¡s
[
i
] = 
	`Cª©e
(
dñay_¥i‹ôõs
[i], &
zx_˛ock_˛õ¡
);

549 
i
 = 0; i < 
èsk_cou¡
; i++)

551 
	`Re˚ive
(&
tid
, &
ª•⁄£
, (
k3_ªque°
));

554 
i
 = 0; i < 
èsk_cou¡
; i++)

556 
ª∂y
.
ticks
 = 
dñay_ticks
[
i
];

557 
ª∂y
.
cou¡
 = 
dñay_cou¡s
[
i
];

559 
	`Rïly
(
dñay_˛õ¡s
[
i
], &
ª∂y
, (
k3_ªque°
));

562 
	`Exô
();

563 
	}
}

575 
	$ª˚ive_‰om_u¨t1
()

579 
c
 = 
	`GëC
(
COM1
);

580 
	`zx_¥ötf
(
COM2
, "D©a: %x\n", 
c
);

583 
	}
}

585 
	$zx_fú°_u£r_èsk_kî√l_4
()

587 
	`Cª©eNameSîvî
();

588 
	`Cª©eUARTSîvîs
();

589 
	`Cª©eClockSîvî
();

591 
	`zx_¥ötf
(
COM2
, "Start");

593 
	`Cª©e
(
FIRST_USER_TASK_PRIORITY
 - 1, &
ª˚ive_‰om_u¨t1
);

595 
c
;

598 
	`zx_¥ötf
(
COM2
, "Hello!");

599 
	`zx_¥ötf
(
COM2
, "World!");

602 
	`zx_¥ötf
(
COM2
, "Sensor query");

603 
c
 = 133;

604 
	`PutC
–
COM1
, 
c
);

609 
	`zx_¥ötf
(
COM2
, "Train query");

611 
c
 = 10;

612 
	`PutC
–
COM1
, 
c
);

613 
c
 = 45;

614 
	`PutC
–
COM1
, 
c
);

616 
c
 = 10;

617 
	`PutC
–
COM1
, 
c
);

618 
c
 = 44;

619 
	`PutC
–
COM1
, 
c
);

623 
	`Exô
();

624 
	}
}

626 
	$zx_fú°_u£r_èsk_kî√l_4_√w
()

628 
	`Cª©eNameSîvî
();

629 
	`Cª©eUARTSîvîs
();

630 
	`Cª©eClockSîvî
();

634 
	}
}

644 
	$zx_fú°_u£r_èsk_kî√l_4_a0
()

646 
	`Cª©eClockSîvî
();

647 
	`Cª©eNameSîvî
();

648 
	`Cª©eUARTSîvîs
();

651 
	`Cª©e
–
FIRST_USER_TASK_PRIORITY
 - 1, 
zx_a0_comm™d_èsk
 );

655 
	`Exô
();

659 
	}
}

670 
	$zx_fú°_u£r_èsk_kî√l_4_a0
()

672 
	`Cª©eClockSîvî
();

673 
	`Cª©eNameSîvî
();

674 
	`Cª©eUARTSîvîs
();

678 
	`Cª©e
–
FIRST_USER_TASK_PRIORITY
 - 1, 
zx_åaö_c⁄åﬁÀr_èsk
 );

691 
	`Exô
();

693 
	}
}

702 
	$zx_fú°_u£r_èsk_queue_ã°
()

704 
zx_cúcuœr_queue
 
öt_myqueue
;

705 
zx_cúcuœr_queue
 *
öt_myqueuïå
;

707 
öt_myqueuïå
 = &
öt_myqueue
;

709 
zx_cúcuœr_queue
 
ch¨_myqueue
;

710 
zx_cúcuœr_queue
 *
ch¨_myqueuïå
;

712 
ch¨_myqueuïå
 = &
ch¨_myqueue
;

714 
öt_queue_ñemíts
[3]={0,0,0};

715 
ch¨_queue_ñemíts
[2];

717 
	`zx_queue_öôülize
–&
öt_myqueuïå
, 
öt_queue_ñemíts
, 4, 3 );

719 
d©a
;

720 *
d©≠å
 = &
d©a
;

722 
ªsu…
;

724 
d©a
 = 1;

725 
ªsu…
 = 
	`zx_queue_ö£π
–&
öt_myqueuïå
, (*)
d©≠å
);

726 
	`zx_¥ötf
–
COM2
, "Ródög queuêa·î in£π: %d\n", 
öt_queue_ñemíts
[0] );

728 
d©a
 = 2;

729 
ªsu…
 = 
	`zx_queue_ö£π
–&
öt_myqueuïå
, (*)
d©≠å
);

730 
	`zx_¥ötf
–
COM2
, "Ródög queuêa·î in£π: %d\n", 
öt_queue_ñemíts
[1] );

732 
d©a
 = 3;

733 
ªsu…
 = 
	`zx_queue_ö£π
–&
öt_myqueuïå
, (*)
d©≠å
);

734 
	`zx_¥ötf
–
COM2
, "Ródög queuêa·î in£π: %d\n", 
öt_queue_ñemíts
[2] );

736 
d©a
 = 4;

737 
ªsu…
 = 
	`zx_queue_ö£π
–&
öt_myqueuïå
, (*)
d©≠å
);

739 if–
ªsu…
 =
ZX_ERR_QUEUE_FULL
 )

740 
	`zx_¥ötf
–
COM2
, 
ZX_ERRMSG_QUEUE_FULL
 );

742 
	`zx_¥ötf
–
COM2
, "QueuênŸ fuŒ:Éºno: %d\n", 
ªsu…
 );

744 
ªsu…
 = 
	`zx_queue_ªmove
–&
öt_myqueuïå
, 
d©≠å
);

745 if–
ªsu…
 =
ZX_Q_SUCCESS
 )

746 
	`zx_¥ötf
–
COM2
, "D©®ªad from queue: %d\n", *
d©≠å
 );

748 
	`zx_¥ötf
–
COM2
, "D©®nŸÑód from queue:Éºno: %d\n", 
ªsu…
 );

751 
ªsu…
 = 
	`zx_queue_ªmove
–&
öt_myqueuïå
, 
d©≠å
);

752 if–
ªsu…
 =
ZX_Q_SUCCESS
 )

753 
	`zx_¥ötf
–
COM2
, "D©®ªad from queue: %d\n", *
d©≠å
 );

755 
	`zx_¥ötf
–
COM2
, "D©®nŸÑód from queue:Éºno: %d\n", 
ªsu…
 );

757 
ªsu…
 = 
	`zx_queue_ªmove
–&
öt_myqueuïå
, 
d©≠å
);

758 if–
ªsu…
 =
ZX_Q_SUCCESS
 )

759 
	`zx_¥ötf
–
COM2
, "D©®ªad from queue: %d\n", *
d©≠å
 );

761 
	`zx_¥ötf
–
COM2
, "D©®nŸÑód from queue:Éºno: %d\n", 
ªsu…
 );

763 
ªsu…
 = 
	`zx_queue_ªmove
–&
öt_myqueuïå
, 
d©≠å
);

764 if–
ªsu…
 =
ZX_ERR_QUEUE_EMPTY
 )

765 
	`zx_¥ötf
–
COM2
, 
ZX_ERRMSG_QUEUE_EMPTY
 );

767 
	`zx_¥ötf
–
COM2
, "D©®ªad from queue: %d\n", *
d©≠å
 );

770 
	`zx_queue_öôülize
–&
ch¨_myqueuïå
, 
ch¨_queue_ñemíts
, 1, 2 );

772 
cd©a
;

773 *
cd©≠å
 = &
cd©a
;

775 
cd©a
 = 'A';

776 
ªsu…
 = 
	`zx_queue_ö£π
–&
ch¨_myqueuïå
, (*)
cd©≠å
);

777 if–
ªsu…
 !
ZX_ERR_QUEUE_FULL
 )

778 
	`zx_¥ötf
–
COM2
, "Ródög queuêa·î in£π: %c\n", 
ch¨_queue_ñemíts
[0] );

780 
	`zx_¥ötf
–
COM2
, 
ZX_ERRMSG_QUEUE_FULL
 );

782 
cd©a
 = 'B';

783 
ªsu…
 = 
	`zx_queue_ö£π
–&
ch¨_myqueuïå
, (*)
cd©≠å
);

784 if–
ªsu…
 !
ZX_ERR_QUEUE_FULL
 )

785 
	`zx_¥ötf
–
COM2
, "Ródög queuêa·î in£π: %c\n", 
ch¨_queue_ñemíts
[1] );

787 
	`zx_¥ötf
–
COM2
, 
ZX_ERRMSG_QUEUE_FULL
 );

789 
cd©a
 = 'C';

790 
ªsu…
 = 
	`zx_queue_ö£π
–&
ch¨_myqueuïå
, (*)
cd©≠å
);

791 if–
ªsu…
 !
ZX_ERR_QUEUE_FULL
 )

792 
	`zx_¥ötf
–
COM2
, "Ródög queuêa·î in£π: %c\n", 
ch¨_queue_ñemíts
[2] );

794 
	`zx_¥ötf
–
COM2
, 
ZX_ERRMSG_QUEUE_FULL
 );

796 
cd©a
 = 4;

797 
ªsu…
 = 
	`zx_queue_ö£π
–&
ch¨_myqueuïå
, (*)
cd©≠å
);

798 if–
ªsu…
 !
ZX_ERR_QUEUE_FULL
 )

799 
	`zx_¥ötf
–
COM2
, "Ródög queuêa·î in£π: %c\n", 
ch¨_queue_ñemíts
[3] );

801 
	`zx_¥ötf
–
COM2
, 
ZX_ERRMSG_QUEUE_FULL
 );

804 
ªsu…
 = 
	`zx_queue_ªmove
–&
ch¨_myqueuïå
, 
cd©≠å
);

805 if–
ªsu…
 =
ZX_Q_SUCCESS
 )

806 
	`zx_¥ötf
–
COM2
, "D©®ªad from queue: %c\n", *
cd©≠å
 );

807 if–
ªsu…
 =
ZX_ERR_QUEUE_EMPTY
 )

808 
	`zx_¥ötf
–
COM2
, 
ZX_ERRMSG_QUEUE_EMPTY
 );

811 
ªsu…
 = 
	`zx_queue_ªmove
–&
ch¨_myqueuïå
, 
cd©≠å
);

812 if–
ªsu…
 =
ZX_Q_SUCCESS
 )

813 
	`zx_¥ötf
–
COM2
, "D©®ªad from queue: %c\n", *
cd©≠å
 );

814 if–
ªsu…
 =
ZX_ERR_QUEUE_EMPTY
 )

815 
	`zx_¥ötf
–
COM2
, 
ZX_ERRMSG_QUEUE_EMPTY
 );

817 
ªsu…
 = 
	`zx_queue_ªmove
–&
ch¨_myqueuïå
, 
cd©≠å
);

818 if–
ªsu…
 =
ZX_Q_SUCCESS
 )

819 
	`zx_¥ötf
–
COM2
, "D©®ªad from queue: %c\n", *
cd©≠å
 );

820 if–
ªsu…
 =
ZX_ERR_QUEUE_EMPTY
 )

821 
	`zx_¥ötf
–
COM2
, 
ZX_ERRMSG_QUEUE_EMPTY
 );

823 
ªsu…
 = 
	`zx_queue_ªmove
–&
ch¨_myqueuïå
, 
cd©≠å
);

824 if–
ªsu…
 =
ZX_Q_SUCCESS
 )

825 
	`zx_¥ötf
–
COM2
, "D©®ªad from queue: %c\n", *
cd©≠å
 );

826 if–
ªsu…
 =
ZX_ERR_QUEUE_EMPTY
 )

827 
	`zx_¥ötf
–
COM2
, 
ZX_ERRMSG_QUEUE_EMPTY
 );

829 
	`Exô
();

830 
	}
}

	@src/kernel/zx_timer.c

12 
	~<zx_timî.h
>

14 
	$zx_timî_lﬂd_vÆ
–
timî
, 
vÆ
 )

16 *
addr
;

18 
timî
 )

20 
TIMER_1
:

21 
addr
 = (*)(
TIMER_1
 + 
TIMER_LOAD_OFFSET
);

24 
TIMER_2
:

25 
addr
 = (*)(
TIMER_2
 + 
TIMER_LOAD_OFFSET
);

28 
TIMER_3
:

29 
addr
 = (*)(
TIMER_3
 + 
TIMER_LOAD_OFFSET
);

32 *
addr
 = 
vÆ
;

33 
	}
}

37 
	$zx_timî_£t_≥riodic
–
timî
, 
≥riodic
 )

39 *
addr
, 
vÆue
;

41 
timî
 )

43 
TIMER_1
:

44 
addr
 = (*)(
TIMER_1
 + 
TIMER_CONTROL_OFFSET
);

47 
TIMER_2
:

48 
addr
 = (*)(
TIMER_2
 + 
TIMER_CONTROL_OFFSET
);

51 
TIMER_3
:

52 
addr
 = (*)(
TIMER_3
 + 
TIMER_CONTROL_OFFSET
);

55 
vÆue
 = *
addr
;

57 i‡(
≥riodic
)

58 
vÆue
 = vÆuê| 
TIMER_PERIODIC_MODE_MASK
;

60 
vÆue
 = vÆuê& (~
TIMER_PERIODIC_MODE_MASK
);

62 *
addr
 = 
vÆue
;

63 
	}
}

66 
	$zx_timî_£À˘_˛ock
–
timî
, 
˛ock_mask
 )

68 *
addr
, 
vÆue
;

70 
timî
 )

72 
TIMER_1
:

73 
addr
 = (*)(
TIMER_1
 + 
TIMER_CONTROL_OFFSET
);

76 
TIMER_2
:

77 
addr
 = (*)(
TIMER_2
 + 
TIMER_CONTROL_OFFSET
);

80 
TIMER_3
:

81 
addr
 = (*)(
TIMER_3
 + 
TIMER_CONTROL_OFFSET
);

84 
vÆue
 = *
addr
;

85 *
addr
 = 
vÆue
 | 
˛ock_mask
;

86 
	}
}

89 
	$zx_timî_íabÀ
–
timî
 )

91 *
addr
, 
vÆue
;

93 
timî
 )

95 
TIMER_1
:

96 
addr
 = (*)(
TIMER_1
 + 
TIMER_CONTROL_OFFSET
);

99 
TIMER_2
:

100 
addr
 = (*)(
TIMER_2
 + 
TIMER_CONTROL_OFFSET
);

103 
TIMER_3
:

104 
addr
 = (*)(
TIMER_3
 + 
TIMER_CONTROL_OFFSET
);

107 
vÆue
 = *
addr
;

108 *
addr
 = 
vÆue
 | 
TIMER_ENABLE_MASK
;

109 
	}
}

112 
	$zx_timî_dißbÀ
–
timî
 )

114 *
addr
, 
vÆue
;

116 
timî
 )

118 
TIMER_1
:

119 
addr
 = (*)(
TIMER_1
 + 
TIMER_CONTROL_OFFSET
);

122 
TIMER_2
:

123 
addr
 = (*)(
TIMER_2
 + 
TIMER_CONTROL_OFFSET
);

126 
TIMER_3
:

127 
addr
 = (*)(
TIMER_3
 + 
TIMER_CONTROL_OFFSET
);

130 
vÆue
 = *
addr
;

131 
vÆue
 = vÆuê& (~
TIMER_ENABLE_MASK
);

132 *
addr
 = 
vÆue
;

133 
	}
}

136 
	$zx_timî_gë_vÆue
–
timî
 )

138 *
addr
;

140 
timî
 )

142 
TIMER_1
:

143 
addr
 = (*)(
TIMER_1
 + 
TIMER_VALUE_OFFSET
);

146 
TIMER_2
:

147 
addr
 = (*)(
TIMER_2
 + 
TIMER_VALUE_OFFSET
);

150 
TIMER_3
:

151 
addr
 = (*)(
TIMER_3
 + 
TIMER_VALUE_OFFSET
);

154  (*
addr
);

156 
	}
}

	@src/kernel/zx_uart1_receive_server.c

14 
	~<ts7200.h
>

16 
	~<zx_sy°em_ˇŒs.h
>

17 
	~<zx_kî√l_c⁄fig.h
>

18 
	~<zx_úq_devi˚.h
>

19 
	~<zx_úq_vic.h
>

20 
	~<zx_èsks.h
>

21 
	~<zx_queue.h
>

22 
	~<zx_hñ≥r.h
>

23 
	~<zx_u¨t_io.h
>

24 
	~<zx_îr.h
>

27 
	$zx_u¨t1_rx_nŸifõr
()

30 
zx_u¨t_ªque°
 
ª∂y
;

31 
zx_u¨t_ªque°
 
ªq
;

32 
zx_u¨t_ªque°
 
u¨t_ª•⁄£
;

34 
£rvî_tid
;

36 
byã
 = 0;

39 
	`Re˚ive
(&
£rvî_tid
, &
ªq
, (
zx_u¨t_ªque°
));

42 
ªq
.
ty≥
 = 
UART_REQUEST_READY
;

43 
	`Rïly
(
£rvî_tid
, &
ªq
, (
zx_u¨t_ªque°
));

46 
ªq
.
ty≥
 = 
UART_REQUEST_READY
;

47 
	`Síd
(
£rvî_tid
, &
ªq
, ‘eq), &
ª∂y
, (
zx_u¨t_ªque°
));

50 
u¨t_ª•⁄£
.
ty≥
 = 
API_UART1_GETC
;

52 
FOREVER
{

58 
byã
 = 
	`AwaôEvít
(
EVENT_UART1_RX
);

62 
u¨t_ª•⁄£
.
vÆue
 = 
byã
;

64 
	`Síd
(
£rvî_tid
, &
u¨t_ª•⁄£
, (
zx_u¨t_ªque°
), &
ª∂y
, (zx_uart_request));

66 i‡(
ª∂y
.
ty≥
 =
API_UART_EXIT
)

71 
	`Exô
();

72 
	}
}

75 
	$zx_u¨t1_rx_£rvî
()

79 
zx_cúcuœr_queue
 
ª˚ive_buf„r_u¨t1
;

80 
zx_cúcuœr_queue
* 
ª˚ive_buf„r_u¨t1_±r
;

81 
ª˚ive_buf„r_u¨t1_±r
 = &
ª˚ive_buf„r_u¨t1
;

82 
ª˚ive_buf„r_¨øy
[
ZX_UART1_RX_BUFFER_SIZE
];

85 
i
=0;

86  
i
=0; i<
ZX_UART1_RX_BUFFER_SIZE
; i++ )

88 
ª˚ive_buf„r_¨øy
[
i
]=0;

93 
	`zx_queue_öôülize
–&
ª˚ive_buf„r_u¨t1_±r
, 
ª˚ive_buf„r_¨øy
, 1, 
ZX_UART1_RX_BUFFER_SIZE
);

98 
zx_cúcuœr_queue
 
ªcõve_èsks_queue_u¨t1
;

99 
zx_cúcuœr_queue
* 
ªcõve_èsks_queue_u¨t1_±r
;

101 
ªcõve_èsks_queue_u¨t1_±r
 = &
ªcõve_èsks_queue_u¨t1
;

102 
ªcõve_èsks_queue_¨øy
[
TASK_COUNT
];

104 
i
=0;

105  
i
=0; i<
TASK_COUNT
; i++ )

107 
ªcõve_èsks_queue_¨øy
[
i
]=
INVALID_TASK_ID
;

112 
	`zx_queue_öôülize
–&
ªcõve_èsks_queue_u¨t1_±r
, 
ªcõve_èsks_queue_¨øy
, 4, 
TASK_COUNT
);

117 
nŸifõr_tid
 = 
	`Cª©e
(
ZX_UART1_RX_NOTIFIER_PRIORITY
, &
zx_u¨t1_rx_nŸifõr
);

119 
tid
 = 
INVALID_TASK_ID
;

121 
zx_u¨t_ªque°
 
ªq
;

122 
zx_u¨t_ªque°
 
ªs
;

124 
	`Regi°îAs
("zx_uart1_rx_server");

127 
ªq
.
ty≥
 = 
UART_REQUEST_CONFIG
;

128 
	`Síd
(
nŸifõr_tid
, &
ªq
, (
zx_u¨t_ªque°
), &
ªs
, (zx_uart_request));

130 i‡(
ªs
.
ty≥
 !
UART_REQUEST_READY
)

132 
	`Exô
();

136 
	`Re˚ive
(&
tid
, &
ªs
, (
zx_u¨t_ªque°
));

137 i‡(
tid
 !
nŸifõr_tid
 || 
ªs
.
ty≥
 !
UART_REQUEST_READY
)

139 
	`Exô
();

144 
ªq
.
ty≥
 = 
UART_REQUEST_READY
;

145 
	`Rïly
(
nŸifõr_tid
, &
ªq
, (
zx_u¨t_ªque°
));

147 
to_exô
 = 0;

148 
exô_èsk_tid
 = 
INVALID_TASK_ID
;

150 
ªsu…
;

152 
˛õ¡id
 = 0;

153 * 
˛õ¡id_±r
 = &
˛õ¡id
;

155 
byã
;

156 *
byã±r
 = &
byã
;

158 
FOREVER


161 
	`Re˚ive
(&
tid
, &
ªs
, (
zx_u¨t_ªque°
));

164 i‡(
tid
 =
nŸifõr_tid
)

166 i‡(
to_exô
 == 0)

169 
byã
 = 
ªs
.
vÆue
;

172 
	`Rïly
(
tid
, &
ªs
, (
zx_u¨t_ªque°
));

175 
ªsu…
 = 
	`zx_queue_ªmove
–&
ªcõve_èsks_queue_u¨t1_±r
, 
˛õ¡id_±r
);

176 i‡–
ªsu…
 =
ZX_Q_SUCCESS
 )

179 
ªs
.
ty≥
 = 
UART_RX_SUCCESS
;

180 
ªs
.
vÆue
 = 
byã
;

181 
	`Rïly
(
˛õ¡id
, &
ªs
, (
zx_u¨t_ªque°
));

186 
ªsu…
 = 
	`zx_queue_ö£π
–&
ª˚ive_buf„r_u¨t1_±r
, (*)
byã±r
);

188 if–
ªsu…
 =
ZX_ERR_QUEUE_FULL
 )

190 
	`zx_¥ötf
–
COM2
, "UART1 Receive Server Error : Buffer Full\n");

197 
ªs
.
ty≥
 = 
API_UART_EXIT
;

198 
	`Rïly
(
exô_èsk_tid
, &
ªs
, (
zx_u¨t_ªque°
));

199 
	`Rïly
(
nŸifõr_tid
, &
ªs
, (
zx_u¨t_ªque°
));

202 (
ªsu…
 = 
	`zx_queue_ªmove
–&
ªcõve_èsks_queue_u¨t1_±r
, 
˛õ¡id_±r
)Ë=
ZX_Q_SUCCESS
)

205 
ªs
.
ty≥
 = 
MSG_SERVER_EXITED
;

206 
ªs
.
vÆue
 = 0;

207 
	`Rïly
(
˛õ¡id
, &
ªs
, (
zx_u¨t_ªque°
));

217 i‡(
to_exô
 == 1)

219 
ªs
.
ty≥
 = 
MSG_SERVER_EXITED
;

220 
ªs
.
vÆue
 = 0;

221 
	`Rïly
(
tid
, &
ªs
, (
zx_u¨t_ªque°
));

224 
ªs
.
ty≥
)

226 
API_UART1_GETC
:

228 
ªsu…
 = 
	`zx_queue_ªmove
–&
ª˚ive_buf„r_u¨t1_±r
, 
byã±r
);

229 i‡–
ªsu…
 =
ZX_Q_SUCCESS
 )

232 
ªs
.
ty≥
 = 
UART_RX_SUCCESS
;

233 
ªs
.
vÆue
 = 
byã
;

234 
	`Rïly
(
tid
, &
ªs
, (
zx_u¨t_ªque°
));

240 
˛õ¡id
 = 
tid
;

241 
ªsu…
 = 
	`zx_queue_ö£π
–&
ªcõve_èsks_queue_u¨t1_±r
, 
˛õ¡id_±r
);

243 if–
ªsu…
 =
ZX_ERR_QUEUE_FULL
 )

245 
ªs
.
ty≥
 = 
UART_RX_ERROR
;

246 
	`Rïly
(
tid
, &
ªs
, (
zx_u¨t_ªque°
));

247 
	`zx_¥ötf
–
COM2
, "UART1 Receive Server Error : Tasks Queue Full\n");

252 
API_UART_EXIT
:

257 
to_exô
 = 1;

258 
exô_èsk_tid
 = 
tid
;

259 
	`Rïly
(
tid
, &
ªs
, (
zx_u¨t_ªque°
));

264 
	`Exô
();

265 
	}
}

	@src/kernel/zx_uart1_transmit_server.c

14 
	~<ts7200.h
>

16 
	~<zx_sy°em_ˇŒs.h
>

17 
	~<zx_kî√l_c⁄fig.h
>

18 
	~<zx_úq_devi˚.h
>

19 
	~<zx_úq_vic.h
>

20 
	~<zx_èsks.h
>

21 
	~<zx_queue.h
>

22 
	~<zx_hñ≥r.h
>

23 
	~<zx_u¨t_io.h
>

24 
	~<zx_îr.h
>

27 
	$zx_u¨t1_tx_£rvî
()

31 
zx_cúcuœr_queue
 
å™smô_queue_u¨t1
;

32 
zx_cúcuœr_queue
* 
å™smô_queue_u¨t1_±r
;

33 
å™smô_queue_u¨t1_±r
 = &
å™smô_queue_u¨t1
;

34 
å™smô_queue_¨øy
[
ZX_UART1_TX_BUFFER_SIZE
];

37 
i
=0;

38  
i
=0; i<
ZX_UART1_TX_BUFFER_SIZE
; i++ )

40 
å™smô_queue_¨øy
[
i
]=0;

45 
	`zx_queue_öôülize
–&
å™smô_queue_u¨t1_±r
, 
å™smô_queue_¨øy
, 1, 
ZX_UART1_TX_BUFFER_SIZE
);

47 
byã
;

48 *
byã±r
 = &
byã
;

51 
nŸifõr_tid
 = 
	`Cª©e
(
ZX_UART1_TX_NOTIFIER_PRIORITY
, &
zx_u¨t1_tx_nŸifõr
);

53 
tid
 = 
INVALID_TASK_ID
;

55 
zx_u¨t_ªque°
 
ªq
;

56 
zx_u¨t_ªque°
 
ªs
;

58 
	`Regi°îAs
("zx_uart1_tx_server");

61 
ªq
.
ty≥
 = 
UART_REQUEST_CONFIG
;

62 
	`Síd
(
nŸifõr_tid
, &
ªq
, (
zx_u¨t_ªque°
), &
ªs
, (zx_uart_request));

64 i‡(
ªs
.
ty≥
 !
UART_REQUEST_READY
)

66 
	`Exô
();

70 
	`Re˚ive
(&
tid
, &
ªs
, (
zx_u¨t_ªque°
));

71 i‡(
tid
 !
nŸifõr_tid
 || 
ªs
.
ty≥
 !
UART_REQUEST_READY
)

73 
	`Exô
();

78 
ªq
.
ty≥
 = 
UART_REQUEST_READY
;

79 
	`Rïly
(
nŸifõr_tid
, &
ªq
, (
zx_u¨t_ªque°
));

81 
to_exô
 = 0;

82 
exô_èsk_tid
 = 
INVALID_TASK_ID
;

84 
nŸifõr_ªady_Êag
 = 0;

85 
ªsu…
;

87 * 
sour˚
;

89 
£ns‹_dump
 = 0;

92 
FOREVER


95 
	`Re˚ive
(&
tid
, &
ªs
, (
zx_u¨t_ªque°
));

98 i‡(
tid
 =
nŸifõr_tid
)

100 i‡(
to_exô
 == 0)

104 
ªsu…
 = 
	`zx_queue_ªmove
–&
å™smô_queue_u¨t1_±r
, 
byã±r
);

105 i‡–
ªsu…
 =
ZX_Q_SUCCESS
 )

109 
ªs
.
ty≥
 = 
UART_WRITE_BYTE
;

110 
ªs
.
vÆue
 = 
byã
;

111 
	`Rïly
(
nŸifõr_tid
, &
ªs
, (
zx_u¨t_ªque°
));

113 if–
£ns‹_dump
 )

117 
£ns‹_dump
 = 0;

118 
ªs
.
ty≥
 = 
UART_WRITE_BYTE
;

119 
ªs
.
vÆue
 = 133;

120 
	`Rïly
(
nŸifõr_tid
, &
ªs
, (
zx_u¨t_ªque°
));

126 
nŸifõr_ªady_Êag
 = 1;

132 
ªs
.
ty≥
 = 
API_UART_EXIT
;

133 
	`Rïly
(
exô_èsk_tid
, &
ªs
, (
zx_u¨t_ªque°
));

134 
	`Rïly
(
nŸifõr_tid
, &
ªs
, (
zx_u¨t_ªque°
));

135 
nŸifõr_ªady_Êag
 = 1;

143 i‡(
to_exô
 == 1)

145 
ªs
.
ty≥
 = 
MSG_SERVER_EXITED
;

146 
ªs
.
vÆue
 = 0;

147 
	`Rïly
(
tid
, &
ªs
, (
zx_u¨t_ªque°
));

150 
ªs
.
ty≥
)

152 
API_UART1_PUTC
:

154 
byã
 = 
ªs
.
vÆue
;

156 if–
nŸifõr_ªady_Êag
 )

159 
ªs
.
ty≥
 = 
UART_WRITE_BYTE
;

160 
ªs
.
vÆue
 = 
byã
;

161 
	`Rïly
(
nŸifõr_tid
, &
ªs
, (
zx_u¨t_ªque°
));

165 
ªs
.
ty≥
 = 
UART_TX_SUCCESS
;

166 
	`Rïly
(
tid
, &
ªs
, (
zx_u¨t_ªque°
));

169 
nŸifõr_ªady_Êag
 = 0;

173 if–
byã
 == 133 )

175 
£ns‹_dump
 = 1;

176 
ªs
.
ty≥
 = 
UART_TX_SUCCESS
;

180 
ªsu…
 = 
	`zx_queue_ö£π
–&
å™smô_queue_u¨t1_±r
, (*)
byã±r
);

183 if–
ªsu…
 =
ZX_ERR_QUEUE_FULL
 )

185 
ªs
.
ty≥
 = 
UART_TX_ERROR
;

189 
ªs
.
ty≥
 = 
UART_TX_SUCCESS
;

192 
	`Rïly
(
tid
, &
ªs
, (
zx_u¨t_ªque°
));

197 
API_UART1_PUT_MULTIPLE
:

200 
sour˚
 = (*)(
ªs
.
vÆue
);

202 i‡(*
sour˚
 =
UART_PACKET_END_CHAR
)

204 
ªs
.
ty≥
 = 
UART_TX_SUCCESS
;

205 
	`Rïly
(
tid
, &
ªs
, (
zx_u¨t_ªque°
));

209 if–
nŸifõr_ªady_Êag
 )

211 
byã
 = *
sour˚
;

214 
ªs
.
ty≥
 = 
UART_WRITE_BYTE
;

215 
ªs
.
vÆue
 = 
byã
;

216 
	`Rïly
(
nŸifõr_tid
, &
ªs
, (
zx_u¨t_ªque°
));

218 
sour˚
++;

220 
nŸifõr_ªady_Êag
 = 0;

223 *
sour˚
 !
UART_PACKET_END_CHAR
)

225 
byã
 = *
sour˚
;

226 
ªsu…
 = 
	`zx_queue_ö£π
–&
å™smô_queue_u¨t1_±r
, (*)
byã±r
);

229 if–
ªsu…
 =
ZX_ERR_QUEUE_FULL
 )

231 
ªs
.
ty≥
 = 
UART_TX_ERROR
;

232 
	`Rïly
(
tid
, &
ªs
, (
zx_u¨t_ªque°
));

236 
sour˚
++;

239 
ªs
.
ty≥
 = 
UART_TX_SUCCESS
;

240 
	`Rïly
(
tid
, &
ªs
, (
zx_u¨t_ªque°
));

243 
API_UART_EXIT
:

248 
to_exô
 = 1;

249 
exô_èsk_tid
 = 
tid
;

250 
	`Rïly
(
tid
, &
ªs
, (
zx_u¨t_ªque°
));

252 if–
nŸifõr_ªady_Êag
 )

254 
ªs
.
ty≥
 = 
API_UART_EXIT
;

255 
	`Rïly
(
nŸifõr_tid
, &
ªs
, (
zx_u¨t_ªque°
));

261 i‡(
to_exô
 =1 && 
nŸifõr_ªady_Êag
)

266 
	`Exô
();

267 
	}
}

270 
	$zx_u¨t1_tx_nŸifõr
()

273 
zx_u¨t_ªque°
 
ª∂y
;

274 
zx_u¨t_ªque°
 
ªq
;

275 
zx_u¨t_ªque°
 
u¨t_ª•⁄£
;

277 
£rvî_tid
;

279 
byã
 = 0;

285 
	`Re˚ive
(&
£rvî_tid
, &
ªq
, (
zx_u¨t_ªque°
));

288 
ªq
.
ty≥
 = 
UART_REQUEST_READY
;

289 
	`Rïly
(
£rvî_tid
, &
ªq
, (
zx_u¨t_ªque°
));

292 
ªq
.
ty≥
 = 
UART_REQUEST_READY
;

293 
	`Síd
(
£rvî_tid
, &
ªq
, ‘eq), &
ª∂y
, (
zx_u¨t_ªque°
));

296 
u¨t_ª•⁄£
.
ty≥
 = 
API_UART1_PUTC
;

298 
	`zx_devi˚_öô
(
INTR_SOURCE_UART1_MODEM
);

302 
FOREVER
{

305 
	`AwaôEvít
(
EVENT_UART1_TX
);

308 
	`Síd
(
£rvî_tid
, &
u¨t_ª•⁄£
, (
zx_u¨t_ªque°
), &
ª∂y
, (zx_uart_request));

310 i‡(
ª∂y
.
ty≥
 =
API_UART_EXIT
)

314 if–
ª∂y
.
ty≥
 =
UART_WRITE_BYTE
 )

316 
byã
 = 
ª∂y
.
vÆue
;

317 
	`zx_wrôe_byã
–
COM1
, 
byã
 );

329 
	`Exô
();

330 
	}
}

	@src/kernel/zx_uart2_receive_server.c

14 
	~<ts7200.h
>

16 
	~<zx_sy°em_ˇŒs.h
>

17 
	~<zx_kî√l_c⁄fig.h
>

18 
	~<zx_úq_devi˚.h
>

19 
	~<zx_úq_vic.h
>

20 
	~<zx_èsks.h
>

21 
	~<zx_queue.h
>

22 
	~<zx_hñ≥r.h
>

23 
	~<zx_u¨t_io.h
>

24 
	~<zx_îr.h
>

27 
	$zx_u¨t2_rx_nŸifõr
()

30 
zx_u¨t_ªque°
 
ª∂y
;

31 
zx_u¨t_ªque°
 
ªq
;

32 
zx_u¨t_ªque°
 
u¨t_ª•⁄£
;

34 
£rvî_tid
;

36 
byã
 = 0;

39 
	`Re˚ive
(&
£rvî_tid
, &
ªq
, (
zx_u¨t_ªque°
));

42 
ªq
.
ty≥
 = 
UART_REQUEST_READY
;

43 
	`Rïly
(
£rvî_tid
, &
ªq
, (
zx_u¨t_ªque°
));

46 
ªq
.
ty≥
 = 
UART_REQUEST_READY
;

47 
	`Síd
(
£rvî_tid
, &
ªq
, ‘eq), &
ª∂y
, (
zx_u¨t_ªque°
));

50 
u¨t_ª•⁄£
.
ty≥
 = 
API_UART2_GETC
;

52 
FOREVER
{

55 
byã
 = 
	`AwaôEvít
(
EVENT_UART2_RX
);

57 
u¨t_ª•⁄£
.
vÆue
 = 
byã
;

59 
	`Síd
(
£rvî_tid
, &
u¨t_ª•⁄£
, (
zx_u¨t_ªque°
), &
ª∂y
, (zx_uart_request));

61 i‡(
ª∂y
.
ty≥
 =
API_UART_EXIT
)

66 
	`Exô
();

67 
	}
}

70 
	$zx_u¨t2_rx_£rvî
()

74 
zx_cúcuœr_queue
 
ª˚ive_buf„r_u¨t2
;

75 
zx_cúcuœr_queue
* 
ª˚ive_buf„r_u¨t2_±r
;

76 
ª˚ive_buf„r_u¨t2_±r
 = &
ª˚ive_buf„r_u¨t2
;

77 
ª˚ive_buf„r_¨øy
[
ZX_UART2_RX_BUFFER_SIZE
];

80 
i
=0;

81  
i
=0; i<
ZX_UART2_RX_BUFFER_SIZE
; i++ )

83 
ª˚ive_buf„r_¨øy
[
i
]=0;

88 
	`zx_queue_öôülize
–&
ª˚ive_buf„r_u¨t2_±r
, 
ª˚ive_buf„r_¨øy
, 1, 
ZX_UART2_RX_BUFFER_SIZE
);

93 
zx_cúcuœr_queue
 
ªcõve_èsks_queue_u¨t2
;

94 
zx_cúcuœr_queue
* 
ªcõve_èsks_queue_u¨t2_±r
;

96 
ªcõve_èsks_queue_u¨t2_±r
 = &
ªcõve_èsks_queue_u¨t2
;

97 
ªcõve_èsks_queue_¨øy
[
TASK_COUNT
];

99 
i
=0;

100  
i
=0; i<
TASK_COUNT
; i++ )

102 
ªcõve_èsks_queue_¨øy
[
i
]=
INVALID_TASK_ID
;

107 
	`zx_queue_öôülize
–&
ªcõve_èsks_queue_u¨t2_±r
, 
ªcõve_èsks_queue_¨øy
, 4, 
TASK_COUNT
);

112 
nŸifõr_tid
 = 
	`Cª©e
(
ZX_UART2_RX_NOTIFIER_PRIORITY
, &
zx_u¨t2_rx_nŸifõr
);

114 
tid
 = 
INVALID_TASK_ID
;

116 
zx_u¨t_ªque°
 
ªq
;

117 
zx_u¨t_ªque°
 
ªs
;

119 
	`Regi°îAs
("zx_uart2_rx_server");

122 
ªq
.
ty≥
 = 
UART_REQUEST_CONFIG
;

123 
	`Síd
(
nŸifõr_tid
, &
ªq
, (
zx_u¨t_ªque°
), &
ªs
, (zx_uart_request));

125 i‡(
ªs
.
ty≥
 !
UART_REQUEST_READY
)

127 
	`Exô
();

131 
	`Re˚ive
(&
tid
, &
ªs
, (
zx_u¨t_ªque°
));

132 i‡(
tid
 !
nŸifõr_tid
 || 
ªs
.
ty≥
 !
UART_REQUEST_READY
)

134 
	`Exô
();

139 
ªq
.
ty≥
 = 
UART_REQUEST_READY
;

140 
	`Rïly
(
nŸifõr_tid
, &
ªq
, (
zx_u¨t_ªque°
));

142 
to_exô
 = 0;

143 
exô_èsk_tid
 = 
INVALID_TASK_ID
;

145 
ªsu…
;

147 
˛õ¡id
 = 0;

148 * 
˛õ¡id_±r
 = &
˛õ¡id
;

150 
byã
;

151 *
byã±r
 = &
byã
;

153 
FOREVER


156 
	`Re˚ive
(&
tid
, &
ªs
, (
zx_u¨t_ªque°
));

159 i‡(
tid
 =
nŸifõr_tid
)

161 i‡(
to_exô
 == 0)

164 
byã
 = 
ªs
.
vÆue
;

167 
	`Rïly
(
tid
, &
ªs
, (
zx_u¨t_ªque°
));

170 
ªsu…
 = 
	`zx_queue_ªmove
–&
ªcõve_èsks_queue_u¨t2_±r
, 
˛õ¡id_±r
);

171 i‡–
ªsu…
 =
ZX_Q_SUCCESS
 )

174 
ªs
.
ty≥
 = 
UART_RX_SUCCESS
;

175 
ªs
.
vÆue
 = 
byã
;

176 
	`Rïly
(
˛õ¡id
, &
ªs
, (
zx_u¨t_ªque°
));

181 
ªsu…
 = 
	`zx_queue_ö£π
–&
ª˚ive_buf„r_u¨t2_±r
, (*)
byã±r
);

183 if–
ªsu…
 =
ZX_ERR_QUEUE_FULL
 )

185 
	`zx_¥ötf
–
COM2
, "UART2 Receive Server Error : Buffer Full\n");

192 
ªs
.
ty≥
 = 
API_UART_EXIT
;

193 
	`Rïly
(
exô_èsk_tid
, &
ªs
, (
zx_u¨t_ªque°
));

194 
	`Rïly
(
nŸifõr_tid
, &
ªs
, (
zx_u¨t_ªque°
));

197 (
ªsu…
 = 
	`zx_queue_ªmove
–&
ªcõve_èsks_queue_u¨t2_±r
, 
˛õ¡id_±r
)Ë=
ZX_Q_SUCCESS
)

200 
ªs
.
ty≥
 = 
MSG_SERVER_EXITED
;

201 
ªs
.
vÆue
 = 0;

202 
	`Rïly
(
˛õ¡id
, &
ªs
, (
zx_u¨t_ªque°
));

212 i‡(
to_exô
 == 1)

214 
ªs
.
ty≥
 = 
MSG_SERVER_EXITED
;

215 
ªs
.
vÆue
 = 0;

216 
	`Rïly
(
tid
, &
ªs
, (
zx_u¨t_ªque°
));

219 
ªs
.
ty≥
)

221 
API_UART2_GETC
:

223 
ªsu…
 = 
	`zx_queue_ªmove
–&
ª˚ive_buf„r_u¨t2_±r
, 
byã±r
);

224 i‡–
ªsu…
 =
ZX_Q_SUCCESS
 )

227 
ªs
.
ty≥
 = 
UART_RX_SUCCESS
;

228 
ªs
.
vÆue
 = 
byã
;

229 
	`Rïly
(
tid
, &
ªs
, (
zx_u¨t_ªque°
));

235 
˛õ¡id
 = 
tid
;

236 
ªsu…
 = 
	`zx_queue_ö£π
–&
ªcõve_èsks_queue_u¨t2_±r
, 
˛õ¡id_±r
);

238 if–
ªsu…
 =
ZX_ERR_QUEUE_FULL
 )

240 
ªs
.
ty≥
 = 
UART_RX_ERROR
;

241 
	`Rïly
(
tid
, &
ªs
, (
zx_u¨t_ªque°
));

242 
	`zx_¥ötf
–
COM2
, "UART2 Receive Server Error : Tasks Queue Full\n");

247 
API_UART_EXIT
:

252 
to_exô
 = 1;

253 
exô_èsk_tid
 = 
tid
;

254 
	`Rïly
(
tid
, &
ªs
, (
zx_u¨t_ªque°
));

259 
	`Exô
();

260 
	}
}

	@src/kernel/zx_uart2_transmit_server.c

14 
	~<ts7200.h
>

16 
	~<zx_sy°em_ˇŒs.h
>

17 
	~<zx_kî√l_c⁄fig.h
>

18 
	~<zx_úq_devi˚.h
>

19 
	~<zx_úq_vic.h
>

20 
	~<zx_èsks.h
>

21 
	~<zx_queue.h
>

22 
	~<zx_hñ≥r.h
>

23 
	~<zx_u¨t_io.h
>

24 
	~<zx_îr.h
>

27 
	$zx_u¨t2_tx_£rvî
()

31 
zx_cúcuœr_queue
 
å™smô_queue_u¨t2
;

32 
zx_cúcuœr_queue
* 
å™smô_queue_u¨t2_±r
;

33 
å™smô_queue_u¨t2_±r
 = &
å™smô_queue_u¨t2
;

34 
å™smô_queue_¨øy
[
ZX_UART2_TX_BUFFER_SIZE
];

37 
i
=0;

38  
i
=0; i<
ZX_UART2_TX_BUFFER_SIZE
; i++ )

40 
å™smô_queue_¨øy
[
i
]=0;

45 
	`zx_queue_öôülize
–&
å™smô_queue_u¨t2_±r
, 
å™smô_queue_¨øy
, 1, 
ZX_UART2_TX_BUFFER_SIZE
);

47 
byã
;

48 *
byã±r
 = &
byã
;

51 
nŸifõr_tid
 = 
	`Cª©e
(
ZX_UART2_TX_NOTIFIER_PRIORITY
, &
zx_u¨t2_tx_nŸifõr
);

53 
tid
 = 
INVALID_TASK_ID
;

55 
zx_u¨t_ªque°
 
ªq
;

56 
zx_u¨t_ªque°
 
ªs
;

58 
	`Regi°îAs
("zx_uart2_tx_server");

61 
ªq
.
ty≥
 = 
UART_REQUEST_CONFIG
;

62 
	`Síd
(
nŸifõr_tid
, &
ªq
, (
zx_u¨t_ªque°
), &
ªs
, (zx_uart_request));

64 i‡(
ªs
.
ty≥
 !
UART_REQUEST_READY
)

66 
	`Exô
();

70 
	`Re˚ive
(&
tid
, &
ªs
, (
zx_u¨t_ªque°
));

71 i‡(
tid
 !
nŸifõr_tid
 || 
ªs
.
ty≥
 !
UART_REQUEST_READY
)

73 
	`Exô
();

78 
ªq
.
ty≥
 = 
UART_REQUEST_READY
;

79 
	`Rïly
(
nŸifõr_tid
, &
ªq
, (
zx_u¨t_ªque°
));

81 
to_exô
 = 0;

82 
exô_èsk_tid
 = 
INVALID_TASK_ID
;

84 
nŸifõr_ªady_Êag
 = 0;

85 
ªsu…
;

87 * 
sour˚
;

90 
FOREVER


93 
	`Re˚ive
(&
tid
, &
ªs
, (
zx_u¨t_ªque°
));

96 i‡(
tid
 =
nŸifõr_tid
)

98 i‡(
to_exô
 == 0)

101 
ªsu…
 = 
	`zx_queue_ªmove
–&
å™smô_queue_u¨t2_±r
, 
byã±r
);

102 i‡–
ªsu…
 =
ZX_Q_SUCCESS
 )

106 
ªs
.
ty≥
 = 
UART_WRITE_BYTE
;

107 
ªs
.
vÆue
 = 
byã
;

108 
	`Rïly
(
nŸifõr_tid
, &
ªs
, (
zx_u¨t_ªque°
));

114 
nŸifõr_ªady_Êag
 = 1;

120 
ªs
.
ty≥
 = 
API_UART_EXIT
;

121 
	`Rïly
(
exô_èsk_tid
, &
ªs
, (
zx_u¨t_ªque°
));

122 
	`Rïly
(
nŸifõr_tid
, &
ªs
, (
zx_u¨t_ªque°
));

123 
nŸifõr_ªady_Êag
 = 1;

131 i‡(
to_exô
 == 1)

133 
ªs
.
ty≥
 = 
MSG_SERVER_EXITED
;

134 
ªs
.
vÆue
 = 0;

135 
	`Rïly
(
tid
, &
ªs
, (
zx_u¨t_ªque°
));

138 
ªs
.
ty≥
)

140 
API_UART2_PUTC
:

142 
byã
 = 
ªs
.
vÆue
;

144 if–
nŸifõr_ªady_Êag
 )

148 
ªs
.
ty≥
 = 
UART_WRITE_BYTE
;

149 
ªs
.
vÆue
 = 
byã
;

150 
	`Rïly
(
nŸifõr_tid
, &
ªs
, (
zx_u¨t_ªque°
));

154 
ªs
.
ty≥
 = 
UART_TX_SUCCESS
;

155 
	`Rïly
(
tid
, &
ªs
, (
zx_u¨t_ªque°
));

158 
nŸifõr_ªady_Êag
 = 0;

162 
ªsu…
 = 
	`zx_queue_ö£π
–&
å™smô_queue_u¨t2_±r
, (*)
byã±r
);

165 if–
ªsu…
 =
ZX_ERR_QUEUE_FULL
 )

167 
ªs
.
ty≥
 = 
UART_TX_ERROR
;

171 
ªs
.
ty≥
 = 
UART_TX_SUCCESS
;

173 
	`Rïly
(
tid
, &
ªs
, (
zx_u¨t_ªque°
));

178 
API_UART2_PUT_MULTIPLE
:

181 
sour˚
 = (*)(
ªs
.
vÆue
);

183 i‡(*
sour˚
 =
UART_PACKET_END_CHAR
)

185 
ªs
.
ty≥
 = 
UART_TX_SUCCESS
;

186 
	`Rïly
(
tid
, &
ªs
, (
zx_u¨t_ªque°
));

190 if–
nŸifõr_ªady_Êag
 )

192 
byã
 = *
sour˚
;

195 
ªs
.
ty≥
 = 
UART_WRITE_BYTE
;

196 
ªs
.
vÆue
 = 
byã
;

197 
	`Rïly
(
nŸifõr_tid
, &
ªs
, (
zx_u¨t_ªque°
));

199 
sour˚
++;

201 
nŸifõr_ªady_Êag
 = 0;

204 *
sour˚
 !
UART_PACKET_END_CHAR
)

206 
byã
 = *
sour˚
;

207 
ªsu…
 = 
	`zx_queue_ö£π
–&
å™smô_queue_u¨t2_±r
, (*)
byã±r
);

210 if–
ªsu…
 =
ZX_ERR_QUEUE_FULL
 )

212 
ªs
.
ty≥
 = 
UART_TX_ERROR
;

213 
	`Rïly
(
tid
, &
ªs
, (
zx_u¨t_ªque°
));

217 
sour˚
++;

220 
ªs
.
ty≥
 = 
UART_TX_SUCCESS
;

221 
	`Rïly
(
tid
, &
ªs
, (
zx_u¨t_ªque°
));

224 
API_UART_EXIT
:

229 
to_exô
 = 1;

230 
exô_èsk_tid
 = 
tid
;

231 
	`Rïly
(
tid
, &
ªs
, (
zx_u¨t_ªque°
));

233 if–
nŸifõr_ªady_Êag
 )

235 
ªs
.
ty≥
 = 
API_UART_EXIT
;

236 
	`Rïly
(
nŸifõr_tid
, &
ªs
, (
zx_u¨t_ªque°
));

242 i‡(
to_exô
 =1 && 
nŸifõr_ªady_Êag
)

247 
	`Exô
();

248 
	}
}

251 
	$zx_u¨t2_tx_nŸifõr
()

254 
zx_u¨t_ªque°
 
ª∂y
;

255 
zx_u¨t_ªque°
 
ªq
;

256 
zx_u¨t_ªque°
 
u¨t_ª•⁄£
;

258 
£rvî_tid
;

260 
byã
 = 0;

263 
	`Re˚ive
(&
£rvî_tid
, &
ªq
, (
zx_u¨t_ªque°
));

266 
ªq
.
ty≥
 = 
UART_REQUEST_READY
;

267 
	`Rïly
(
£rvî_tid
, &
ªq
, (
zx_u¨t_ªque°
));

270 
ªq
.
ty≥
 = 
UART_REQUEST_READY
;

271 
	`Síd
(
£rvî_tid
, &
ªq
, ‘eq), &
ª∂y
, (
zx_u¨t_ªque°
));

274 
u¨t_ª•⁄£
.
ty≥
 = 
API_UART2_PUTC
;

276 
FOREVER
{

279 
	`AwaôEvít
(
EVENT_UART2_TX
);

281 
	`Síd
(
£rvî_tid
, &
u¨t_ª•⁄£
, (
zx_u¨t_ªque°
), &
ª∂y
, (zx_uart_request));

283 i‡(
ª∂y
.
ty≥
 =
API_UART_EXIT
)

287 if–
ª∂y
.
ty≥
 =
UART_WRITE_BYTE
 )

289 
byã
 = 
ª∂y
.
vÆue
;

290 
	`zx_wrôe_byã
–
COM2
, 
byã
 );

298 
	`Exô
();

299 
	}
}

	@src/kernel/zx_uart_io.c

15 
	~<ts7200.h
>

16 
	~<zx_u¨t_io.h
>

17 
	~<zx_kî√l_c⁄fig.h
>

18 
	~<zx_úq_devi˚.h
>

19 
	~<zx_úq_vic.h
>

20 
	~<zx_sy°em_ˇŒs.h
>

22 
	$zx_£tfifo
–
ch™√l
, 
°©e
 ) {

23 *
löe
, 
buf
;

24  
ch™√l
 ) {

25 
COM1
:

26 
löe
 = (*)–
UART1_BASE
 + 
UART_LCRH_OFFSET
 );

28 
COM2
:

29 
löe
 = (*)–
UART2_BASE
 + 
UART_LCRH_OFFSET
 );

35 
buf
 = *
löe
;

36 
buf
 = 
°©e
 ? bu‡| 
FEN_MASK
 : buf & ~FEN_MASK;

37 *
löe
 = 
buf
;

39 
	}
}

41 
	$zx_öôülize_u¨t2
()

44 
	`zx_£tfifo
–
COM2
, 
OFF
 );

46 *
ªg
 = (*)(
UART2_CONTROL
);

47 *
ªg
 = (*reg) | 0x00000001;

50 
	}
}

52 
	$zx_öôülize_u¨t1
()

55 
	`zx_£tfifo
–
COM1
, 
OFF
 );

58 *((*)
UART1_LCTRL_L
Ë0xFF & 
BAUD_RATE_DIVISOR
;

59 *((*)
UART1_LCTRL_M
) = 0x0;

60 *((*)
UART1_LCTRL_H
Ë
UART1_LCRTL_H_CONFIG
;

63 *((*)
UART1_CTRL
) |= 0x00000001;

65 
	`zx_öô_modem_öå
();

68 
	}
}

70 
	$zx_¥öt_numbî
–
ch™√l
, 
num
 )

72 
n
 = 0;

73 
dgt
;

74 
d
 = 1;

75 
ba£
=10;

77  (
num
 / 
d
Ë>
ba£
 ) d *= base;

78  
d
 != 0 ) {

79 
dgt
 = 
num
 / 
d
;

80 
num
 %
d
;

81 
d
 /
ba£
;

82 if–
n
 || 
dgt
 > 0 || 
d
 == 0 ) {

83 
	`zx_putc
–
ch™√l
, 
dgt
 + ( dgt < 10 ? '0' : 'a' - 10 ));

84 ++
n
;

87 
	}
}

89 
	$zx_ªad_byã
–
ch™√l
 )

91 *
Êags
, *
d©a
;

92 
c
;

94  
ch™√l
 ) {

95 
COM1
:

96 
Êags
 = (*)–
UART1_BASE
 + 
UART_FLAG_OFFSET
 );

97 
d©a
 = (*)–
UART1_BASE
 + 
UART_DATA_OFFSET
 );

99 
COM2
:

100 
Êags
 = (*)–
UART2_BASE
 + 
UART_FLAG_OFFSET
 );

101 
d©a
 = (*)–
UART2_BASE
 + 
UART_DATA_OFFSET
 );

107 
c
 = *
d©a
;

109  
c
;

110 
	}
}

112 
	$zx_wrôe_byã
–
ch™√l
, 
c
 )

114 *
Êags
, *
d©a
;

115  
ch™√l
 ) {

116 
COM1
:

117 
Êags
 = (*)–
UART1_BASE
 + 
UART_FLAG_OFFSET
 );

118 
d©a
 = (*)–
UART1_BASE
 + 
UART_DATA_OFFSET
 );

120 
COM2
:

121 
Êags
 = (*)–
UART2_BASE
 + 
UART_FLAG_OFFSET
 );

122 
d©a
 = (*)–
UART2_BASE
 + 
UART_DATA_OFFSET
 );

130 *
d©a
 = 
c
;

133 
	}
}

135 
	$zx_putc
–
ch™√l
, 
c
 )

137  
	`PutC
(
ch™√l
, 
c
);

138 
	}
}

142 
	$zx_c2x
–
ch
 ) {

143 i‡–(
ch
 <= 9) )  '0' + ch;

144  'a' + 
ch
 - 10;

145 
	}
}

147 
	$zx_putx
–
ch™√l
, 
c
 ) {

148 
chh
, 
chl
;

150 
chh
 = 
	`zx_c2x
–
c
 / 16 );

151 
chl
 = 
	`zx_c2x
–
c
 % 16 );

152 
	`zx_putc
–
ch™√l
, 
chh
 );

153  
	`zx_putc
–
ch™√l
, 
chl
 );

154 
	}
}

156 
	$zx_puå
–
ch™√l
, 
ªg
 ) {

157 
byã
;

158 *
ch
 = (*Ë&
ªg
;

160  
byã
 = 3; byã >0; byã-- ) 
	`zx_putx
–
ch™√l
, 
ch
[byte] );

161  
	`zx_putc
–
ch™√l
, ' ' );

162 
	}
}

164 
	$zx_put°r
–
ch™√l
, *
°r
 ) {

165  *
°r
 ) {

166 if–
	`zx_putc
–
ch™√l
, *
°r
 ) < 0 )  -1;

167 
°r
++;

170 
	}
}

172 
	$zx_putw
–
ch™√l
, 
n
, 
fc
, *
bf
 ) {

173 
ch
;

174 *
p
 = 
bf
;

176  *
p
++ && 
n
 > 0 )Ç--;

177  
n
-- > 0 ) 
	`zx_putc
–
ch™√l
, 
fc
 );

178  ( 
ch
 = *
bf
++ ) ) 
	`zx_putc
–
ch™√l
, ch );

179 
	}
}

183 
	$zx_a2d
–
ch
 ) {

184 if–
ch
 >= '0' && ch <= '9' )  ch - '0';

185 if–
ch
 >= 'a' && ch <= 'f' )  ch - 'a' + 10;

186 if–
ch
 >= 'A' && ch <= 'F' )  ch - 'A' + 10;

188 
	}
}

190 
	$zx_a2i
–
ch
, **
§c
, 
ba£
, *
nump
 ) {

191 
num
, 
digô
;

192 *
p
;

194 
p
 = *
§c
; 
num
 = 0;

195  ( 
digô
 = 
	`zx_a2d
–
ch
 ) ) >= 0 ) {

196 i‡–
digô
 > 
ba£
 ) ;

197 
num
 =Çum*
ba£
 + 
digô
;

198 
ch
 = *
p
++;

200 *
§c
 = 
p
; *
nump
 = 
num
;

201  
ch
;

202 
	}
}

204 
	$zx_ui2a
–
num
, 
ba£
, *
bf
 ) {

205 
n
 = 0;

206 
dgt
;

207 
d
 = 1;

209  (
num
 / 
d
Ë>
ba£
 ) d *= base;

210  
d
 != 0 ) {

211 
dgt
 = 
num
 / 
d
;

212 
num
 %
d
;

213 
d
 /
ba£
;

214 if–
n
 || 
dgt
 > 0 || 
d
 == 0 ) {

215 *
bf
++ = 
dgt
 + ( dgt < 10 ? '0' : 'a' - 10 );

216 ++
n
;

219 *
bf
 = 0;

220 
	}
}

222 
	$zx_i2a
–
num
, *
bf
 ) {

223 if–
num
 < 0 ) {

224 
num
 = -num;

225 *
bf
++ = '-';

227 
	`zx_ui2a
–
num
, 10, 
bf
 );

228 
	}
}

232 
	$zx_f‹m©
 ( 
ch™√l
, *
fmt
, 
va_li°
 
va
 ) {

233 
bf
[12];

234 
ch
, 
lz
;

235 
w
;

238  ( 
ch
 = *(
fmt
++) ) ) {

239 i‡–
ch
 != '%' )

240 
	`zx_putc
–
ch™√l
, 
ch
 );

242 
lz
 = 0; 
w
 = 0;

243 
ch
 = *(
fmt
++);

244  
ch
 ) {

246 
lz
 = 1; 
ch
 = *(
fmt
++);

257 
ch
 = 
	`zx_a2i
–ch, &
fmt
, 10, &
w
 );

260  
ch
 ) {

263 
	`zx_putc
–
ch™√l
, 
	`va_¨g
–
va
, ) );

266 
	`zx_putw
–
ch™√l
, 
w
, 0, 
	`va_¨g
–
va
, * ) );

269 
	`zx_ui2a
–
	`va_¨g
–
va
, ), 10, 
bf
 );

270 
	`zx_putw
–
ch™√l
, 
w
, 
lz
, 
bf
 );

273 
	`zx_i2a
–
	`va_¨g
–
va
, ), 
bf
 );

274 
	`zx_putw
–
ch™√l
, 
w
, 
lz
, 
bf
 );

277 
	`zx_ui2a
–
	`va_¨g
–
va
, ), 16, 
bf
 );

278 
	`zx_putw
–
ch™√l
, 
w
, 
lz
, 
bf
 );

281 
	`zx_putc
–
ch™√l
, 
ch
 );

286 
	}
}

289 
	$zx_¥ötf
–
ch™√l
, *
fmt
, ... ) {

290 
va_li°
 
va
;

292 
	`va_°¨t
(
va
,
fmt
);

293 
	`zx_f‹m©
–
ch™√l
, 
fmt
, 
va
 );

294 
	`va_íd
(
va
);

295 
	}
}

	@src/kernel/zx_uart_server.c

14 
	~<bwio.h
>

16 
	~<zx_sy°em_ˇŒs.h
>

17 
	~<zx_kî√l_c⁄fig.h
>

18 
	~<zx_úq.h
>

19 
	~<zx_èsks.h
>

20 
	~<zx_u¨t_£rvî.h
>

22 
	#FOREVER
 ;;)

	)

24 
	$zx_u¨t2_rx_nŸifõr
()

26 
zx_u¨t_ªque°
 
ª∂y
;

28 
£rvî_tid
;

29 
zx_u¨t_ªque°
 
ªq
;

31 
zx_u¨t_ªque°
 
u¨t_ª•⁄£
;

34 
	`Re˚ive
(&
£rvî_tid
, &
ªq
, (
zx_u¨t_ªque°
));

37 
ªq
.
ty≥
 = 
UART_REQUEST_READY
;

38 
	`Rïly
(
£rvî_tid
, &
ªq
, (
zx_u¨t_ªque°
));

41 
ªq
.
ty≥
 = 
UART_REQUEST_READY
;

43 
	`bw¥ötf
(
COM2
, "UARTÇotifier: SendingÅoÅhe UART server... \n");

44 
	`Síd
(
£rvî_tid
, &
ªq
, ‘eq), &
ª∂y
, (
zx_u¨t_ªque°
));

45 
	`bw¥ötf
(
COM2
, "UARTÇotifier: SentÅoÅhe UART server. \n");

48 
u¨t_ª•⁄£
.
ty≥
 = 
API_UART2_GETC
;

50 
	`bw¥ötf
(
COM2
, "UARTÇotifier: Ready. \n");

53 
	`zx_devi˚_öô
(
INTR_SOURCE_UART2_RX
);

56 
FOREVER
{

58 
ªsu…
 = 
	`AwaôEvít
(
EVENT_UART2_RX
);

59 
	`bw¥ötf
(
COM2
, "UARTÇŸifõr: GŸ it!!! %d \n", 
ªsu…
);

62 
	`bw¥ötf
(
COM2
, "UARTÇotifier: Ended Await. Sending... \n");

64 
	`Síd
(
£rvî_tid
, &
u¨t_ª•⁄£
, (
zx_u¨t_ªque°
), &
ª∂y
, (zx_uart_request));

67 i‡(
ª∂y
.
ty≥
 =
API_UART_EXIT
)

69 
	`zx_devi˚_‰ì
(
INTR_SOURCE_UART2_RX
);

73 
	`bw¥ötf
(
COM2
, "ClockÇotifier: Received. \n");

76 
	`bw¥ötf
(
COM2
, "UARTÇotifier: Exiting...\n");

77 
	`Exô
();

78 
	}
}

80 
	$zx_u¨t2_rx_£rvî
()

82 
	`bw¥ötf
(
COM2
, "UART server: Starting... \n");

84 
nŸifõr_tid
 = 
	`Cª©e
(
ZX_UART_NOTIFIER_PRIORITY
, &
zx_u¨t2_rx_nŸifõr
);

85 
zx_u¨t_ªque°
 
ªq
;

86 
zx_u¨t_ªque°
 
ªs
;

88 
	`bw¥ötf
(
COM2
, "UART sîvî: NŸifõr'†èsk id: %d. \n", 
nŸifõr_tid
);

89 
	`Regi°îAs
("zx_uart_server");

92 
ªq
.
ty≥
 = 
UART_REQUEST_CONFIG
;

93 
	`Síd
(
nŸifõr_tid
, &
ªq
, (
zx_u¨t_ªque°
), &
ªs
, (zx_uart_request));

95 
	`bw¥ötf
(
COM2
, "UART server: SentÅoÅheÇotifierándÑeceivedÅheÑesponse. \n");

98 i‡(
ªs
.
ty≥
 !
UART_REQUEST_READY
)

100 
	`bw¥ötf
(
COM2
, "UART server: TheÇotifier isÇotÑeady. Aborting... \n");

101 
	`Exô
();

104 
tid
;

108 
	`Re˚ive
(&
tid
, &
ªs
, (
zx_u¨t_ªque°
));

109 i‡(
tid
 !
nŸifõr_tid
 || 
ªs
.
ty≥
 !
UART_REQUEST_READY
)

111 
	`bw¥ötf
(
COM2
, "UART server: TheÇotifier isÇotÑeady or wrongÅask. Aborting... \n");

112 
	`Exô
();

117 
ªq
.
ty≥
 = 
UART_REQUEST_READY
;

118 
	`Rïly
(
nŸifõr_tid
, &
ªq
, (
zx_u¨t_ªque°
));

124 
to_exô
 = 0;

125 
exô_èsk_tid
 = 
INVALID_TASK_ID
;

128 
FOREVER


130 
	`Re˚ive
(&
tid
, &
ªs
, (
zx_u¨t_ªque°
));

133 i‡(
tid
 =
nŸifõr_tid
)

136 i‡(
to_exô
 == 0)

138 
ªs
.
ty≥
 = 
UART_REQUEST_READY
;

139 
	`Rïly
(
nŸifõr_tid
, &
ªs
, (
zx_u¨t_ªque°
));

143 
ªs
.
ty≥
 = 
API_UART_EXIT
;

144 
	`Rïly
(
nŸifõr_tid
, &
ªs
, (
zx_u¨t_ªque°
));

153 i‡(
to_exô
 == 1)

156 
vÆue
;

158 
ªs
.
ty≥
)

160 
API_UART2_GETC
:

162 
	`bw¥ötf
(
COM2
, "GëC: %d.\n", 
tid
);

165 
API_UART_EXIT
:

166 
to_exô
 = 1;

167 
exô_èsk_tid
 = 
tid
;

168 
	`Rïly
(
exô_èsk_tid
, &
ªs
, (res));

175 i‡(
exô_èsk_tid
 =
INVALID_TASK_ID
)

177 
	`bw¥ötf
(
COM2
, "UART server:Éxit_task_tid is invalid");

178 
	`Exô
();

181 
	`bw¥ötf
(
COM2
, "UART server: Exiting...");

183 
	`Exô
();

185 
	}
}

	@src/project/zx_project_calibration.c

16 
	~<zx_¥oje˘_åack_node.h
>

17 
	~<zx_¥oje˘_åack_£nsög.h
>

18 
	~<zx_¥oje˘_åack_d©a.h
>

19 
	~<zx_u¨t_io.h
>

21 
	~<zx_¥oje˘_ˇlibøti⁄.h
>

36 
	$åack_ˇlc_di°™˚
(
åack_node
* 
°¨t_node
,Åøck_node* 
íd_node
, 
zx_tu∫out_°©e
 
tu∫out_°©es
[])

38 
åack_node
* 
node
 = 
°¨t_node
;

40 
ªsu…
 = -1;

42  
node
 !
íd_node
 )

44 i‡(
node
->
ty≥
 =
NODE_BRANCH
)

46 
tu∫out_id
 = 
node
->
num
;

47 i‡(
tu∫out_°©es
[
tu∫out_id
].
°©e
 =
TURNOUT_STATE_STRAIGHT
)

49 
ªsu…
 +
node
->
edge
[
DIR_CURVED
].
di°
;

50 
node
 =Çode->
edge
[
DIR_STRAIGHT
].
de°
;

54 
ªsu…
 +
node
->
edge
[
DIR_CURVED
].
di°
;

55 
node
 =Çode->
edge
[
DIR_CURVED
].
de°
;

60 
ªsu…
 +
node
->
edge
[
DIR_AHEAD
].
di°
;

61 
node
 =Çode->
edge
[
DIR_AHEAD
].
de°
;

65  
ªsu…
 * 100;

66 
	}
}

68 
	$åaö_gë_°›pög_dñay
(
zx_åaö
* 
åaö
, 
•ìd
)

74 
ªsu…
 = 0;

83 
ªsu…
 = (2 * 
åaö
->
°›pög_di°™˚
[
•ìd
]Ë/Åøö->
•ìd_to_vñocôy
[0][speed];

85  
ªsu…
;

86 
	}
}

93 
	$åaö_ˇlc_dec˚Àøtög_dñay
(
zx_åaö
* 
åaö
)

95  
	`åaö_gë_°›pög_dñay
(
åaö
,Åøö->
•ìd
);

96 
	}
}

98 
	$åaö_ˇlc_ac˚Àøtög_dñay
(
zx_åaö
* 
åaö
)

100  
	`åaö_gë_°›pög_dñay
(
åaö
,Åøö->
•ìd
);

101 
	}
}

103 
	$åaö_föd_vñocôy_™d_di°™˚_ö_dñè
–
zx_åaö
* 
åaö
 )

106 
v0
 = 
åaö
->
öôül_vñocôy
;

107 
v1
 = 
åaö
->
föÆ_vñocôy
;

112 
t1_t0
 = 
åaö
->
t1
-åaö->
t0
;

113 
t_t0
 = 
åaö
->
t
-åaö->
t0
;

117 
squ¨e_t1_t0
 = 
t1_t0
 *Å1_t0;

118 
cube_t1_t0
 = 
squ¨e_t1_t0
 * 
t1_t0
;

119 
fouπh_powî_t1_t0
 = 
cube_t1_t0
 * 
t1_t0
;

121 
squ¨e_t_t0
 = 
t_t0
 *Å_t0;

122 
cube_t_t0
 = 
squ¨e_t_t0
 * 
t_t0
;

123 
fouπh_powî_t_t0
 = 
cube_t_t0
 * 
t_t0
;

126 
v1_v0
 = 
v1
-
v0
;

129 
ãrm1
 = -–
t1_t0
 * 
v1_v0
 * 
fouπh_powî_t_t0
 ) / ( 2 * 
fouπh_powî_t1_t0
 );

130 
ãrm2
 = +–
t1_t0
 * 
v1_v0
 * 
cube_t_t0
 ) / ( 
cube_t1_t0
 );

131 
ãrm3
 = +–
t1_t0
 * 
v0
 * 
t_t0
 ) /Å1_t0;

133 
åaö
->
di°™˚_åavñÀd_ö_dñè
 = 
ãrm1
 + 
ãrm2
 + 
ãrm3
;

138 
ãrm1
 = -–2 * 
v1_v0
 * 
cube_t_t0
 ) / 
cube_t1_t0
;

139 
ãrm2
 = +–3 * 
v1_v0
 * 
squ¨e_t_t0
 ) / 
squ¨e_t1_t0
;

140 
ãrm3
 = 
v0
;

142 
åaö
->
cuºít_vñocôy
 = 
ãrm1
 + 
ãrm2
 + 
ãrm3
;

143 
	}
}

	@src/project/zx_project_graphics.c

5 
	~<ts7200.h
>

6 
	~<zx_sy°em_ˇŒs.h
>

8 
	~<zx_¥oje˘_utûôõs.h
>

9 
	~<zx_¥oje˘_gøphics.h
>

12 
	$zx_£t_curs‹
–
row
, 
cﬁumn
, *
ouçut
, * 
ouçut_size_addr
 )

14 
ouçut_size
 = *
ouçut_size_addr
;

17 
°rög
[5];

18 
i
=0;

20 
ouçut
[
ouçut_size
++] = 27;

21 
ouçut
[
ouçut_size
++] = '[';

23 
	`num_to_°rög
–
row
, 10, 
°rög
 );

24  
°rög
[
i
] )

26 
ouçut
[
ouçut_size
++] = 
°rög
[
i
++];

29 
ouçut
[
ouçut_size
++] = ';';

31 
i
=0;

32 
	`num_to_°rög
–
cﬁumn
, 10, 
°rög
 );

33  
°rög
[
i
] )

35 
ouçut
[
ouçut_size
++] = 
°rög
[
i
++];

38 
ouçut
[
ouçut_size
++] = 'H';

40 *
ouçut_size_addr
 = 
ouçut_size
;

43 
	}
}

46 
	$zx_˛ór_s¸ìn
–*
ouçut
, * 
ouçut_size_addr
 )

48 
ouçut_size
 = *
ouçut_size_addr
;

50 
ouçut
[
ouçut_size
++] = 27;

51 
ouçut
[
ouçut_size
++] = '[';

52 
ouçut
[
ouçut_size
++] = '2';

53 
ouçut
[
ouçut_size
++] = 'J';

55 *
ouçut_size_addr
 = 
ouçut_size
;

58 
	}
}

60 
	$zx_døw_h_löe
–
row
 ,
°¨t
 , 
íd
, 
∑âîn
, *
ouçut
, * 
ouçut_size_addr
 )

62 
ouçut_size
 = *
ouçut_size_addr
;

64 
i
=0;

67 
	`zx_£t_curs‹
–
row
, 
°¨t
, 
ouçut
, &
ouçut_size
 );

69  
i
=
°¨t
; i<=
íd
; i++ )

71 
ouçut
[
ouçut_size
++] = 
∑âîn
;

74 *
ouçut_size_addr
 = 
ouçut_size
;

77 
	}
}

79 
	$zx_îa£_löe
(*
ouçut
, * 
ouçut_size_addr
)

81 
ouçut_size
 = *
ouçut_size_addr
;

83 
ouçut
[
ouçut_size
++] = 27;

84 
ouçut
[
ouçut_size
++] = '[';

85 
ouçut
[
ouçut_size
++] = 'K';

87 *
ouçut_size_addr
 = 
ouçut_size
;

90 
	}
}

92 
	$zx_îa£_‰om_cuºít_to_s¸íd
(*
ouçut
, * 
ouçut_size_addr
)

94 
ouçut_size
 = *
ouçut_size_addr
;

96 
ouçut
[
ouçut_size
++] = 27;

97 
ouçut
[
ouçut_size
++] = '[';

98 
ouçut
[
ouçut_size
++] = 'J';

100 *
ouçut_size_addr
 = 
ouçut_size
;

103 
	}
}

105 
	$zx_öôülize_¥om±
–*
¥om±
)

107 
¥om±
[0] = 'c';

108 
¥om±
[1] = 'o';

109 
¥om±
[2] = 'n';

110 
¥om±
[3] = 't';

111 
¥om±
[4] = 'r';

112 
¥om±
[5] = 'o';

113 
¥om±
[6] = 'l';

114 
¥om±
[7] = 'l';

115 
¥om±
[8] = 'e';

116 
¥om±
[9] = 'r';

117 
¥om±
[10]= '#';

118 
¥om±
[11]= 0;

119 
	}
}

123 
	$zx_put_numbî
–
num
, *
ouçut
, * 
ouçut_size_addr
 )

125 
ouçut_size
 = *
ouçut_size_addr
;

127 i‡(
num
 < 0)

129 
num
 = -num;

130 
ouçut
[
ouçut_size
++] = '-';

133 
n
 = 0;

134 
dgt
;

135 
d
 = 1;

136 
ba£
=10;

138  (
num
 / 
d
Ë>
ba£
 ) d *= base;

139  
d
 != 0 ) {

140 
dgt
 = 
num
 / 
d
;

141 
num
 %
d
;

142 
d
 /
ba£
;

143 if–
n
 || 
dgt
 > 0 || 
d
 == 0 ) {

144 
ouçut
[
ouçut_size
++] = 
dgt
 + ( dgt < 10 ? '0' : 'a' - 10 );

145 ++
n
;

149 *
ouçut_size_addr
 = 
ouçut_size
;

151 
	}
}

153 
	$zx_put_°rög
(*
°r
, *
ouçut
, * 
ouçut_size_addr
 )

155 
ouçut_size
 = *
ouçut_size_addr
;

156  *
°r
 ) {

157 
ouçut
[
ouçut_size
++] = *
°r
;

158 
°r
++;

161 *
ouçut_size_addr
 = 
ouçut_size
;

164 
	}
}

	@src/project/zx_project_sensor.c

11 
	~"zx_èsks.h
"

12 
	~"zx_u¨t_io.h
"

13 
	~"zx_queue.h
"

14 
	~"zx_sy°em_ˇŒs.h
"

15 
	~"zx_îr.h
"

16 
	~"zx_kî√l_c⁄fig.h
"

18 
	~<zx_¥oje˘_åack_fun˘i⁄s.h
>

19 
	~<zx_¥oje˘_åack_node.h
>

20 
	~<zx_¥oje˘_åack_£nsög.h
>

21 
	~<zx_¥oje˘_åack_d©a.h
>

22 
	~<zx_¥oje˘_.h
>

23 
	~<zx_¥oje˘_åaö_fun˘i⁄s.h
>

24 
	~<zx_¥oje˘_£ns‹.h
>

31 
	$zx_åack_£ns‹_èsk
()

35 
k
 = 0;

37 
£ns‹_d©a_ﬁd
[
SENSOR_BUFFER_LEN
];

38 
£ns‹_d©a_√w
;

40 
£ns‹_byã_ödex
 = -1;

41 
ch™ge
 = 0;

44  
k
 = 0; k < 
SENSOR_BUFFER_LEN
; k++ )

46 
£ns‹_d©a_ﬁd
[
k
] = 0;

53 
com1_ª˚ived_byã_cou¡
 = 10;

54 
ªsu…
 = 0;

56 
courõr_tid
 = 
	`WhoIs
("sensor_courier");

58 i‡(
courõr_tid
 =
INVALID_TASK_ID
)

64 
dump_cou¡
 = 0;

66 
FOREVER


70 if–
com1_ª˚ived_byã_cou¡
 == 10 )

73 
ªsu…
 = 
	`PutC
–
COM1
, 
SENSOR_DUMP
 );

74 
com1_ª˚ived_byã_cou¡
 = 0;

77 
ªsu…
 = 
	`GëC
(
COM1
);

79 i‡(
dump_cou¡
 < 100)

80 
dump_cou¡
++;

82 if–
ªsu…
 =
ERR_IMPOSSIBLE_TASKID
 ||Ñesu… =
ERR_NONEXISTENT_TASK
 )

87 
£ns‹_d©a_√w
 = 
ªsu…
;

89 
£ns‹_byã_ödex
 = (£ns‹_byã_ödex + 1 )%
SENSOR_BUFFER_LEN
;

90 
com1_ª˚ived_byã_cou¡
++;

93 
ch™ge
 = (~
£ns‹_d©a_ﬁd
[
£ns‹_byã_ödex
]Ë& 
£ns‹_d©a_√w
;

95 
zx_£ns‹_ªque°
 
ªq
;

96 
zx_£ns‹_ªque°
 
ªp
;

98 if–
ch™ge
 && (
dump_cou¡
 > 10))

100 
ªq
.
vÆue
 = 
ch™ge
 | (
£ns‹_byã_ödex
 << 8);

102 
	`Síd
(
courõr_tid
, &
ªq
, ‘eq), &
ªp
, (rep));

105 
£ns‹_d©a_ﬁd
[
£ns‹_byã_ödex
] = 
£ns‹_d©a_√w
;

112 
	`Exô
();

113 
	}
}

116 
	$zx_£ns‹_courõr_èsk
()

118 
	`Regi°îAs
("sensor_courier");

120 
£ns‹_èsk_tid
 = 
	`Cª©e
(
FIRST_USER_TASK_PRIORITY
 - 4, &
zx_åack_£ns‹_èsk
);

122 
zx_£ns‹_ªque°
 
ªs
;

123 
zx_£ns‹_ªque°
 
ªp
;

125 
tid
;

128 
zx_cúcuœr_queue
 
£ns‹_ªque°_queue
;

129 
zx_cúcuœr_queue
* 
£ns‹_ªque°_queue_±r
 = &
£ns‹_ªque°_queue
;

131 
zx_£ns‹_ªque°
 
£ns‹_ªque°_queue_¨øy
[
SENSOR_BUF_SIZE
];

133 
	`zx_queue_öôülize
–&
£ns‹_ªque°_queue_±r
, 
£ns‹_ªque°_queue_¨øy
, (
zx_£ns‹_ªque°
), 
SENSOR_BUF_SIZE
);

135 
ªsu…
;

137 
zx_£ns‹_ªque°
 
ãmp
;

138 
ãmp
.
vÆue
 = 0;

139 
ãmp
.
time
 = 0;

144 
FOREVER


147 
	`Re˚ive
(&
tid
, &
ªs
, (res));

149 i‡(
tid
 =
£ns‹_èsk_tid
)

151 
	`Rïly
(
tid
, &
ªp
, (rep));

153 
ªs
.
time
 = 
	`Time
();

155 
ªsu…
 = 
	`zx_queue_ö£π
–&
£ns‹_ªque°_queue_±r
, (*)(&
ªs
));

157 i‡(
ªsu…
 =
ZX_ERR_QUEUE_FULL
)

166 
zx_£ns‹_ªque°
 
cuºít_ªque°
;

167 
ªsu…
 = 
	`zx_queue_ªmove
–&
£ns‹_ªque°_queue_±r
, &
cuºít_ªque°
);

168 i‡–
ªsu…
 =
ZX_Q_SUCCESS
 )

171 
	`Rïly
(
tid
, &
cuºít_ªque°
, (
zx_£ns‹_ªque°
));

175 
cuºít_ªque°
.
vÆue
 = -1;

176 
cuºít_ªque°
.
time
 = -1;

178 
	`Rïly
(
tid
, &
cuºít_ªque°
, (
zx_£ns‹_ªque°
));

183 
	}
}

187 
	$zx_£ns‹_£¸ë¨y_èsk
()

189 
zx_£ns‹_ªque°
 
ªque°
;

190 
zx_£ns‹_ªque°
 
ª∂y
;

192 
£ns‹_£rvî_tid
 = 
	`Cª©e
(
FIRST_USER_TASK_PRIORITY
, &
zx_£ns‹_courõr_èsk
);

194 
tid
;

198 
	`Re˚ive
(&
tid
, &
ªque°
, (request));

199 
ªque°
.
vÆue
 = 
tid
;

200 
	`Síd
(
£ns‹_£rvî_tid
, &
ªque°
, ‘eque°), &
ª∂y
, (reply));

201 
	`Rïly
(
tid
, &
ª∂y
, (reply));

204 
	`Exô
();

206 
	}
}

	@src/project/zx_project_shortest_path.c

8 
	~"zx_u¨t_io.h
"

9 
	~"zx_sy°em_ˇŒs.h
"

10 
	~"zx_hñ≥r.h
"

12 
	~"zx_¥oje˘_åack_d©a.h
"

13 
	~"zx_¥oje˘_åack_node.h
"

14 
	~"zx_¥oje˘_sh‹ã°_∑th.h
"

15 
	~"zx_¥oje˘_åack_£nsög.h
"

16 
	~"zx_¥oje˘_åack_fun˘i⁄s.h
"

17 
	~"zx_¥oje˘_ˇlibøti⁄.h
"

18 
	~"zx_¥oje˘_gøphics.h
"

20 
	$åack_ˇlc_sh‹ã°_∑th
(
åack_node
* 
åack
, 
sour˚_ödex
, 
de°ö©i⁄_ödex
, 
zx_tu∫out_°©e
 
tu∫out_°©es
[], * 
ªsu…_∑th
, * 
ªsu…_∑th_Àngth
, 
zx_waypoöt
 
waypoöts
[])

24 
∑th1_°ack
[
TRACK_MAX
];

25 
∑th1_di°™˚
[
TRACK_MAX
];

26 
∑th1_°ack_t›
 = -1;

28 
ªsu…
 = 0;

31 
°ack1_t›
;

33 i‡(
	`zx_sh‹ã°_∑th
–
sour˚_ödex
, 
de°ö©i⁄_ödex
, 
∑th1_°ack
, 
∑th1_di°™˚
, &
∑th1_°ack_t›
, 
åack
))

35 
°ack1_t›
 = 
∑th1_°ack_t›
;

38 
	`zx_put_°rög
("[", 
ªsu…_∑th
, 
ªsu…_∑th_Àngth
);

40  
∑th1_°ack_t›
 != -1 )

44 
	`zx_put_°rög
(
åack
[
∑th1_°ack
[
∑th1_°ack_t›
]].
«me
, 
ªsu…_∑th
, 
ªsu…_∑th_Àngth
);

45 
	`zx_put_°rög
(" ", 
ªsu…_∑th
, 
ªsu…_∑th_Àngth
);

46 
∑th1_°ack_t›
--;

50 
	`zx_put_°rög
("][", 
ªsu…_∑th
, 
ªsu…_∑th_Àngth
);

52 
	`zx_¥ï¨e_åack
–
tu∫out_°©es
, 
∑th1_°ack
, 
åack
, 
°ack1_t›
 );

54 
	`zx_gë_waypoöts
–
waypoöts
, 
∑th1_°ack
, 
∑th1_di°™˚
, 
åack
, 
°ack1_t›
 );

56 
wp_ödex
 = 0;

58 
wp_ödex
 < 
WAYPOINT_COUNT
)

60 i‡(
waypoöts
[
wp_ödex
].
node_id
 == -1)

65 
	`zx_put_°rög
("(", 
ªsu…_∑th
, 
ªsu…_∑th_Àngth
);

66 
	`zx_put_°rög
(
åack
[
waypoöts
[
wp_ödex
].
node_id
].
«me
, 
ªsu…_∑th
, 
ªsu…_∑th_Àngth
);

67 
	`zx_put_°rög
(";", 
ªsu…_∑th
, 
ªsu…_∑th_Àngth
);

68 
	`zx_put_numbî
(
waypoöts
[
wp_ödex
].
off£t
, 
ªsu…_∑th
, 
ªsu…_∑th_Àngth
);

69 
	`zx_put_°rög
(";", 
ªsu…_∑th
, 
ªsu…_∑th_Àngth
);

70 
	`zx_put_numbî
(
waypoöts
[
wp_ödex
].
di°™˚
, 
ªsu…_∑th
, 
ªsu…_∑th_Àngth
);

71 
	`zx_put_°rög
(")", 
ªsu…_∑th
, 
ªsu…_∑th_Àngth
);

73 
wp_ödex
++;

76 
	`zx_put_°rög
("]", 
ªsu…_∑th
, 
ªsu…_∑th_Àngth
);

78 
ªsu…
 = 1;

81  
ªsu…
;

82 
	}
}

85 
	$zx_gë_waypoöts
–
zx_waypoöt
 
waypoöts
[], 
∑th_°ack
[], 
∑th_di°™˚
[], 
åack_node
 
åack
[], 
∑th_°ack_t›
)

89 
œ°_ödex
 = -1;

91 
wp_ödex
 = 0;

92 
cuºít_di°™˚
 = 0;

94  
∑th_°ack_t›
 != -1 )

96 
œ°_di°™˚
;

97 i‡(
wp_ödex
 > 0)

99 
œ°_di°™˚
 = 
waypoöts
[
wp_ödex
 - 1].
di°™˚
;

101 
œ°_di°™˚
 = 0;

103 
cuºít_di°™˚
 = 
∑th_di°™˚
[
∑th_°ack
[
∑th_°ack_t›
]];

104 
ödex
 = 
∑th_°ack
[
∑th_°ack_t›
--];

106 i‡(
œ°_ödex
 != -1)

109 i‡(
åack
[
ödex
].
num
 =åack[
œ°_ödex
].num)

114 i‡(
åack
[
œ°_ödex
].
ty≥
 =
NODE_MERGE
 &&Åøck[
ödex
].ty≥ =
NODE_BRANCH
)

116 
waypoöts
[
wp_ödex
].
node_id
 = 
œ°_ödex
;

117 
waypoöts
[
wp_ödex
].
off£t
 = 
ªvî£_off£t
;

118 
waypoöts
[
wp_ödex
].
di°™˚
 = 
cuºít_di°™˚
 - 
œ°_di°™˚
;

119 
wp_ödex
++;

124 i‡(
åack
[
œ°_ödex
].
ty≥
 =
NODE_BRANCH
 &&Åøck[
ödex
].ty≥ =
NODE_MERGE
)

126 
waypoöts
[
wp_ödex
].
node_id
 = 
ödex
;

127 
waypoöts
[
wp_ödex
].
off£t
 = 
ªvî£_off£t
;

128 
waypoöts
[
wp_ödex
].
di°™˚
 = 
cuºít_di°™˚
 - 
œ°_di°™˚
;

129 
wp_ödex
++;

132 i‡(
åack
[
œ°_ödex
].
ty≥
 =
NODE_SENSOR
 &&Åøck[
ödex
].type == NODE_SENSOR)

134 i‡((
åack
[
œ°_ödex
].
num
 % 2 =0Ë&& (åack[œ°_ödex].num + 1 =åack[
ödex
].num))

136 
waypoöts
[
wp_ödex
].
node_id
 = 
œ°_ödex
;

137 
waypoöts
[
wp_ödex
].
off£t
 = 0;

138 
waypoöts
[
wp_ödex
].
di°™˚
 = 
cuºít_di°™˚
 - 
œ°_di°™˚
;

139 
wp_ödex
++;

141 i‡((
åack
[
ödex
].
num
 % 2 =0Ë&& (åack[ödex].num + 1 =åack[
œ°_ödex
].num))

143 
waypoöts
[
wp_ödex
].
node_id
 = 
œ°_ödex
;

144 
waypoöts
[
wp_ödex
].
off£t
 = 0;

145 
waypoöts
[
wp_ödex
].
di°™˚
 = 
cuºít_di°™˚
 - 
œ°_di°™˚
;

146 
wp_ödex
++;

151 
œ°_ödex
 = 
ödex
;

156 
waypoöts
[
wp_ödex
].
node_id
 = 
œ°_ödex
;

157 
waypoöts
[
wp_ödex
].
off£t
 = 0;

158 
waypoöts
[
wp_ödex
].
di°™˚
 = 
cuºít_di°™˚
;

159 
wp_ödex
++;

161 
i
;

162  
wp_ödex
 < 
WAYPOINT_COUNT
)

164 
waypoöts
[
wp_ödex
].
node_id
 = -1;

165 
waypoöts
[
wp_ödex
].
off£t
 = 0;

166 
waypoöts
[
wp_ödex
].
di°™˚
 = 0;

167 
wp_ödex
++;

169 
	}
}

174 
	$zx_¥ï¨e_åack
–
zx_tu∫out_°©e
 
tu∫out_°©es
[], 
∑th_°ack
[], 
åack_node
 
åack
[], 
∑th_°ack_t›
)

176  
∑th_°ack_t›
 != -1 )

178 
ödex
 = 
∑th_°ack
[
∑th_°ack_t›
--];

180 if–
åack
[
ödex
].
ty≥
 =
NODE_BRANCH
 )

182 
tu∫out_num
 = 
åack
[
ödex
].
num
;

184 if–
åack
[
ödex
].
edge
[
DIR_STRAIGHT
].
de°
->ödex =
∑th_°ack
[
∑th_°ack_t›
] )

187 if–
tu∫out_°©es
[
tu∫out_num
].
°©e
 !
TURNOUT_STATE_STRAIGHT
 )

190 
tu∫out_°©es
[
tu∫out_num
].
°©e
 = 
TURNOUT_STATE_STRAIGHT
;

191 
	`tu∫out_commô
(&
tu∫out_°©es
[
tu∫out_num
]);

194 if–
åack
[
ödex
].
edge
[
DIR_CURVED
].
de°
->ödex =
∑th_°ack
[
∑th_°ack_t›
] )

197 if–
tu∫out_°©es
[
tu∫out_num
].
°©e
 !
TURNOUT_STATE_CURVED
 )

200 
tu∫out_°©es
[
tu∫out_num
].
°©e
 = 
TURNOUT_STATE_CURVED
;

201 
	`tu∫out_commô
(&
tu∫out_°©es
[
tu∫out_num
]);

206 
	`zx_¥ötf
–
COM2
, "Oh No!! Branch Error ");

212 
	}
}

214 
	$zx_sh‹ã°_∑th_ã°
()

216 
sour˚_ödex
 = 
SENSOR_E14
;

217 
de°ö©i⁄_ödex
 = 
SENSOR_C10
;

220 
zx_tu∫out_°©e
 
tu∫out_°©es
 [
TURNOUT_BUF_SIZE
];

221 
	`tu∫out_öô
(
tu∫out_°©es
, 'c');

224 
åack_node
 
åack
 [
TRACK_MAX
];

225 
	`åack_öô
(
CURRENT_TRACK
, &
åack
[0]);

228 
∑th1_°ack
[
TRACK_MAX
];

229 
∑th1_di°™˚
[
TRACK_MAX
];

230 
∑th1_°ack_t›
 = -1;

232 
	`zx_sh‹ã°_∑th
–
sour˚_ödex
, 
de°ö©i⁄_ödex
, 
∑th1_°ack
, 
∑th1_di°™˚
, &
∑th1_°ack_t›
, 
åack
);

234 
°ack1_t›
 = 
∑th1_°ack_t›
;

235 
di°™˚_1
 = 0;

236 
	`zx_¥ötf
–
COM2
, "Printing Path 1\n");

237  
∑th1_°ack_t›
 != -1 )

239 
di°™˚_1
 = 
∑th1_di°™˚
[
∑th1_°ack
[
∑th1_°ack_t›
]];

241 
	`zx_¥ötf
–
COM2
, "-->Node:%†(%d)", 
åack
[
∑th1_°ack
[
∑th1_°ack_t›
]].
«me
, 
di°™˚_1
 );

242 
∑th1_°ack_t›
--;

247 
∑th2_°ack
[
TRACK_MAX
];

248 
∑th2_di°™˚
[
TRACK_MAX
];

249 
∑th2_°ack_t›
 = -1;

251 
	`zx_sh‹ã°_∑th
–
sour˚_ödex
, 
åack
[
de°ö©i⁄_ödex
].
ªvî£
->
num
, 
∑th2_°ack
, 
∑th2_di°™˚
, &
∑th2_°ack_t›
,Årack);

253 
di°™˚_2
 = 0;

254 
°ack2_t›
 = 
∑th2_°ack_t›
;

256 
	`zx_¥ötf
–
COM2
, "\n\nPrinting Path 2\n");

257  
∑th2_°ack_t›
!= -1 )

259 
di°™˚_2
 = 
∑th2_di°™˚
[
∑th2_°ack
[
∑th2_°ack_t›
]];

261 
	`zx_¥ötf
–
COM2
, "-->Node:%†(%d)", 
åack
[
∑th2_°ack
[
∑th2_°ack_t›
]].
«me
, 
di°™˚_2
 );

262 
∑th2_°ack_t›
--;

266 if–
di°™˚_1
 < 
di°™˚_2
 )

268 
	`zx_¥ötf
–
COM2
, "\n\nShortest isÖath 1 !!\n");

269 
	`zx_¥ï¨e_åack
–
tu∫out_°©es
, 
∑th1_°ack
, 
åack
, 
°ack1_t›
 );

273 
	`zx_¥ötf
–
COM2
, "\n\nShortest isÖath 2!!\n");

274 
	`zx_¥ï¨e_åack
–
tu∫out_°©es
, 
∑th2_°ack
, 
åack
, 
°ack2_t›
 );

277 
	`Exô
();

278 
	}
}

295 
	$zx_sh‹ã°_∑th
–
sour˚_ödex
, 
èrgë_ödex
, 
∑th_°ack
[], 
di°™˚
[], *
∑th_°ack_t›
, 
åack_node
 
åack
[])

298 *
∑th_°ack_t›
 = -1;

300 
i
 = 0;

303 
visôed
[
TRACK_MAX
];

304 
¥evious
[
TRACK_MAX
];

307 
numbî_of_nodes_visôed
 = 0;

309 
smÆÀ°_node_ödex
=-1;

310 
di°™˚_‰om_sour˚
=-1;

313  
i
=0; i< 
TRACK_MAX
; i++ )

315 
visôed
[
i
] = 
NO
;

316 
di°™˚
[
i
] = 
ZX_INFINITY
;

317 
¥evious
[
i
] = 
sour˚_ödex
;

320 
di°™˚
[
sour˚_ödex
] = 0;

322  
numbî_of_nodes_visôed
 < 
TRACK_MAX
 )

324 
smÆÀ°_node_ödex
 = 
	`föd_sh‹ã°_di°™˚_node
–
di°™˚
, 
visôed
 );

326 
visôed
[
smÆÀ°_node_ödex
] = 
YES
;

327 
numbî_of_nodes_visôed
++;

329 if–
smÆÀ°_node_ödex
 == -1 )

334  
FALSE
;

339 if–
smÆÀ°_node_ödex
 =
èrgë_ödex
 )

341 
∑th_Àngth
=0;

342 
cuºít_node_ödex
=0;

347  
∑th_Àngth
=0, 
cuºít_node_ödex
 = 
èrgë_ödex
;

348 
cuºít_node_ödex
 !
sour˚_ödex
; 
∑th_Àngth
++ )

351 
∑th_°ack
[
∑th_Àngth
] = 
cuºít_node_ödex
;

354 
cuºít_node_ödex
 = 
¥evious
[current_node_index];

357 
∑th_°ack
[
∑th_Àngth
] = 
sour˚_ödex
;

359 *
∑th_°ack_t›
 = 
∑th_Àngth
;

360  
TRUE
;

363 if–
åack
[
smÆÀ°_node_ödex
].
ty≥
 =
NODE_EXIT
 )

369 if–
åack
[
smÆÀ°_node_ödex
].
ty≥
 =
NODE_ENTER
 )

372 
√xt_node_ödex
;

373 
√xt_node_ödex
 = 
åack
[
smÆÀ°_node_ödex
].
edge
[
DIR_AHEAD
].
de°
->
ödex
;

374 
di°™˚_‰om_sour˚
 = 
di°™˚
[
smÆÀ°_node_ödex
] + 
åack
[smÆÀ°_node_ödex].
edge
[
DIR_STRAIGHT
].
di°
;

376 if–(
di°™˚_‰om_sour˚
 < 
di°™˚
[
√xt_node_ödex
]Ë&& (
visôed
[√xt_node_ödex] !
NO
))

378 
¥evious
[ 
√xt_node_ödex
 ] = 
smÆÀ°_node_ödex
;

379 
di°™˚
[ 
√xt_node_ödex
 ] = di°™˚[
smÆÀ°_node_ödex
] + 
åack
[smÆÀ°_node_ödex].
edge
[
DIR_AHEAD
].
di°
;

383 if–
åack
[
smÆÀ°_node_ödex
].
ty≥
 =
NODE_SENSOR
 )

386 
√xt_node_ödex
;

389 
√xt_node_ödex
 = 
åack
[
smÆÀ°_node_ödex
].
edge
[
DIR_AHEAD
].
de°
->
ödex
;

390 
di°™˚_‰om_sour˚
 = 
di°™˚
[
smÆÀ°_node_ödex
] + 
åack
[smÆÀ°_node_ödex].
edge
[
DIR_STRAIGHT
].
di°
;

392 if–
di°™˚_‰om_sour˚
 < 
di°™˚
[ 
√xt_node_ödex
] && 
visôed
[√xt_node_ödex] =
NO
)

394 
¥evious
[ 
√xt_node_ödex
 ] = 
smÆÀ°_node_ödex
;

395 
di°™˚
[ 
√xt_node_ödex
 ] = di°™˚[
smÆÀ°_node_ödex
] + 
åack
[smÆÀ°_node_ödex].
edge
[
DIR_AHEAD
].
di°
;

400 
√xt_node_ödex
 = 
åack
[
smÆÀ°_node_ödex
].
ªvî£
 ->
ödex
;

401 if–
di°™˚_‰om_sour˚
 < 
di°™˚
[ 
√xt_node_ödex
] && 
visôed
[√xt_node_ödex] =
NO
 )

403 
di°™˚
[ 
√xt_node_ödex
] = di°™˚[
smÆÀ°_node_ödex
];

404 
¥evious
[ 
√xt_node_ödex
] =Öªvious[
smÆÀ°_node_ödex
];

408 if–
åack
[
smÆÀ°_node_ödex
].
ty≥
 =
NODE_MERGE
 ||Åøck[smÆÀ°_node_ödex].ty≥ =
NODE_SENSOR
)

411 
√xt_node_ödex
;

412 
√xt_node_ödex
 = 
åack
[
smÆÀ°_node_ödex
].
edge
[
DIR_AHEAD
].
de°
->
ödex
;

413 
di°™˚_‰om_sour˚
 = 
di°™˚
[
smÆÀ°_node_ödex
] + 
åack
[smÆÀ°_node_ödex].
edge
[
DIR_STRAIGHT
].
di°
;

415 if–
di°™˚_‰om_sour˚
 < 
di°™˚
[ 
√xt_node_ödex
] && 
visôed
[√xt_node_ödex] =
NO
 )

417 
¥evious
[ 
√xt_node_ödex
 ] = 
smÆÀ°_node_ödex
;

418 
di°™˚
[ 
√xt_node_ödex
 ] = di°™˚[
smÆÀ°_node_ödex
] + 
åack
[smÆÀ°_node_ödex].
edge
[
DIR_AHEAD
].
di°
;

423 
√xt_node_ödex
 = 
åack
[
smÆÀ°_node_ödex
].
ªvî£
 ->
ödex
;

424 
di°™˚_‰om_sour˚
 = 
di°™˚
[
smÆÀ°_node_ödex
];

426 if–
di°™˚_‰om_sour˚
 < 
di°™˚
[ 
√xt_node_ödex
] && 
visôed
[√xt_node_ödex] =
NO
 )

428 
di°™˚
[ 
√xt_node_ödex
] = di°™˚[
smÆÀ°_node_ödex
];

429 
¥evious
[ 
√xt_node_ödex
] = 
smÆÀ°_node_ödex
;

433 if–
åack
[
smÆÀ°_node_ödex
].
ty≥
 =
NODE_BRANCH
 )

439 
åack_node
 *
√xt_åack_node
 = 
åack
[
smÆÀ°_node_ödex
].
edge
[
DIR_STRAIGHT
].
de°
;

440 
√xt_node_ödex
 = 
√xt_åack_node
->
ödex
;

441 
di°™˚_‰om_sour˚
 = 
di°™˚
[
smÆÀ°_node_ödex
] + 
åack
[smÆÀ°_node_ödex].
edge
[
DIR_STRAIGHT
].
di°
;

443 if–
di°™˚_‰om_sour˚
 < 
di°™˚
[ 
√xt_node_ödex
] )

445 
¥evious
[ 
√xt_node_ödex
 ] = 
smÆÀ°_node_ödex
;

446 
di°™˚
[ 
√xt_node_ödex
 ] = 
di°™˚_‰om_sour˚
;

450 
√xt_åack_node
 = 
åack
[
smÆÀ°_node_ödex
].
edge
[
DIR_CURVED
].
de°
;

451 
√xt_node_ödex
 = 
√xt_åack_node
->
ödex
;

452 
di°™˚_‰om_sour˚
 = 
di°™˚
[
smÆÀ°_node_ödex
] + 
åack
[smÆÀ°_node_ödex].
edge
[
DIR_CURVED
].
di°
;

454 if–
di°™˚_‰om_sour˚
 < 
di°™˚
[ 
√xt_node_ödex
] )

456 
¥evious
[ 
√xt_node_ödex
 ] = 
smÆÀ°_node_ödex
;

457 
di°™˚
[ 
√xt_node_ödex
 ] = 
di°™˚_‰om_sour˚
;

462 
	`zx_¥ötf
–
COM2
, "INVALID NODE TYPE" );

465  
FALSE
;

466 
	}
}

472 
	$zx_sh‹ã°_∑th
–
sour˚_ödex
, 
èrgë_ödex
, 
∑th_°ack
[], 
di°™˚
[], *
∑th_°ack_t›
, 
åack_node
 
åack
[])

476 *
∑th_°ack_t›
 = -1;

478 
i
 = 0;

481 
visôed
[
TRACK_MAX
];

482 
¥evious
[
TRACK_MAX
];

485 
numbî_of_nodes_visôed
 = 0;

487 
smÆÀ°_node_ödex
=-1;

488 
di°™˚_‰om_sour˚
=-1;

491  
i
=0; i< 
TRACK_MAX
; i++ )

493 
visôed
[
i
] = 
NO
;

494 
di°™˚
[
i
] = 
ZX_INFINITY
;

497 
di°™˚
[
sour˚_ödex
] = 0;

498 
ªsu…
 = 0;

500  
numbî_of_nodes_visôed
 < 
TRACK_MAX
 )

502 
smÆÀ°_node_ödex
 = 
	`föd_sh‹ã°_di°™˚_node
–
di°™˚
, 
visôed
 );

504 
visôed
[
smÆÀ°_node_ödex
] = 
YES
;

505 
numbî_of_nodes_visôed
++;

507 if–
smÆÀ°_node_ödex
 == -1 )

517 if–
smÆÀ°_node_ödex
 =
èrgë_ödex
 )

519 
∑th_Àngth
=0;

520 
cuºít_node_ödex
=0;

523  
∑th_Àngth
=0, 
cuºít_node_ödex
 = 
èrgë_ödex
;

524 
cuºít_node_ödex
 !
sour˚_ödex
; 
∑th_Àngth
++ )

527 
∑th_°ack
[
∑th_Àngth
] = 
cuºít_node_ödex
;

530 
cuºít_node_ödex
 = 
¥evious
[current_node_index];

532 
∑th_°ack
[
∑th_Àngth
] = 
sour˚_ödex
;

534 *
∑th_°ack_t›
 = 
∑th_Àngth
;

536 
ªsu…
 = 1;

541 if–
åack
[
smÆÀ°_node_ödex
].
ty≥
 =
NODE_EXIT
 )

547 if–
åack
[
smÆÀ°_node_ödex
].
ty≥
 =
NODE_SENSOR


548 || 
åack
[
smÆÀ°_node_ödex
].
ty≥
 =
NODE_MERGE


549 || 
åack
[
smÆÀ°_node_ödex
].
ty≥
 =
NODE_ENTER
 )

552 
√xt_node_ödex
 = 
åack
[
smÆÀ°_node_ödex
].
edge
[
DIR_AHEAD
].
de°
->
ödex
;

553 
di°™˚_‰om_sour˚
 = 
di°™˚
[
smÆÀ°_node_ödex
] + 
åack
[smÆÀ°_node_ödex].
edge
[
DIR_STRAIGHT
].
di°
;

555 if–
di°™˚_‰om_sour˚
 < 
di°™˚
[ 
√xt_node_ödex
] )

557 
¥evious
[ 
√xt_node_ödex
 ] = 
smÆÀ°_node_ödex
;

558 
di°™˚
[ 
√xt_node_ödex
 ] = di°™˚[
smÆÀ°_node_ödex
] + 
åack
[smÆÀ°_node_ödex].
edge
[
DIR_AHEAD
].
di°
;

562 if–
åack
[
smÆÀ°_node_ödex
].
ty≥
 =
NODE_BRANCH
 )

568 
åack_node
 *
√xt_åack_node
 = 
åack
[
smÆÀ°_node_ödex
].
edge
[
DIR_STRAIGHT
].
de°
;

569 
√xt_node_ödex
 = 
√xt_åack_node
->
ödex
;

570 
di°™˚_‰om_sour˚
 = 
di°™˚
[
smÆÀ°_node_ödex
] + 
åack
[smÆÀ°_node_ödex].
edge
[
DIR_STRAIGHT
].
di°
;

572 if–
di°™˚_‰om_sour˚
 < 
di°™˚
[ 
√xt_node_ödex
] )

574 
¥evious
[ 
√xt_node_ödex
 ] = 
smÆÀ°_node_ödex
;

575 
di°™˚
[ 
√xt_node_ödex
 ] = 
di°™˚_‰om_sour˚
;

578 
√xt_åack_node
 = 
åack
[
smÆÀ°_node_ödex
].
edge
[
DIR_CURVED
].
de°
;

579 
√xt_node_ödex
 = 
√xt_åack_node
->
ödex
;

580 
di°™˚_‰om_sour˚
 = 
di°™˚
[
smÆÀ°_node_ödex
] + 
åack
[smÆÀ°_node_ödex].
edge
[
DIR_CURVED
].
di°
;

582 if–
di°™˚_‰om_sour˚
 < 
di°™˚
[ 
√xt_node_ödex
] )

584 
¥evious
[ 
√xt_node_ödex
 ] = 
smÆÀ°_node_ödex
;

585 
di°™˚
[ 
√xt_node_ödex
 ] = 
di°™˚_‰om_sour˚
;

590 
	`zx_¥ötf
–
COM2
, "INVALID NODE TYPE" );

591 
ªsu…
 = 0;

594  
ªsu…
;

595 
	}
}

597 
	$föd_sh‹ã°_di°™˚_node
–
di°™˚
[], 
visôed
[])

599 
smÆÀ°_di°™˚
 = 
ZX_INFINITY
;

600 
smÆÀ°_ödex
 = -1;

601 
i
=0;

602  
i
=0 ; i< 
TRACK_MAX
; i++ )

604 if–(
visôed
[
i
] =
NO
Ë&& (
di°™˚
[i] < 
smÆÀ°_di°™˚
) )

606 
smÆÀ°_ödex
 = 
i
;

607 
smÆÀ°_di°™˚
 = 
di°™˚
[
i
];

610  
smÆÀ°_ödex
;

611 
	}
}

	@src/project/zx_project_track_data.c

3 
	~"zx_¥oje˘_åack_d©a.h
"

4 
	~"zx_mem‹y.h
"

6 
	$öô_åacka
(
åack_node
 *
åack
) {

8 
åack
[0].
ödex
 = 0;

9 
åack
[0].
«me
 = "A1";

10 
åack
[0].
ty≥
 = 
NODE_SENSOR
;

11 
åack
[0].
num
 = 0;

12 
åack
[0].
ªvî£
 = &track[1];

13 
åack
[0].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[102].edge[
DIR_STRAIGHT
];

14 
åack
[0].
edge
[
DIR_AHEAD
].
§c
 = &track[0];

15 
åack
[0].
edge
[
DIR_AHEAD
].
de°
 = &track[103];

16 
åack
[0].
edge
[
DIR_AHEAD
].
di°
 = 231;

18 
åack
[1].
ödex
 = 1;

19 
åack
[1].
«me
 = "A2";

20 
åack
[1].
ty≥
 = 
NODE_SENSOR
;

21 
åack
[1].
num
 = 1;

22 
åack
[1].
ªvî£
 = &track[0];

23 
åack
[1].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[132].edge[DIR_AHEAD];

24 
åack
[1].
edge
[
DIR_AHEAD
].
§c
 = &track[1];

25 
åack
[1].
edge
[
DIR_AHEAD
].
de°
 = &track[133];

26 
åack
[1].
edge
[
DIR_AHEAD
].
di°
 = 504;

28 
åack
[2].
ödex
 = 2;

29 
åack
[2].
«me
 = "A3";

30 
åack
[2].
ty≥
 = 
NODE_SENSOR
;

31 
åack
[2].
num
 = 2;

32 
åack
[2].
ªvî£
 = &track[3];

33 
åack
[2].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[107].edge[DIR_AHEAD];

34 
åack
[2].
edge
[
DIR_AHEAD
].
§c
 = &track[2];

35 
åack
[2].
edge
[
DIR_AHEAD
].
de°
 = &track[106];

36 
åack
[2].
edge
[
DIR_AHEAD
].
di°
 = 43;

38 
åack
[3].
ödex
 = 3;

39 
åack
[3].
«me
 = "A4";

40 
åack
[3].
ty≥
 = 
NODE_SENSOR
;

41 
åack
[3].
num
 = 3;

42 
åack
[3].
ªvî£
 = &track[2];

43 
åack
[3].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[30].edge[DIR_AHEAD];

44 
åack
[3].
edge
[
DIR_AHEAD
].
§c
 = &track[3];

45 
åack
[3].
edge
[
DIR_AHEAD
].
de°
 = &track[31];

46 
åack
[3].
edge
[
DIR_AHEAD
].
di°
 = 437;

48 
åack
[4].
ödex
 = 4;

49 
åack
[4].
«me
 = "A5";

50 
åack
[4].
ty≥
 = 
NODE_SENSOR
;

51 
åack
[4].
num
 = 4;

52 
åack
[4].
ªvî£
 = &track[5];

53 
åack
[4].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[84].edge[
DIR_STRAIGHT
];

54 
åack
[4].
edge
[
DIR_AHEAD
].
§c
 = &track[4];

55 
åack
[4].
edge
[
DIR_AHEAD
].
de°
 = &track[85];

56 
åack
[4].
edge
[
DIR_AHEAD
].
di°
 = 231;

58 
åack
[5].
ödex
 = 5;

59 
åack
[5].
«me
 = "A6";

60 
åack
[5].
ty≥
 = 
NODE_SENSOR
;

61 
åack
[5].
num
 = 5;

62 
åack
[5].
ªvî£
 = &track[4];

63 
åack
[5].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[24].edge[DIR_AHEAD];

64 
åack
[5].
edge
[
DIR_AHEAD
].
§c
 = &track[5];

65 
åack
[5].
edge
[
DIR_AHEAD
].
de°
 = &track[25];

66 
åack
[5].
edge
[
DIR_AHEAD
].
di°
 = 642;

68 
åack
[6].
ödex
 = 6;

69 
åack
[6].
«me
 = "A7";

70 
åack
[6].
ty≥
 = 
NODE_SENSOR
;

71 
åack
[6].
num
 = 6;

72 
åack
[6].
ªvî£
 = &track[7];

73 
åack
[6].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[26].edge[DIR_AHEAD];

74 
åack
[6].
edge
[
DIR_AHEAD
].
§c
 = &track[6];

75 
åack
[6].
edge
[
DIR_AHEAD
].
de°
 = &track[27];

76 
åack
[6].
edge
[
DIR_AHEAD
].
di°
 = 470;

78 
åack
[7].
ödex
 = 7;

79 
åack
[7].
«me
 = "A8";

80 
åack
[7].
ty≥
 = 
NODE_SENSOR
;

81 
åack
[7].
num
 = 7;

82 
åack
[7].
ªvî£
 = &track[6];

83 
åack
[7].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[82].edge[
DIR_CURVED
];

84 
åack
[7].
edge
[
DIR_AHEAD
].
§c
 = &track[7];

85 
åack
[7].
edge
[
DIR_AHEAD
].
de°
 = &track[83];

86 
åack
[7].
edge
[
DIR_AHEAD
].
di°
 = 229;

88 
åack
[8].
ödex
 = 8;

89 
åack
[8].
«me
 = "A9";

90 
åack
[8].
ty≥
 = 
NODE_SENSOR
;

91 
åack
[8].
num
 = 8;

92 
åack
[8].
ªvî£
 = &track[9];

93 
åack
[8].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[22].edge[DIR_AHEAD];

94 
åack
[8].
edge
[
DIR_AHEAD
].
§c
 = &track[8];

95 
åack
[8].
edge
[
DIR_AHEAD
].
de°
 = &track[23];

96 
åack
[8].
edge
[
DIR_AHEAD
].
di°
 = 289;

98 
åack
[9].
ödex
 = 9;

99 
åack
[9].
«me
 = "A10";

100 
åack
[9].
ty≥
 = 
NODE_SENSOR
;

101 
åack
[9].
num
 = 9;

102 
åack
[9].
ªvî£
 = &track[8];

103 
åack
[9].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[80].edge[
DIR_CURVED
];

104 
åack
[9].
edge
[
DIR_AHEAD
].
§c
 = &track[9];

105 
åack
[9].
edge
[
DIR_AHEAD
].
de°
 = &track[81];

106 
åack
[9].
edge
[
DIR_AHEAD
].
di°
 = 229;

108 
åack
[10].
ödex
 = 10;

109 
åack
[10].
«me
 = "A11";

110 
åack
[10].
ty≥
 = 
NODE_SENSOR
;

111 
åack
[10].
num
 = 10;

112 
åack
[10].
ªvî£
 = &track[11];

113 
åack
[10].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[80].edge[
DIR_STRAIGHT
];

114 
åack
[10].
edge
[
DIR_AHEAD
].
§c
 = &track[10];

115 
åack
[10].
edge
[
DIR_AHEAD
].
de°
 = &track[81];

116 
åack
[10].
edge
[
DIR_AHEAD
].
di°
 = 518;

118 
åack
[11].
ödex
 = 11;

119 
åack
[11].
«me
 = "A12";

120 
åack
[11].
ty≥
 = 
NODE_SENSOR
;

121 
åack
[11].
num
 = 11;

122 
åack
[11].
ªvî£
 = &track[10];

123 
åack
[11].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[138].edge[DIR_AHEAD];

124 
åack
[11].
edge
[
DIR_AHEAD
].
§c
 = &track[11];

125 
åack
[11].
edge
[
DIR_AHEAD
].
de°
 = &track[139];

126 
åack
[11].
edge
[
DIR_AHEAD
].
di°
 = 43;

129 
åack
[12].
ödex
 = 12;

130 
åack
[12].
«me
 = "A13";

131 
åack
[12].
ty≥
 = 
NODE_SENSOR
;

132 
åack
[12].
num
 = 12;

133 
åack
[12].
ªvî£
 = &track[13];

134 
åack
[12].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[86].edge[
DIR_CURVED
];

135 
åack
[12].
edge
[
DIR_AHEAD
].
§c
 = &track[12];

136 
åack
[12].
edge
[
DIR_AHEAD
].
de°
 = &track[87];

137 
åack
[12].
edge
[
DIR_AHEAD
].
di°
 = 236;

139 
åack
[13].
ödex
 = 13;

140 
åack
[13].
«me
 = "A14";

141 
åack
[13].
ty≥
 = 
NODE_SENSOR
;

142 
åack
[13].
num
 = 13;

143 
åack
[13].
ªvî£
 = &track[12];

144 
åack
[13].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[130].edge[DIR_AHEAD];

145 
åack
[13].
edge
[
DIR_AHEAD
].
§c
 = &track[13];

146 
åack
[13].
edge
[
DIR_AHEAD
].
de°
 = &track[131];

147 
åack
[13].
edge
[
DIR_AHEAD
].
di°
 = 325;

150 
åack
[14].
ödex
 = 14;

151 
åack
[14].
«me
 = "A15";

152 
åack
[14].
ty≥
 = 
NODE_SENSOR
;

153 
åack
[14].
num
 = 14;

154 
åack
[14].
ªvî£
 = &track[15];

155 
åack
[14].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[134].edge[DIR_AHEAD];

156 
åack
[14].
edge
[
DIR_AHEAD
].
§c
 = &track[14];

157 
åack
[14].
edge
[
DIR_AHEAD
].
de°
 = &track[135];

158 
åack
[14].
edge
[
DIR_AHEAD
].
di°
 = 144;

161 
åack
[15].
ödex
 = 15;

162 
åack
[15].
«me
 = "A16";

163 
åack
[15].
ty≥
 = 
NODE_SENSOR
;

164 
åack
[15].
num
 = 15;

165 
åack
[15].
ªvî£
 = &track[14];

166 
åack
[15].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[86].edge[
DIR_STRAIGHT
];

167 
åack
[15].
edge
[
DIR_AHEAD
].
§c
 = &track[15];

168 
åack
[15].
edge
[
DIR_AHEAD
].
de°
 = &track[87];

169 
åack
[15].
edge
[
DIR_AHEAD
].
di°
 = 417;

171 
åack
[16].
«me
 = "B1";

172 
åack
[16].
ödex
 = 16;

173 
åack
[16].
ty≥
 = 
NODE_SENSOR
;

174 
åack
[16].
num
 = 16;

175 
åack
[16].
ªvî£
 = &track[17];

176 
åack
[16].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[60].edge[DIR_AHEAD];

177 
åack
[16].
edge
[
DIR_AHEAD
].
§c
 = &track[16];

178 
åack
[16].
edge
[
DIR_AHEAD
].
de°
 = &track[61];

179 
åack
[16].
edge
[
DIR_AHEAD
].
di°
 = 404;

181 
åack
[17].
ödex
 = 17;

182 
åack
[17].
«me
 = "B2";

183 
åack
[17].
ty≥
 = 
NODE_SENSOR
;

184 
åack
[17].
num
 = 17;

185 
åack
[17].
ªvî£
 = &track[16];

186 
åack
[17].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[110].edge[
DIR_STRAIGHT
];

187 
åack
[17].
edge
[
DIR_AHEAD
].
§c
 = &track[17];

188 
åack
[17].
edge
[
DIR_AHEAD
].
de°
 = &track[111];

189 
åack
[17].
edge
[
DIR_AHEAD
].
di°
 = 231;

191 
åack
[18].
ödex
 = 18;

192 
åack
[18].
«me
 = "B3";

193 
åack
[18].
ty≥
 = 
NODE_SENSOR
;

194 
åack
[18].
num
 = 18;

195 
åack
[18].
ªvî£
 = &track[19];

196 
åack
[18].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[32].edge[DIR_AHEAD];

197 
åack
[18].
edge
[
DIR_AHEAD
].
§c
 = &track[18];

198 
åack
[18].
edge
[
DIR_AHEAD
].
de°
 = &track[33];

199 
åack
[18].
edge
[
DIR_AHEAD
].
di°
 = 201;

201 
åack
[19].
ödex
 = 19;

202 
åack
[19].
«me
 = "B4";

203 
åack
[19].
ty≥
 = 
NODE_SENSOR
;

204 
åack
[19].
num
 = 19;

205 
åack
[19].
ªvî£
 = &track[18];

206 
åack
[19].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[110].edge[
DIR_CURVED
];

207 
åack
[19].
edge
[
DIR_AHEAD
].
§c
 = &track[19];

208 
åack
[19].
edge
[
DIR_AHEAD
].
de°
 = &track[111];

209 
åack
[19].
edge
[
DIR_AHEAD
].
di°
 = 239;

211 
åack
[20].
ödex
 = 20;

212 
åack
[20].
«me
 = "B5";

213 
åack
[20].
ty≥
 = 
NODE_SENSOR
;

214 
åack
[20].
num
 = 20;

215 
åack
[20].
ªvî£
 = &track[21];

216 
åack
[20].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[51].edge[DIR_AHEAD];

217 
åack
[20].
edge
[
DIR_AHEAD
].
§c
 = &track[20];

218 
åack
[20].
edge
[
DIR_AHEAD
].
de°
 = &track[50];

219 
åack
[20].
edge
[
DIR_AHEAD
].
di°
 = 404;

221 
åack
[21].
ödex
 = 21;

222 
åack
[21].
«me
 = "B6";

223 
åack
[21].
ty≥
 = 
NODE_SENSOR
;

224 
åack
[21].
num
 = 21;

225 
åack
[21].
ªvî£
 = &track[20];

226 
åack
[21].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[104].edge[
DIR_STRAIGHT
];

227 
åack
[21].
edge
[
DIR_AHEAD
].
§c
 = &track[21];

228 
åack
[21].
edge
[
DIR_AHEAD
].
de°
 = &track[105];

229 
åack
[21].
edge
[
DIR_AHEAD
].
di°
 = 231;

231 
åack
[22].
ödex
 = 22;

232 
åack
[22].
«me
 = "B7";

233 
åack
[22].
ty≥
 = 
NODE_SENSOR
;

234 
åack
[22].
num
 = 22;

235 
åack
[22].
ªvî£
 = &track[23];

236 
åack
[22].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[8].edge[DIR_AHEAD];

237 
åack
[22].
edge
[
DIR_AHEAD
].
§c
 = &track[22];

238 
åack
[22].
edge
[
DIR_AHEAD
].
de°
 = &track[9];

239 
åack
[22].
edge
[
DIR_AHEAD
].
di°
 = 289;

241 
åack
[23].
ödex
 = 23;

242 
åack
[23].
«me
 = "B8";

243 
åack
[23].
ty≥
 = 
NODE_SENSOR
;

244 
åack
[23].
num
 = 23;

245 
åack
[23].
ªvî£
 = &track[22];

246 
åack
[23].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[136].edge[DIR_AHEAD];

247 
åack
[23].
edge
[
DIR_AHEAD
].
§c
 = &track[23];

248 
åack
[23].
edge
[
DIR_AHEAD
].
de°
 = &track[137];

249 
åack
[23].
edge
[
DIR_AHEAD
].
di°
 = 43;

251 
åack
[24].
ödex
 = 24;

252 
åack
[24].
«me
 = "B9";

253 
åack
[24].
ty≥
 = 
NODE_SENSOR
;

254 
åack
[24].
num
 = 24;

255 
åack
[24].
ªvî£
 = &track[25];

256 
åack
[24].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[5].edge[DIR_AHEAD];

257 
åack
[24].
edge
[
DIR_AHEAD
].
§c
 = &track[24];

258 
åack
[24].
edge
[
DIR_AHEAD
].
de°
 = &track[4];

259 
åack
[24].
edge
[
DIR_AHEAD
].
di°
 = 642;

261 
åack
[25].
ödex
 = 25;

262 
åack
[25].
«me
 = "B10";

263 
åack
[25].
ty≥
 = 
NODE_SENSOR
;

264 
åack
[25].
num
 = 25;

265 
åack
[25].
ªvî£
 = &track[24];

266 
åack
[25].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[140].edge[DIR_AHEAD];

267 
åack
[25].
edge
[
DIR_AHEAD
].
§c
 = &track[25];

268 
åack
[25].
edge
[
DIR_AHEAD
].
de°
 = &track[141];

269 
åack
[25].
edge
[
DIR_AHEAD
].
di°
 = 50;

271 
åack
[26].
ödex
 = 26;

272 
åack
[26].
«me
 = "B11";

273 
åack
[26].
ty≥
 = 
NODE_SENSOR
;

274 
åack
[26].
num
 = 26;

275 
åack
[26].
ªvî£
 = &track[27];

276 
åack
[26].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[6].edge[DIR_AHEAD];

277 
åack
[26].
edge
[
DIR_AHEAD
].
§c
 = &track[26];

278 
åack
[26].
edge
[
DIR_AHEAD
].
de°
 = &track[7];

279 
åack
[26].
edge
[
DIR_AHEAD
].
di°
 = 470;

281 
åack
[27].
ödex
 = 27;

282 
åack
[27].
«me
 = "B12";

283 
åack
[27].
ty≥
 = 
NODE_SENSOR
;

284 
åack
[27].
num
 = 27;

285 
åack
[27].
ªvî£
 = &track[26];

286 
åack
[27].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[142].edge[DIR_AHEAD];

287 
åack
[27].
edge
[
DIR_AHEAD
].
§c
 = &track[27];

288 
åack
[27].
edge
[
DIR_AHEAD
].
de°
 = &track[143];

289 
åack
[27].
edge
[
DIR_AHEAD
].
di°
 = 50;

291 
åack
[28].
ödex
 = 28;

292 
åack
[28].
«me
 = "B13";

293 
åack
[28].
ty≥
 = 
NODE_SENSOR
;

294 
åack
[28].
num
 = 28;

295 
åack
[28].
ªvî£
 = &track[29];

296 
åack
[28].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[118].edge[
DIR_CURVED
];

297 
åack
[28].
edge
[
DIR_AHEAD
].
§c
 = &track[28];

298 
åack
[28].
edge
[
DIR_AHEAD
].
de°
 = &track[119];

299 
åack
[28].
edge
[
DIR_AHEAD
].
di°
 = 239;

301 
åack
[29].
ödex
 = 29;

302 
åack
[29].
«me
 = "B14";

303 
åack
[29].
ty≥
 = 
NODE_SENSOR
;

304 
åack
[29].
num
 = 29;

305 
åack
[29].
ªvî£
 = &track[28];

306 
åack
[29].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[62].edge[DIR_AHEAD];

307 
åack
[29].
edge
[
DIR_AHEAD
].
§c
 = &track[29];

308 
åack
[29].
edge
[
DIR_AHEAD
].
de°
 = &track[63];

309 
åack
[29].
edge
[
DIR_AHEAD
].
di°
 = 201;

311 
åack
[30].
ödex
 = 30;

312 
åack
[30].
«me
 = "B15";

313 
åack
[30].
ty≥
 = 
NODE_SENSOR
;

314 
åack
[30].
num
 = 30;

315 
åack
[30].
ªvî£
 = &track[31];

316 
åack
[30].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[3].edge[DIR_AHEAD];

317 
åack
[30].
edge
[
DIR_AHEAD
].
§c
 = &track[30];

318 
åack
[30].
edge
[
DIR_AHEAD
].
de°
 = &track[2];

319 
åack
[30].
edge
[
DIR_AHEAD
].
di°
 = 437;

321 
åack
[31].
ödex
 = 31;

322 
åack
[31].
«me
 = "B16";

323 
åack
[31].
ty≥
 = 
NODE_SENSOR
;

324 
åack
[31].
num
 = 31;

325 
åack
[31].
ªvî£
 = &track[30];

326 
åack
[31].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[109].edge[DIR_AHEAD];

327 
åack
[31].
edge
[
DIR_AHEAD
].
§c
 = &track[31];

328 
åack
[31].
edge
[
DIR_AHEAD
].
de°
 = &track[108];

329 
åack
[31].
edge
[
DIR_AHEAD
].
di°
 = 50;

331 
åack
[32].
ödex
 = 32;

332 
åack
[32].
«me
 = "C1";

333 
åack
[32].
ty≥
 = 
NODE_SENSOR
;

334 
åack
[32].
num
 = 32;

335 
åack
[32].
ªvî£
 = &track[33];

336 
åack
[32].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[18].edge[DIR_AHEAD];

337 
åack
[32].
edge
[
DIR_AHEAD
].
§c
 = &track[32];

338 
åack
[32].
edge
[
DIR_AHEAD
].
de°
 = &track[19];

339 
åack
[32].
edge
[
DIR_AHEAD
].
di°
 = 201;

341 
åack
[33].
ödex
 = 33;

342 
åack
[33].
«me
 = "C2";

343 
åack
[33].
ty≥
 = 
NODE_SENSOR
;

344 
åack
[33].
num
 = 33;

345 
åack
[33].
ªvî£
 = &track[32];

346 
åack
[33].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[116].edge[
DIR_CURVED
];

347 
åack
[33].
edge
[
DIR_AHEAD
].
§c
 = &track[33];

348 
åack
[33].
edge
[
DIR_AHEAD
].
de°
 = &track[117];

349 
åack
[33].
edge
[
DIR_AHEAD
].
di°
 = 246;

351 
åack
[34].
ödex
 = 34;

352 
åack
[34].
«me
 = "C3";

353 
åack
[34].
ty≥
 = 
NODE_SENSOR
;

354 
åack
[34].
num
 = 34;

355 
åack
[34].
ªvî£
 = &track[35];

356 
åack
[34].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[128].edge[DIR_AHEAD];

357 
åack
[34].
edge
[
DIR_AHEAD
].
§c
 = &track[34];

358 
åack
[34].
edge
[
DIR_AHEAD
].
de°
 = &track[129];

359 
åack
[34].
edge
[
DIR_AHEAD
].
di°
 = 514;

361 
åack
[35].
ödex
 = 35;

362 
åack
[35].
«me
 = "C4";

363 
åack
[35].
ty≥
 = 
NODE_SENSOR
;

364 
åack
[35].
num
 = 35;

365 
åack
[35].
ªvî£
 = &track[34];

366 
åack
[35].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[88].edge[
DIR_STRAIGHT
];

367 
åack
[35].
edge
[
DIR_AHEAD
].
§c
 = &track[35];

368 
åack
[35].
edge
[
DIR_AHEAD
].
de°
 = &track[89];

369 
åack
[35].
edge
[
DIR_AHEAD
].
di°
 = 239;

371 
åack
[36].
ödex
 = 36;

372 
åack
[36].
«me
 = "C5";

373 
åack
[36].
ty≥
 = 
NODE_SENSOR
;

374 
åack
[36].
num
 = 36;

375 
åack
[36].
ªvî£
 = &track[37];

376 
åack
[36].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[91].edge[DIR_AHEAD];

377 
åack
[36].
edge
[
DIR_AHEAD
].
§c
 = &track[36];

378 
åack
[36].
edge
[
DIR_AHEAD
].
de°
 = &track[90];

379 
åack
[36].
edge
[
DIR_AHEAD
].
di°
 = 61;

381 
åack
[37].
ödex
 = 37;

382 
åack
[37].
«me
 = "C6";

383 
åack
[37].
ty≥
 = 
NODE_SENSOR
;

384 
åack
[37].
num
 = 37;

385 
åack
[37].
ªvî£
 = &track[36];

386 
åack
[37].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[108].edge[
DIR_STRAIGHT
];

387 
åack
[37].
edge
[
DIR_AHEAD
].
§c
 = &track[37];

388 
åack
[37].
edge
[
DIR_AHEAD
].
de°
 = &track[109];

389 
åack
[37].
edge
[
DIR_AHEAD
].
di°
 = 433;

391 
åack
[38].
ödex
 = 38;

392 
åack
[38].
«me
 = "C7";

393 
åack
[38].
ty≥
 = 
NODE_SENSOR
;

394 
åack
[38].
num
 = 38;

395 
åack
[38].
ªvî£
 = &track[39];

396 
åack
[38].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[114].edge[
DIR_STRAIGHT
];

397 
åack
[38].
edge
[
DIR_AHEAD
].
§c
 = &track[38];

398 
åack
[38].
edge
[
DIR_AHEAD
].
de°
 = &track[115];

399 
åack
[38].
edge
[
DIR_AHEAD
].
di°
 = 231;

401 
åack
[39].
ödex
 = 39;

402 
åack
[39].
«me
 = "C8";

403 
åack
[39].
ty≥
 = 
NODE_SENSOR
;

404 
åack
[39].
num
 = 39;

405 
åack
[39].
ªvî£
 = &track[38];

406 
åack
[39].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[85].edge[DIR_AHEAD];

407 
åack
[39].
edge
[
DIR_AHEAD
].
§c
 = &track[39];

408 
åack
[39].
edge
[
DIR_AHEAD
].
de°
 = &track[84];

409 
åack
[39].
edge
[
DIR_AHEAD
].
di°
 = 128;

411 
åack
[40].
ödex
 = 40;

412 
åack
[40].
«me
 = "C9";

413 
åack
[40].
ty≥
 = 
NODE_SENSOR
;

414 
åack
[40].
num
 = 40;

415 
åack
[40].
ªvî£
 = &track[41];

416 
åack
[40].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[108].edge[
DIR_CURVED
];

417 
åack
[40].
edge
[
DIR_AHEAD
].
§c
 = &track[40];

418 
åack
[40].
edge
[
DIR_AHEAD
].
de°
 = &track[109];

419 
åack
[40].
edge
[
DIR_AHEAD
].
di°
 = 326;

421 
åack
[41].
ödex
 = 41;

422 
åack
[41].
«me
 = "C10";

423 
åack
[41].
ty≥
 = 
NODE_SENSOR
;

424 
åack
[41].
num
 = 41;

425 
åack
[41].
ªvî£
 = &track[40];

426 
åack
[41].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[111].edge[DIR_AHEAD];

427 
åack
[41].
edge
[
DIR_AHEAD
].
§c
 = &track[41];

428 
åack
[41].
edge
[
DIR_AHEAD
].
de°
 = &track[110];

429 
åack
[41].
edge
[
DIR_AHEAD
].
di°
 = 128;

431 
åack
[42].
ödex
 = 42;

432 
åack
[42].
«me
 = "C11";

433 
åack
[42].
ty≥
 = 
NODE_SENSOR
;

434 
åack
[42].
num
 = 42;

435 
åack
[42].
ªvî£
 = &track[43];

436 
åack
[42].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[105].edge[DIR_AHEAD];

437 
åack
[42].
edge
[
DIR_AHEAD
].
§c
 = &track[42];

438 
åack
[42].
edge
[
DIR_AHEAD
].
de°
 = &track[104];

439 
åack
[42].
edge
[
DIR_AHEAD
].
di°
 = 120;

441 
åack
[43].
ödex
 = 43;

442 
åack
[43].
«me
 = "C12";

443 
åack
[43].
ty≥
 = 
NODE_SENSOR
;

444 
åack
[43].
num
 = 43;

445 
åack
[43].
ªvî£
 = &track[42];

446 
åack
[43].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[106].edge[
DIR_CURVED
];

447 
åack
[43].
edge
[
DIR_AHEAD
].
§c
 = &track[43];

448 
åack
[43].
edge
[
DIR_AHEAD
].
de°
 = &track[107];

449 
åack
[43].
edge
[
DIR_AHEAD
].
di°
 = 333;

451 
åack
[44].
ödex
 = 44;

452 
åack
[44].
«me
 = "C13";

453 
åack
[44].
ty≥
 = 
NODE_SENSOR
;

454 
åack
[44].
num
 = 44;

455 
åack
[44].
ªvî£
 = &track[45];

456 
åack
[44].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[71].edge[DIR_AHEAD];

457 
åack
[44].
edge
[
DIR_AHEAD
].
§c
 = &track[44];

458 
åack
[44].
edge
[
DIR_AHEAD
].
de°
 = &track[70];

459 
åack
[44].
edge
[
DIR_AHEAD
].
di°
 = 875;

461 
åack
[45].
ödex
 = 45;

462 
åack
[45].
«me
 = "C14";

463 
åack
[45].
ty≥
 = 
NODE_SENSOR
;

464 
åack
[45].
num
 = 45;

465 
åack
[45].
ªvî£
 = &track[44];

466 
åack
[45].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[101].edge[DIR_AHEAD];

467 
åack
[45].
edge
[
DIR_AHEAD
].
§c
 = &track[45];

468 
åack
[45].
edge
[
DIR_AHEAD
].
de°
 = &track[100];

469 
åack
[45].
edge
[
DIR_AHEAD
].
di°
 = 43;

471 
åack
[46].
ödex
 = 46;

472 
åack
[46].
«me
 = "C15";

473 
åack
[46].
ty≥
 = 
NODE_SENSOR
;

474 
åack
[46].
num
 = 46;

475 
åack
[46].
ªvî£
 = &track[47];

476 
åack
[46].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[58].edge[DIR_AHEAD];

477 
åack
[46].
edge
[
DIR_AHEAD
].
§c
 = &track[46];

478 
åack
[46].
edge
[
DIR_AHEAD
].
de°
 = &track[59];

479 
åack
[46].
edge
[
DIR_AHEAD
].
di°
 = 404;

481 
åack
[47].
ödex
 = 47;

482 
åack
[47].
«me
 = "C16";

483 
åack
[47].
ty≥
 = 
NODE_SENSOR
;

484 
åack
[47].
num
 = 47;

485 
åack
[47].
ªvî£
 = &track[46];

486 
åack
[47].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[90].edge[
DIR_STRAIGHT
];

487 
åack
[47].
edge
[
DIR_AHEAD
].
§c
 = &track[47];

488 
åack
[47].
edge
[
DIR_AHEAD
].
de°
 = &track[91];

489 
åack
[47].
edge
[
DIR_AHEAD
].
di°
 = 239;

491 
åack
[48].
ödex
 = 48;

492 
åack
[48].
«me
 = "D1";

493 
åack
[48].
ty≥
 = 
NODE_SENSOR
;

494 
åack
[48].
num
 = 48;

495 
åack
[48].
ªvî£
 = &track[49];

496 
åack
[48].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[120].edge[
DIR_CURVED
];

497 
åack
[48].
edge
[
DIR_AHEAD
].
§c
 = &track[48];

498 
åack
[48].
edge
[
DIR_AHEAD
].
de°
 = &track[121];

499 
åack
[48].
edge
[
DIR_AHEAD
].
di°
 = 246;

501 
åack
[49].
ödex
 = 49;

502 
åack
[49].
«me
 = "D2";

503 
åack
[49].
ty≥
 = 
NODE_SENSOR
;

504 
åack
[49].
num
 = 49;

505 
åack
[49].
ªvî£
 = &track[48];

506 
åack
[49].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[66].edge[DIR_AHEAD];

507 
åack
[49].
edge
[
DIR_AHEAD
].
§c
 = &track[49];

508 
åack
[49].
edge
[
DIR_AHEAD
].
de°
 = &track[67];

509 
åack
[49].
edge
[
DIR_AHEAD
].
di°
 = 201;

511 
åack
[50].
ödex
 = 50;

512 
åack
[50].
«me
 = "D3";

513 
åack
[50].
ty≥
 = 
NODE_SENSOR
;

514 
åack
[50].
num
 = 50;

515 
åack
[50].
ªvî£
 = &track[51];

516 
åack
[50].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[98].edge[
DIR_STRAIGHT
];

517 
åack
[50].
edge
[
DIR_AHEAD
].
§c
 = &track[50];

518 
åack
[50].
edge
[
DIR_AHEAD
].
de°
 = &track[99];

519 
åack
[50].
edge
[
DIR_AHEAD
].
di°
 = 239;

521 
åack
[51].
ödex
 = 51;

522 
åack
[51].
«me
 = "D4";

523 
åack
[51].
ty≥
 = 
NODE_SENSOR
;

524 
åack
[51].
num
 = 51;

525 
åack
[51].
ªvî£
 = &track[50];

526 
åack
[51].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[20].edge[DIR_AHEAD];

527 
åack
[51].
edge
[
DIR_AHEAD
].
§c
 = &track[51];

528 
åack
[51].
edge
[
DIR_AHEAD
].
de°
 = &track[21];

529 
åack
[51].
edge
[
DIR_AHEAD
].
di°
 = 404;

531 
åack
[52].
ödex
 = 52;

532 
åack
[52].
«me
 = "D5";

533 
åack
[52].
ty≥
 = 
NODE_SENSOR
;

534 
åack
[52].
num
 = 52;

535 
åack
[52].
ªvî£
 = &track[53];

536 
åack
[52].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[68].edge[DIR_AHEAD];

537 
åack
[52].
edge
[
DIR_AHEAD
].
§c
 = &track[52];

538 
åack
[52].
edge
[
DIR_AHEAD
].
de°
 = &track[69];

539 
åack
[52].
edge
[
DIR_AHEAD
].
di°
 = 376;

541 
åack
[53].
ödex
 = 53;

542 
åack
[53].
«me
 = "D6";

543 
åack
[53].
ty≥
 = 
NODE_SENSOR
;

544 
åack
[53].
num
 = 53;

545 
åack
[53].
ªvî£
 = &track[52];

546 
åack
[53].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[96].edge[
DIR_CURVED
];

547 
åack
[53].
edge
[
DIR_AHEAD
].
§c
 = &track[53];

548 
åack
[53].
edge
[
DIR_AHEAD
].
de°
 = &track[97];

549 
åack
[53].
edge
[
DIR_AHEAD
].
di°
 = 239;

551 
åack
[54].
ödex
 = 54;

552 
åack
[54].
«me
 = "D7";

553 
åack
[54].
ty≥
 = 
NODE_SENSOR
;

554 
åack
[54].
num
 = 54;

555 
åack
[54].
ªvî£
 = &track[55];

556 
åack
[54].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[96].edge[
DIR_STRAIGHT
];

557 
åack
[54].
edge
[
DIR_AHEAD
].
§c
 = &track[54];

558 
åack
[54].
edge
[
DIR_AHEAD
].
de°
 = &track[97];

559 
åack
[54].
edge
[
DIR_AHEAD
].
di°
 = 309;

561 
åack
[55].
ödex
 = 55;

562 
åack
[55].
«me
 = "D8";

563 
åack
[55].
ty≥
 = 
NODE_SENSOR
;

564 
åack
[55].
num
 = 55;

565 
åack
[55].
ªvî£
 = &track[54];

566 
åack
[55].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[70].edge[DIR_AHEAD];

567 
åack
[55].
edge
[
DIR_AHEAD
].
§c
 = &track[55];

568 
åack
[55].
edge
[
DIR_AHEAD
].
de°
 = &track[71];

569 
åack
[55].
edge
[
DIR_AHEAD
].
di°
 = 384;

571 
åack
[56].
ödex
 = 56;

572 
åack
[56].
«me
 = "D9";

573 
åack
[56].
ty≥
 = 
NODE_SENSOR
;

574 
åack
[56].
num
 = 56;

575 
åack
[56].
ªvî£
 = &track[57];

576 
åack
[56].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[74].edge[DIR_AHEAD];

577 
åack
[56].
edge
[
DIR_AHEAD
].
§c
 = &track[56];

578 
åack
[56].
edge
[
DIR_AHEAD
].
de°
 = &track[75];

579 
åack
[56].
edge
[
DIR_AHEAD
].
di°
 = 369;

581 
åack
[57].
ödex
 = 57;

582 
åack
[57].
«me
 = "D10";

583 
åack
[57].
ty≥
 = 
NODE_SENSOR
;

584 
åack
[57].
num
 = 57;

585 
åack
[57].
ªvî£
 = &track[56];

586 
åack
[57].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[94].edge[
DIR_STRAIGHT
];

587 
åack
[57].
edge
[
DIR_AHEAD
].
§c
 = &track[57];

588 
åack
[57].
edge
[
DIR_AHEAD
].
de°
 = &track[95];

589 
åack
[57].
edge
[
DIR_AHEAD
].
di°
 = 316;

591 
åack
[58].
ödex
 = 58;

592 
åack
[58].
«me
 = "D11";

593 
åack
[58].
ty≥
 = 
NODE_SENSOR
;

594 
åack
[58].
num
 = 58;

595 
åack
[58].
ªvî£
 = &track[59];

596 
åack
[58].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[46].edge[DIR_AHEAD];

597 
åack
[58].
edge
[
DIR_AHEAD
].
§c
 = &track[58];

598 
åack
[58].
edge
[
DIR_AHEAD
].
de°
 = &track[47];

599 
åack
[58].
edge
[
DIR_AHEAD
].
di°
 = 404;

601 
åack
[59].
ödex
 = 59;

602 
åack
[59].
«me
 = "D12";

603 
åack
[59].
ty≥
 = 
NODE_SENSOR
;

604 
åack
[59].
num
 = 59;

605 
åack
[59].
ªvî£
 = &track[58];

606 
åack
[59].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[92].edge[
DIR_STRAIGHT
];

607 
åack
[59].
edge
[
DIR_AHEAD
].
§c
 = &track[59];

608 
åack
[59].
edge
[
DIR_AHEAD
].
de°
 = &track[93];

609 
åack
[59].
edge
[
DIR_AHEAD
].
di°
 = 231;

611 
åack
[60].
ödex
 = 60;

612 
åack
[60].
«me
 = "D13";

613 
åack
[60].
ty≥
 = 
NODE_SENSOR
;

614 
åack
[60].
num
 = 60;

615 
åack
[60].
ªvî£
 = &track[61];

616 
åack
[60].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[16].edge[DIR_AHEAD];

617 
åack
[60].
edge
[
DIR_AHEAD
].
§c
 = &track[60];

618 
åack
[60].
edge
[
DIR_AHEAD
].
de°
 = &track[17];

619 
åack
[60].
edge
[
DIR_AHEAD
].
di°
 = 404;

621 
åack
[61].
ödex
 = 61;

622 
åack
[61].
«me
 = "D14";

623 
åack
[61].
ty≥
 = 
NODE_SENSOR
;

624 
åack
[61].
num
 = 61;

625 
åack
[61].
ªvî£
 = &track[60];

626 
åack
[61].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[112].edge[
DIR_STRAIGHT
];

627 
åack
[61].
edge
[
DIR_AHEAD
].
§c
 = &track[61];

628 
åack
[61].
edge
[
DIR_AHEAD
].
de°
 = &track[113];

629 
åack
[61].
edge
[
DIR_AHEAD
].
di°
 = 239;

631 
åack
[62].
ödex
 = 62;

632 
åack
[62].
«me
 = "D15";

633 
åack
[62].
ty≥
 = 
NODE_SENSOR
;

634 
åack
[62].
num
 = 62;

635 
åack
[62].
ªvî£
 = &track[63];

636 
åack
[62].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[29].edge[DIR_AHEAD];

637 
åack
[62].
edge
[
DIR_AHEAD
].
§c
 = &track[62];

638 
åack
[62].
edge
[
DIR_AHEAD
].
de°
 = &track[28];

639 
åack
[62].
edge
[
DIR_AHEAD
].
di°
 = 201;

641 
åack
[63].
ödex
 = 63;

642 
åack
[63].
«me
 = "D16";

643 
åack
[63].
ty≥
 = 
NODE_SENSOR
;

644 
åack
[63].
num
 = 63;

645 
åack
[63].
ªvî£
 = &track[62];

646 
åack
[63].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[112].edge[
DIR_CURVED
];

647 
åack
[63].
edge
[
DIR_AHEAD
].
§c
 = &track[63];

648 
åack
[63].
edge
[
DIR_AHEAD
].
de°
 = &track[113];

649 
åack
[63].
edge
[
DIR_AHEAD
].
di°
 = 246;

651 
åack
[64].
ödex
 = 64;

652 
åack
[64].
«me
 = "E1";

653 
åack
[64].
ty≥
 = 
NODE_SENSOR
;

654 
åack
[64].
num
 = 64;

655 
åack
[64].
ªvî£
 = &track[65];

656 
åack
[64].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[122].edge[
DIR_CURVED
];

657 
åack
[64].
edge
[
DIR_AHEAD
].
§c
 = &track[64];

658 
åack
[64].
edge
[
DIR_AHEAD
].
de°
 = &track[123];

659 
åack
[64].
edge
[
DIR_AHEAD
].
di°
 = 239;

661 
åack
[65].
ödex
 = 65;

662 
åack
[65].
«me
 = "E2";

663 
åack
[65].
ty≥
 = 
NODE_SENSOR
;

664 
åack
[65].
num
 = 65;

665 
åack
[65].
ªvî£
 = &track[64];

666 
åack
[65].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[79].edge[DIR_AHEAD];

667 
åack
[65].
edge
[
DIR_AHEAD
].
§c
 = &track[65];

668 
åack
[65].
edge
[
DIR_AHEAD
].
de°
 = &track[78];

669 
åack
[65].
edge
[
DIR_AHEAD
].
di°
 = 201;

671 
åack
[66].
ödex
 = 66;

672 
åack
[66].
«me
 = "E3";

673 
åack
[66].
ty≥
 = 
NODE_SENSOR
;

674 
åack
[66].
num
 = 66;

675 
åack
[66].
ªvî£
 = &track[67];

676 
åack
[66].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[49].edge[DIR_AHEAD];

677 
åack
[66].
edge
[
DIR_AHEAD
].
§c
 = &track[66];

678 
åack
[66].
edge
[
DIR_AHEAD
].
de°
 = &track[48];

679 
åack
[66].
edge
[
DIR_AHEAD
].
di°
 = 201;

681 
åack
[67].
ödex
 = 67;

682 
åack
[67].
«me
 = "E4";

683 
åack
[67].
ty≥
 = 
NODE_SENSOR
;

684 
åack
[67].
num
 = 67;

685 
åack
[67].
ªvî£
 = &track[66];

686 
åack
[67].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[98].edge[
DIR_CURVED
];

687 
åack
[67].
edge
[
DIR_AHEAD
].
§c
 = &track[67];

688 
åack
[67].
edge
[
DIR_AHEAD
].
de°
 = &track[99];

689 
åack
[67].
edge
[
DIR_AHEAD
].
di°
 = 239;

691 
åack
[68].
ödex
 = 68;

692 
åack
[68].
«me
 = "E5";

693 
åack
[68].
ty≥
 = 
NODE_SENSOR
;

694 
åack
[68].
num
 = 68;

695 
åack
[68].
ªvî£
 = &track[69];

696 
åack
[68].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[52].edge[DIR_AHEAD];

697 
åack
[68].
edge
[
DIR_AHEAD
].
§c
 = &track[68];

698 
åack
[68].
edge
[
DIR_AHEAD
].
de°
 = &track[53];

699 
åack
[68].
edge
[
DIR_AHEAD
].
di°
 = 376;

701 
åack
[69].
ödex
 = 69;

702 
åack
[69].
«me
 = "E6";

703 
åack
[69].
ty≥
 = 
NODE_SENSOR
;

704 
åack
[69].
num
 = 69;

705 
åack
[69].
ªvî£
 = &track[68];

706 
åack
[69].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[99].edge[DIR_AHEAD];

707 
åack
[69].
edge
[
DIR_AHEAD
].
§c
 = &track[69];

708 
åack
[69].
edge
[
DIR_AHEAD
].
de°
 = &track[98];

709 
åack
[69].
edge
[
DIR_AHEAD
].
di°
 = 50;

711 
åack
[70].
ödex
 = 70;

712 
åack
[70].
«me
 = "E7";

713 
åack
[70].
ty≥
 = 
NODE_SENSOR
;

714 
åack
[70].
num
 = 70;

715 
åack
[70].
ªvî£
 = &track[71];

716 
åack
[70].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[55].edge[DIR_AHEAD];

717 
åack
[70].
edge
[
DIR_AHEAD
].
§c
 = &track[70];

718 
åack
[70].
edge
[
DIR_AHEAD
].
de°
 = &track[54];

719 
åack
[70].
edge
[
DIR_AHEAD
].
di°
 = 384;

721 
åack
[71].
ödex
 = 71;

722 
åack
[71].
«me
 = "E8";

723 
åack
[71].
ty≥
 = 
NODE_SENSOR
;

724 
åack
[71].
num
 = 71;

725 
åack
[71].
ªvî£
 = &track[70];

726 
åack
[71].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[44].edge[DIR_AHEAD];

727 
åack
[71].
edge
[
DIR_AHEAD
].
§c
 = &track[71];

728 
åack
[71].
edge
[
DIR_AHEAD
].
de°
 = &track[45];

729 
åack
[71].
edge
[
DIR_AHEAD
].
di°
 = 875;

731 
åack
[72].
ödex
 = 72;

732 
åack
[72].
«me
 = "E9";

733 
åack
[72].
ty≥
 = 
NODE_SENSOR
;

734 
åack
[72].
num
 = 72;

735 
åack
[72].
ªvî£
 = &track[73];

736 
åack
[72].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[94].edge[
DIR_CURVED
];

737 
åack
[72].
edge
[
DIR_AHEAD
].
§c
 = &track[72];

738 
åack
[72].
edge
[
DIR_AHEAD
].
de°
 = &track[95];

739 
åack
[72].
edge
[
DIR_AHEAD
].
di°
 = 239;

741 
åack
[73].
ödex
 = 73;

742 
åack
[73].
«me
 = "E10";

743 
åack
[73].
ty≥
 = 
NODE_SENSOR
;

744 
åack
[73].
num
 = 73;

745 
åack
[73].
ªvî£
 = &track[72];

746 
åack
[73].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[77].edge[DIR_AHEAD];

747 
åack
[73].
edge
[
DIR_AHEAD
].
§c
 = &track[73];

748 
åack
[73].
edge
[
DIR_AHEAD
].
de°
 = &track[76];

749 
åack
[73].
edge
[
DIR_AHEAD
].
di°
 = 376;

751 
åack
[74].
ödex
 = 74;

752 
åack
[74].
«me
 = "E11";

753 
åack
[74].
ty≥
 = 
NODE_SENSOR
;

754 
åack
[74].
num
 = 74;

755 
åack
[74].
ªvî£
 = &track[75];

756 
åack
[74].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[56].edge[DIR_AHEAD];

757 
åack
[74].
edge
[
DIR_AHEAD
].
§c
 = &track[74];

758 
åack
[74].
edge
[
DIR_AHEAD
].
de°
 = &track[57];

759 
åack
[74].
edge
[
DIR_AHEAD
].
di°
 = 369;

761 
åack
[75].
ödex
 = 75;

762 
åack
[75].
«me
 = "E12";

763 
åack
[75].
ty≥
 = 
NODE_SENSOR
;

764 
åack
[75].
num
 = 75;

765 
åack
[75].
ªvî£
 = &track[74];

766 
åack
[75].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[93].edge[DIR_AHEAD];

767 
åack
[75].
edge
[
DIR_AHEAD
].
§c
 = &track[75];

768 
åack
[75].
edge
[
DIR_AHEAD
].
de°
 = &track[92];

769 
åack
[75].
edge
[
DIR_AHEAD
].
di°
 = 50;

771 
åack
[76].
ödex
 = 76;

772 
åack
[76].
«me
 = "E13";

773 
åack
[76].
ty≥
 = 
NODE_SENSOR
;

774 
åack
[76].
num
 = 76;

775 
åack
[76].
ªvî£
 = &track[77];

776 
åack
[76].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[113].edge[DIR_AHEAD];

777 
åack
[76].
edge
[
DIR_AHEAD
].
§c
 = &track[76];

778 
åack
[76].
edge
[
DIR_AHEAD
].
de°
 = &track[112];

779 
åack
[76].
edge
[
DIR_AHEAD
].
di°
 = 43;

781 
åack
[77].
ödex
 = 77;

782 
åack
[77].
«me
 = "E14";

783 
åack
[77].
ty≥
 = 
NODE_SENSOR
;

784 
åack
[77].
num
 = 77;

785 
åack
[77].
ªvî£
 = &track[76];

786 
åack
[77].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[73].edge[DIR_AHEAD];

787 
åack
[77].
edge
[
DIR_AHEAD
].
§c
 = &track[77];

788 
åack
[77].
edge
[
DIR_AHEAD
].
de°
 = &track[72];

789 
åack
[77].
edge
[
DIR_AHEAD
].
di°
 = 376;

792 
åack
[78].
ödex
 = 78;

793 
åack
[78].
«me
 = "E15";

794 
åack
[78].
ty≥
 = 
NODE_SENSOR
;

795 
åack
[78].
num
 = 78;

796 
åack
[78].
ªvî£
 = &track[79];

797 
åack
[78].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[104].edge[
DIR_CURVED
];

798 
åack
[78].
edge
[
DIR_AHEAD
].
§c
 = &track[78];

799 
åack
[78].
edge
[
DIR_AHEAD
].
de°
 = &track[105];

800 
åack
[78].
edge
[
DIR_AHEAD
].
di°
 = 246;

802 
åack
[79].
ödex
 = 79;

803 
åack
[79].
«me
 = "E16";

804 
åack
[79].
ty≥
 = 
NODE_SENSOR
;

805 
åack
[79].
num
 = 79;

806 
åack
[79].
ªvî£
 = &track[78];

807 
åack
[79].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[65].edge[DIR_AHEAD];

808 
åack
[79].
edge
[
DIR_AHEAD
].
§c
 = &track[79];

809 
åack
[79].
edge
[
DIR_AHEAD
].
de°
 = &track[64];

810 
åack
[79].
edge
[
DIR_AHEAD
].
di°
 = 201;

812 
åack
[80].
ödex
 = 80;

813 
åack
[80].
«me
 = "BR1";

814 
åack
[80].
ty≥
 = 
NODE_BRANCH
;

815 
åack
[80].
num
 = 1;

816 
åack
[80].
ªvî£
 = &track[81];

817 
åack
[80].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[10].edge[
DIR_AHEAD
];

818 
åack
[80].
edge
[
DIR_STRAIGHT
].
§c
 = &track[80];

819 
åack
[80].
edge
[
DIR_STRAIGHT
].
de°
 = &track[11];

820 
åack
[80].
edge
[
DIR_STRAIGHT
].
di°
 = 518;

821 
åack
[80].
edge
[
DIR_CURVED
].
ªvî£
 = &åack[9].edge[
DIR_AHEAD
];

822 
åack
[80].
edge
[
DIR_CURVED
].
§c
 = &track[80];

823 
åack
[80].
edge
[
DIR_CURVED
].
de°
 = &track[8];

824 
åack
[80].
edge
[
DIR_CURVED
].
di°
 = 229;

826 
åack
[81].
ödex
 = 81;

827 
åack
[81].
«me
 = "MR1";

828 
åack
[81].
ty≥
 = 
NODE_MERGE
;

829 
åack
[81].
num
 = 1;

830 
åack
[81].
ªvî£
 = &track[80];

831 
åack
[81].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[82].edge[
DIR_STRAIGHT
];

832 
åack
[81].
edge
[
DIR_AHEAD
].
§c
 = &track[81];

833 
åack
[81].
edge
[
DIR_AHEAD
].
de°
 = &track[83];

834 
åack
[81].
edge
[
DIR_AHEAD
].
di°
 = 188;

836 
åack
[82].
ödex
 = 82;

837 
åack
[82].
«me
 = "BR2";

838 
åack
[82].
ty≥
 = 
NODE_BRANCH
;

839 
åack
[82].
num
 = 2;

840 
åack
[82].
ªvî£
 = &track[83];

841 
åack
[82].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[81].edge[
DIR_AHEAD
];

842 
åack
[82].
edge
[
DIR_STRAIGHT
].
§c
 = &track[82];

843 
åack
[82].
edge
[
DIR_STRAIGHT
].
de°
 = &track[80];

844 
åack
[82].
edge
[
DIR_STRAIGHT
].
di°
 = 188;

845 
åack
[82].
edge
[
DIR_CURVED
].
ªvî£
 = &åack[7].edge[
DIR_AHEAD
];

846 
åack
[82].
edge
[
DIR_CURVED
].
§c
 = &track[82];

847 
åack
[82].
edge
[
DIR_CURVED
].
de°
 = &track[6];

848 
åack
[82].
edge
[
DIR_CURVED
].
di°
 = 229;

850 
åack
[83].
ödex
 = 83;

851 
åack
[83].
«me
 = "MR2";

852 
åack
[83].
ty≥
 = 
NODE_MERGE
;

853 
åack
[83].
num
 = 2;

854 
åack
[83].
ªvî£
 = &track[82];

855 
åack
[83].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[84].edge[
DIR_CURVED
];

856 
åack
[83].
edge
[
DIR_AHEAD
].
§c
 = &track[83];

857 
åack
[83].
edge
[
DIR_AHEAD
].
de°
 = &track[85];

858 
åack
[83].
edge
[
DIR_AHEAD
].
di°
 = 185;

860 
åack
[84].
ödex
 = 84;

861 
åack
[84].
«me
 = "BR3";

862 
åack
[84].
ty≥
 = 
NODE_BRANCH
;

863 
åack
[84].
num
 = 3;

864 
åack
[84].
ªvî£
 = &track[85];

865 
åack
[84].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[4].edge[
DIR_AHEAD
];

866 
åack
[84].
edge
[
DIR_STRAIGHT
].
§c
 = &track[84];

867 
åack
[84].
edge
[
DIR_STRAIGHT
].
de°
 = &track[5];

868 
åack
[84].
edge
[
DIR_STRAIGHT
].
di°
 = 231;

869 
åack
[84].
edge
[
DIR_CURVED
].
ªvî£
 = &åack[83].edge[
DIR_AHEAD
];

870 
åack
[84].
edge
[
DIR_CURVED
].
§c
 = &track[84];

871 
åack
[84].
edge
[
DIR_CURVED
].
de°
 = &track[82];

872 
åack
[84].
edge
[
DIR_CURVED
].
di°
 = 185;

874 
åack
[85].
ödex
 = 85;

875 
åack
[85].
«me
 = "MR3";

876 
åack
[85].
ty≥
 = 
NODE_MERGE
;

877 
åack
[85].
num
 = 3;

878 
åack
[85].
ªvî£
 = &track[84];

879 
åack
[85].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[39].edge[DIR_AHEAD];

880 
åack
[85].
edge
[
DIR_AHEAD
].
§c
 = &track[85];

881 
åack
[85].
edge
[
DIR_AHEAD
].
de°
 = &track[38];

882 
åack
[85].
edge
[
DIR_AHEAD
].
di°
 = 128;

884 
åack
[86].
ödex
 = 86;

885 
åack
[86].
«me
 = "BR4";

886 
åack
[86].
ty≥
 = 
NODE_BRANCH
;

887 
åack
[86].
num
 = 4;

888 
åack
[86].
ªvî£
 = &track[87];

889 
åack
[86].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[15].edge[
DIR_AHEAD
];

890 
åack
[86].
edge
[
DIR_STRAIGHT
].
§c
 = &track[86];

891 
åack
[86].
edge
[
DIR_STRAIGHT
].
de°
 = &track[14];

892 
åack
[86].
edge
[
DIR_STRAIGHT
].
di°
 = 417;

893 
åack
[86].
edge
[
DIR_CURVED
].
ªvî£
 = &åack[12].edge[
DIR_AHEAD
];

894 
åack
[86].
edge
[
DIR_CURVED
].
§c
 = &track[86];

895 
åack
[86].
edge
[
DIR_CURVED
].
de°
 = &track[13];

896 
åack
[86].
edge
[
DIR_CURVED
].
di°
 = 236;

898 
åack
[87].
ödex
 = 87;

899 
åack
[87].
«me
 = "MR4";

900 
åack
[87].
ty≥
 = 
NODE_MERGE
;

901 
åack
[87].
num
 = 4;

902 
åack
[87].
ªvî£
 = &track[86];

903 
åack
[87].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[102].edge[
DIR_CURVED
];

904 
åack
[87].
edge
[
DIR_AHEAD
].
§c
 = &track[87];

905 
åack
[87].
edge
[
DIR_AHEAD
].
de°
 = &track[103];

906 
åack
[87].
edge
[
DIR_AHEAD
].
di°
 = 185;

908 
åack
[88].
ödex
 = 88;

909 
åack
[88].
«me
 = "BR5";

910 
åack
[88].
ty≥
 = 
NODE_BRANCH
;

911 
åack
[88].
num
 = 5;

912 
åack
[88].
ªvî£
 = &track[89];

913 
åack
[88].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[35].edge[
DIR_AHEAD
];

914 
åack
[88].
edge
[
DIR_STRAIGHT
].
§c
 = &track[88];

915 
åack
[88].
edge
[
DIR_STRAIGHT
].
de°
 = &track[34];

916 
åack
[88].
edge
[
DIR_STRAIGHT
].
di°
 = 239;

917 
åack
[88].
edge
[
DIR_CURVED
].
ªvî£
 = &track[92].edge[DIR_CURVED];

918 
åack
[88].
edge
[
DIR_CURVED
].
§c
 = &track[88];

919 
åack
[88].
edge
[
DIR_CURVED
].
de°
 = &track[93];

920 
åack
[88].
edge
[
DIR_CURVED
].
di°
 = 371;

922 
åack
[89].
ödex
 = 89;

923 
åack
[89].
«me
 = "MR5";

924 
åack
[89].
ty≥
 = 
NODE_MERGE
;

925 
åack
[89].
num
 = 5;

926 
åack
[89].
ªvî£
 = &track[88];

927 
åack
[89].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[115].edge[DIR_AHEAD];

928 
åack
[89].
edge
[
DIR_AHEAD
].
§c
 = &track[89];

929 
åack
[89].
edge
[
DIR_AHEAD
].
de°
 = &track[114];

930 
åack
[89].
edge
[
DIR_AHEAD
].
di°
 = 155;

932 
åack
[90].
ödex
 = 90;

933 
åack
[90].
«me
 = "BR6";

934 
åack
[90].
ty≥
 = 
NODE_BRANCH
;

935 
åack
[90].
num
 = 6;

936 
åack
[90].
ªvî£
 = &track[91];

937 
åack
[90].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[47].edge[
DIR_AHEAD
];

938 
åack
[90].
edge
[
DIR_STRAIGHT
].
§c
 = &track[90];

939 
åack
[90].
edge
[
DIR_STRAIGHT
].
de°
 = &track[46];

940 
åack
[90].
edge
[
DIR_STRAIGHT
].
di°
 = 239;

941 
åack
[90].
edge
[
DIR_CURVED
].
ªvî£
 = &track[114].edge[DIR_CURVED];

942 
åack
[90].
edge
[
DIR_CURVED
].
§c
 = &track[90];

943 
åack
[90].
edge
[
DIR_CURVED
].
de°
 = &track[115];

944 
åack
[90].
edge
[
DIR_CURVED
].
di°
 = 371;

946 
åack
[91].
ödex
 = 91;

947 
åack
[91].
«me
 = "MR6";

948 
åack
[91].
ty≥
 = 
NODE_MERGE
;

949 
åack
[91].
num
 = 6;

950 
åack
[91].
ªvî£
 = &track[90];

951 
åack
[91].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[36].edge[DIR_AHEAD];

952 
åack
[91].
edge
[
DIR_AHEAD
].
§c
 = &track[91];

953 
åack
[91].
edge
[
DIR_AHEAD
].
de°
 = &track[37];

954 
åack
[91].
edge
[
DIR_AHEAD
].
di°
 = 61;

956 
åack
[92].
ödex
 = 92;

957 
åack
[92].
«me
 = "BR7";

958 
åack
[92].
ty≥
 = 
NODE_BRANCH
;

959 
åack
[92].
num
 = 7;

960 
åack
[92].
ªvî£
 = &track[93];

961 
åack
[92].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[59].edge[
DIR_AHEAD
];

962 
åack
[92].
edge
[
DIR_STRAIGHT
].
§c
 = &track[92];

963 
åack
[92].
edge
[
DIR_STRAIGHT
].
de°
 = &track[58];

964 
åack
[92].
edge
[
DIR_STRAIGHT
].
di°
 = 231;

965 
åack
[92].
edge
[
DIR_CURVED
].
ªvî£
 = &track[88].edge[DIR_CURVED];

966 
åack
[92].
edge
[
DIR_CURVED
].
§c
 = &track[92];

967 
åack
[92].
edge
[
DIR_CURVED
].
de°
 = &track[89];

968 
åack
[92].
edge
[
DIR_CURVED
].
di°
 = 371;

970 
åack
[93].
ödex
 = 93;

971 
åack
[93].
«me
 = "MR7";

972 
åack
[93].
ty≥
 = 
NODE_MERGE
;

973 
åack
[93].
num
 = 7;

974 
åack
[93].
ªvî£
 = &track[92];

975 
åack
[93].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[75].edge[DIR_AHEAD];

976 
åack
[93].
edge
[
DIR_AHEAD
].
§c
 = &track[93];

977 
åack
[93].
edge
[
DIR_AHEAD
].
de°
 = &track[74];

978 
åack
[93].
edge
[
DIR_AHEAD
].
di°
 = 50;

980 
åack
[94].
ödex
 = 94;

981 
åack
[94].
«me
 = "BR8";

982 
åack
[94].
ty≥
 = 
NODE_BRANCH
;

983 
åack
[94].
num
 = 8;

984 
åack
[94].
ªvî£
 = &track[95];

985 
åack
[94].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[57].edge[
DIR_AHEAD
];

986 
åack
[94].
edge
[
DIR_STRAIGHT
].
§c
 = &track[94];

987 
åack
[94].
edge
[
DIR_STRAIGHT
].
de°
 = &track[56];

988 
åack
[94].
edge
[
DIR_STRAIGHT
].
di°
 = 316;

989 
åack
[94].
edge
[
DIR_CURVED
].
ªvî£
 = &åack[72].edge[
DIR_AHEAD
];

990 
åack
[94].
edge
[
DIR_CURVED
].
§c
 = &track[94];

991 
åack
[94].
edge
[
DIR_CURVED
].
de°
 = &track[73];

992 
åack
[94].
edge
[
DIR_CURVED
].
di°
 = 239;

994 
åack
[95].
ödex
 = 95;

995 
åack
[95].
«me
 = "MR8";

996 
åack
[95].
ty≥
 = 
NODE_MERGE
;

997 
åack
[95].
num
 = 8;

998 
åack
[95].
ªvî£
 = &track[94];

999 
åack
[95].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[97].edge[DIR_AHEAD];

1000 
åack
[95].
edge
[
DIR_AHEAD
].
§c
 = &track[95];

1001 
åack
[95].
edge
[
DIR_AHEAD
].
de°
 = &track[96];

1002 
åack
[95].
edge
[
DIR_AHEAD
].
di°
 = 155;

1004 
åack
[96].
ödex
 = 96;

1005 
åack
[96].
«me
 = "BR9";

1006 
åack
[96].
ty≥
 = 
NODE_BRANCH
;

1007 
åack
[96].
num
 = 9;

1008 
åack
[96].
ªvî£
 = &track[97];

1009 
åack
[96].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[54].edge[
DIR_AHEAD
];

1010 
åack
[96].
edge
[
DIR_STRAIGHT
].
§c
 = &track[96];

1011 
åack
[96].
edge
[
DIR_STRAIGHT
].
de°
 = &track[55];

1012 
åack
[96].
edge
[
DIR_STRAIGHT
].
di°
 = 309;

1013 
åack
[96].
edge
[
DIR_CURVED
].
ªvî£
 = &åack[53].edge[
DIR_AHEAD
];

1014 
åack
[96].
edge
[
DIR_CURVED
].
§c
 = &track[96];

1015 
åack
[96].
edge
[
DIR_CURVED
].
de°
 = &track[52];

1016 
åack
[96].
edge
[
DIR_CURVED
].
di°
 = 239;

1018 
åack
[97].
ödex
 = 97;

1019 
åack
[97].
«me
 = "MR9";

1020 
åack
[97].
ty≥
 = 
NODE_MERGE
;

1021 
åack
[97].
num
 = 9;

1022 
åack
[97].
ªvî£
 = &track[96];

1023 
åack
[97].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[95].edge[DIR_AHEAD];

1024 
åack
[97].
edge
[
DIR_AHEAD
].
§c
 = &track[97];

1025 
åack
[97].
edge
[
DIR_AHEAD
].
de°
 = &track[94];

1026 
åack
[97].
edge
[
DIR_AHEAD
].
di°
 = 155;

1028 
åack
[98].
ödex
 = 98;

1029 
åack
[98].
«me
 = "BR10";

1030 
åack
[98].
ty≥
 = 
NODE_BRANCH
;

1031 
åack
[98].
num
 = 10;

1032 
åack
[98].
ªvî£
 = &track[99];

1033 
åack
[98].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[50].edge[
DIR_AHEAD
];

1034 
åack
[98].
edge
[
DIR_STRAIGHT
].
§c
 = &track[98];

1035 
åack
[98].
edge
[
DIR_STRAIGHT
].
de°
 = &track[51];

1036 
åack
[98].
edge
[
DIR_STRAIGHT
].
di°
 = 239;

1037 
åack
[98].
edge
[
DIR_CURVED
].
ªvî£
 = &åack[67].edge[
DIR_AHEAD
];

1038 
åack
[98].
edge
[
DIR_CURVED
].
§c
 = &track[98];

1039 
åack
[98].
edge
[
DIR_CURVED
].
de°
 = &track[66];

1040 
åack
[98].
edge
[
DIR_CURVED
].
di°
 = 239;

1042 
åack
[99].
ödex
 = 99;

1043 
åack
[99].
«me
 = "MR10";

1044 
åack
[99].
ty≥
 = 
NODE_MERGE
;

1045 
åack
[99].
num
 = 10;

1046 
åack
[99].
ªvî£
 = &track[98];

1047 
åack
[99].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[69].edge[DIR_AHEAD];

1048 
åack
[99].
edge
[
DIR_AHEAD
].
§c
 = &track[99];

1049 
åack
[99].
edge
[
DIR_AHEAD
].
de°
 = &track[68];

1050 
åack
[99].
edge
[
DIR_AHEAD
].
di°
 = 50;

1052 
åack
[100].
ödex
 = 100;

1053 
åack
[100].
«me
 = "BR11";

1054 
åack
[100].
ty≥
 = 
NODE_BRANCH
;

1055 
åack
[100].
num
 = 11;

1056 
åack
[100].
ªvî£
 = &track[101];

1057 
åack
[100].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[103].edge[
DIR_AHEAD
];

1058 
åack
[100].
edge
[
DIR_STRAIGHT
].
§c
 = &track[100];

1059 
åack
[100].
edge
[
DIR_STRAIGHT
].
de°
 = &track[102];

1060 
åack
[100].
edge
[
DIR_STRAIGHT
].
di°
 = 188;

1061 
åack
[100].
edge
[
DIR_CURVED
].
ªvî£
 = &åack[106].edge[
DIR_STRAIGHT
];

1062 
åack
[100].
edge
[
DIR_CURVED
].
§c
 = &track[100];

1063 
åack
[100].
edge
[
DIR_CURVED
].
de°
 = &track[107];

1064 
åack
[100].
edge
[
DIR_CURVED
].
di°
 = 495;

1066 
åack
[101].
ödex
 = 101;

1067 
åack
[101].
«me
 = "MR11";

1068 
åack
[101].
ty≥
 = 
NODE_MERGE
;

1069 
åack
[101].
num
 = 11;

1070 
åack
[101].
ªvî£
 = &track[100];

1071 
åack
[101].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[45].edge[DIR_AHEAD];

1072 
åack
[101].
edge
[
DIR_AHEAD
].
§c
 = &track[101];

1073 
åack
[101].
edge
[
DIR_AHEAD
].
de°
 = &track[44];

1074 
åack
[101].
edge
[
DIR_AHEAD
].
di°
 = 43;

1076 
åack
[102].
ödex
 = 102;

1077 
åack
[102].
«me
 = "BR12";

1078 
åack
[102].
ty≥
 = 
NODE_BRANCH
;

1079 
åack
[102].
num
 = 12;

1080 
åack
[102].
ªvî£
 = &track[103];

1081 
åack
[102].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[0].edge[
DIR_AHEAD
];

1082 
åack
[102].
edge
[
DIR_STRAIGHT
].
§c
 = &track[102];

1083 
åack
[102].
edge
[
DIR_STRAIGHT
].
de°
 = &track[1];

1084 
åack
[102].
edge
[
DIR_STRAIGHT
].
di°
 = 231;

1085 
åack
[102].
edge
[
DIR_CURVED
].
ªvî£
 = &åack[87].edge[
DIR_AHEAD
];

1086 
åack
[102].
edge
[
DIR_CURVED
].
§c
 = &track[102];

1087 
åack
[102].
edge
[
DIR_CURVED
].
de°
 = &track[86];

1088 
åack
[102].
edge
[
DIR_CURVED
].
di°
 = 185;

1090 
åack
[103].
ödex
 = 103;

1091 
åack
[103].
«me
 = "MR12";

1092 
åack
[103].
ty≥
 = 
NODE_MERGE
;

1093 
åack
[103].
num
 = 12;

1094 
åack
[103].
ªvî£
 = &track[102];

1095 
åack
[103].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[100].edge[
DIR_STRAIGHT
];

1096 
åack
[103].
edge
[
DIR_AHEAD
].
§c
 = &track[103];

1097 
åack
[103].
edge
[
DIR_AHEAD
].
de°
 = &track[101];

1098 
åack
[103].
edge
[
DIR_AHEAD
].
di°
 = 188;

1100 
åack
[104].
ödex
 = 104;

1101 
åack
[104].
«me
 = "BR13";

1102 
åack
[104].
ty≥
 = 
NODE_BRANCH
;

1103 
åack
[104].
num
 = 13;

1104 
åack
[104].
ªvî£
 = &track[105];

1105 
åack
[104].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[21].edge[
DIR_AHEAD
];

1106 
åack
[104].
edge
[
DIR_STRAIGHT
].
§c
 = &track[104];

1107 
åack
[104].
edge
[
DIR_STRAIGHT
].
de°
 = &track[20];

1108 
åack
[104].
edge
[
DIR_STRAIGHT
].
di°
 = 231;

1109 
åack
[104].
edge
[
DIR_CURVED
].
ªvî£
 = &åack[78].edge[
DIR_AHEAD
];

1110 
åack
[104].
edge
[
DIR_CURVED
].
§c
 = &track[104];

1111 
åack
[104].
edge
[
DIR_CURVED
].
de°
 = &track[79];

1112 
åack
[104].
edge
[
DIR_CURVED
].
di°
 = 246;

1114 
åack
[105].
ödex
 = 105;

1115 
åack
[105].
«me
 = "MR13";

1116 
åack
[105].
ty≥
 = 
NODE_MERGE
;

1117 
åack
[105].
num
 = 13;

1118 
åack
[105].
ªvî£
 = &track[104];

1119 
åack
[105].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[42].edge[DIR_AHEAD];

1120 
åack
[105].
edge
[
DIR_AHEAD
].
§c
 = &track[105];

1121 
åack
[105].
edge
[
DIR_AHEAD
].
de°
 = &track[43];

1122 
åack
[105].
edge
[
DIR_AHEAD
].
di°
 = 120;

1124 
åack
[106].
ödex
 = 106;

1125 
åack
[106].
«me
 = "BR14";

1126 
åack
[106].
ty≥
 = 
NODE_BRANCH
;

1127 
åack
[106].
num
 = 14;

1128 
åack
[106].
ªvî£
 = &track[107];

1129 
åack
[106].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[100].edge[
DIR_CURVED
];

1130 
åack
[106].
edge
[
DIR_STRAIGHT
].
§c
 = &track[106];

1131 
åack
[106].
edge
[
DIR_STRAIGHT
].
de°
 = &track[101];

1132 
åack
[106].
edge
[
DIR_STRAIGHT
].
di°
 = 495;

1133 
åack
[106].
edge
[
DIR_CURVED
].
ªvî£
 = &åack[43].edge[
DIR_AHEAD
];

1134 
åack
[106].
edge
[
DIR_CURVED
].
§c
 = &track[106];

1135 
åack
[106].
edge
[
DIR_CURVED
].
de°
 = &track[42];

1136 
åack
[106].
edge
[
DIR_CURVED
].
di°
 = 333;

1138 
åack
[107].
ödex
 = 107;

1139 
åack
[107].
«me
 = "MR14";

1140 
åack
[107].
ty≥
 = 
NODE_MERGE
;

1141 
åack
[107].
num
 = 14;

1142 
åack
[107].
ªvî£
 = &track[106];

1143 
åack
[107].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[2].edge[DIR_AHEAD];

1144 
åack
[107].
edge
[
DIR_AHEAD
].
§c
 = &track[107];

1145 
åack
[107].
edge
[
DIR_AHEAD
].
de°
 = &track[3];

1146 
åack
[107].
edge
[
DIR_AHEAD
].
di°
 = 43;

1148 
åack
[108].
ödex
 = 108;

1149 
åack
[108].
«me
 = "BR15";

1150 
åack
[108].
ty≥
 = 
NODE_BRANCH
;

1151 
åack
[108].
num
 = 15;

1152 
åack
[108].
ªvî£
 = &track[109];

1153 
åack
[108].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[37].edge[
DIR_AHEAD
];

1154 
åack
[108].
edge
[
DIR_STRAIGHT
].
§c
 = &track[108];

1155 
åack
[108].
edge
[
DIR_STRAIGHT
].
de°
 = &track[36];

1156 
åack
[108].
edge
[
DIR_STRAIGHT
].
di°
 = 433;

1157 
åack
[108].
edge
[
DIR_CURVED
].
ªvî£
 = &åack[40].edge[
DIR_AHEAD
];

1158 
åack
[108].
edge
[
DIR_CURVED
].
§c
 = &track[108];

1159 
åack
[108].
edge
[
DIR_CURVED
].
de°
 = &track[41];

1160 
åack
[108].
edge
[
DIR_CURVED
].
di°
 = 326;

1162 
åack
[109].
ödex
 = 109;

1163 
åack
[109].
«me
 = "MR15";

1164 
åack
[109].
ty≥
 = 
NODE_MERGE
;

1165 
åack
[109].
num
 = 15;

1166 
åack
[109].
ªvî£
 = &track[108];

1167 
åack
[109].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[31].edge[DIR_AHEAD];

1168 
åack
[109].
edge
[
DIR_AHEAD
].
§c
 = &track[109];

1169 
åack
[109].
edge
[
DIR_AHEAD
].
de°
 = &track[30];

1170 
åack
[109].
edge
[
DIR_AHEAD
].
di°
 = 50;

1172 
åack
[110].
ödex
 = 110;

1173 
åack
[110].
«me
 = "BR16";

1174 
åack
[110].
ty≥
 = 
NODE_BRANCH
;

1175 
åack
[110].
num
 = 16;

1176 
åack
[110].
ªvî£
 = &track[111];

1177 
åack
[110].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[17].edge[
DIR_AHEAD
];

1178 
åack
[110].
edge
[
DIR_STRAIGHT
].
§c
 = &track[110];

1179 
åack
[110].
edge
[
DIR_STRAIGHT
].
de°
 = &track[16];

1180 
åack
[110].
edge
[
DIR_STRAIGHT
].
di°
 = 231;

1181 
åack
[110].
edge
[
DIR_CURVED
].
ªvî£
 = &åack[19].edge[
DIR_AHEAD
];

1182 
åack
[110].
edge
[
DIR_CURVED
].
§c
 = &track[110];

1183 
åack
[110].
edge
[
DIR_CURVED
].
de°
 = &track[18];

1184 
åack
[110].
edge
[
DIR_CURVED
].
di°
 = 239;

1186 
åack
[111].
ödex
 = 111;

1187 
åack
[111].
«me
 = "MR16";

1188 
åack
[111].
ty≥
 = 
NODE_MERGE
;

1189 
åack
[111].
num
 = 16;

1190 
åack
[111].
ªvî£
 = &track[110];

1191 
åack
[111].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[41].edge[DIR_AHEAD];

1192 
åack
[111].
edge
[
DIR_AHEAD
].
§c
 = &track[111];

1193 
åack
[111].
edge
[
DIR_AHEAD
].
de°
 = &track[40];

1194 
åack
[111].
edge
[
DIR_AHEAD
].
di°
 = 128;

1196 
åack
[112].
ödex
 = 112;

1197 
åack
[112].
«me
 = "BR17";

1198 
åack
[112].
ty≥
 = 
NODE_BRANCH
;

1199 
åack
[112].
num
 = 17;

1200 
åack
[112].
ªvî£
 = &track[113];

1201 
åack
[112].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[61].edge[
DIR_AHEAD
];

1202 
åack
[112].
edge
[
DIR_STRAIGHT
].
§c
 = &track[112];

1203 
åack
[112].
edge
[
DIR_STRAIGHT
].
de°
 = &track[60];

1204 
åack
[112].
edge
[
DIR_STRAIGHT
].
di°
 = 239;

1205 
åack
[112].
edge
[
DIR_CURVED
].
ªvî£
 = &åack[63].edge[
DIR_AHEAD
];

1206 
åack
[112].
edge
[
DIR_CURVED
].
§c
 = &track[112];

1207 
åack
[112].
edge
[
DIR_CURVED
].
de°
 = &track[62];

1208 
åack
[112].
edge
[
DIR_CURVED
].
di°
 = 246;

1210 
åack
[113].
ödex
 = 113;

1211 
åack
[113].
«me
 = "MR17";

1212 
åack
[113].
ty≥
 = 
NODE_MERGE
;

1213 
åack
[113].
num
 = 17;

1214 
åack
[113].
ªvî£
 = &track[112];

1215 
åack
[113].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[76].edge[DIR_AHEAD];

1216 
åack
[113].
edge
[
DIR_AHEAD
].
§c
 = &track[113];

1217 
åack
[113].
edge
[
DIR_AHEAD
].
de°
 = &track[77];

1218 
åack
[113].
edge
[
DIR_AHEAD
].
di°
 = 43;

1220 
åack
[114].
ödex
 = 114;

1221 
åack
[114].
«me
 = "BR18";

1222 
åack
[114].
ty≥
 = 
NODE_BRANCH
;

1223 
åack
[114].
num
 = 18;

1224 
åack
[114].
ªvî£
 = &track[115];

1225 
åack
[114].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[38].edge[
DIR_AHEAD
];

1226 
åack
[114].
edge
[
DIR_STRAIGHT
].
§c
 = &track[114];

1227 
åack
[114].
edge
[
DIR_STRAIGHT
].
de°
 = &track[39];

1228 
åack
[114].
edge
[
DIR_STRAIGHT
].
di°
 = 231;

1229 
åack
[114].
edge
[
DIR_CURVED
].
ªvî£
 = &track[90].edge[DIR_CURVED];

1230 
åack
[114].
edge
[
DIR_CURVED
].
§c
 = &track[114];

1231 
åack
[114].
edge
[
DIR_CURVED
].
de°
 = &track[91];

1232 
åack
[114].
edge
[
DIR_CURVED
].
di°
 = 371;

1234 
åack
[115].
ödex
 = 115;

1235 
åack
[115].
«me
 = "MR18";

1236 
åack
[115].
ty≥
 = 
NODE_MERGE
;

1237 
åack
[115].
num
 = 18;

1238 
åack
[115].
ªvî£
 = &track[114];

1239 
åack
[115].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[89].edge[DIR_AHEAD];

1240 
åack
[115].
edge
[
DIR_AHEAD
].
§c
 = &track[115];

1241 
åack
[115].
edge
[
DIR_AHEAD
].
de°
 = &track[88];

1242 
åack
[115].
edge
[
DIR_AHEAD
].
di°
 = 155;

1244 
åack
[116].
ödex
 = 116;

1245 
åack
[116].
«me
 = "BR153";

1246 
åack
[116].
ty≥
 = 
NODE_BRANCH
;

1247 
åack
[116].
num
 = 153;

1248 
åack
[116].
ªvî£
 = &track[117];

1249 
åack
[116].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[124].edge[
DIR_AHEAD
];

1250 
åack
[116].
edge
[
DIR_STRAIGHT
].
§c
 = &track[116];

1251 
åack
[116].
edge
[
DIR_STRAIGHT
].
de°
 = &track[125];

1252 
åack
[116].
edge
[
DIR_STRAIGHT
].
di°
 = 253;

1253 
åack
[116].
edge
[
DIR_CURVED
].
ªvî£
 = &åack[33].edge[
DIR_AHEAD
];

1254 
åack
[116].
edge
[
DIR_CURVED
].
§c
 = &track[116];

1255 
åack
[116].
edge
[
DIR_CURVED
].
de°
 = &track[32];

1256 
åack
[116].
edge
[
DIR_CURVED
].
di°
 = 246;

1258 
åack
[117].
ödex
 = 117;

1259 
åack
[117].
«me
 = "MR153";

1260 
åack
[117].
ty≥
 = 
NODE_MERGE
;

1261 
åack
[117].
num
 = 153;

1262 
åack
[117].
ªvî£
 = &track[116];

1263 
åack
[117].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[118].edge[
DIR_STRAIGHT
];

1264 
åack
[117].
edge
[
DIR_AHEAD
].
§c
 = &track[117];

1265 
åack
[117].
edge
[
DIR_AHEAD
].
de°
 = &track[119];

1266 
åack
[117].
edge
[
DIR_AHEAD
].
di°
 = 0;

1268 
åack
[118].
ödex
 = 118;

1269 
åack
[118].
«me
 = "BR154";

1270 
åack
[118].
ty≥
 = 
NODE_BRANCH
;

1271 
åack
[118].
num
 = 154;

1272 
åack
[118].
ªvî£
 = &track[119];

1273 
åack
[118].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[117].edge[
DIR_AHEAD
];

1274 
åack
[118].
edge
[
DIR_STRAIGHT
].
§c
 = &track[118];

1275 
åack
[118].
edge
[
DIR_STRAIGHT
].
de°
 = &track[116];

1276 
åack
[118].
edge
[
DIR_STRAIGHT
].
di°
 = 0;

1277 
åack
[118].
edge
[
DIR_CURVED
].
ªvî£
 = &åack[28].edge[
DIR_AHEAD
];

1278 
åack
[118].
edge
[
DIR_CURVED
].
§c
 = &track[118];

1279 
åack
[118].
edge
[
DIR_CURVED
].
de°
 = &track[29];

1280 
åack
[118].
edge
[
DIR_CURVED
].
di°
 = 239;

1282 
åack
[119].
ödex
 = 119;

1283 
åack
[119].
«me
 = "MR154";

1284 
åack
[119].
ty≥
 = 
NODE_MERGE
;

1285 
åack
[119].
num
 = 154;

1286 
åack
[119].
ªvî£
 = &track[118];

1287 
åack
[119].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[123].edge[DIR_AHEAD];

1288 
åack
[119].
edge
[
DIR_AHEAD
].
§c
 = &track[119];

1289 
åack
[119].
edge
[
DIR_AHEAD
].
de°
 = &track[122];

1290 
åack
[119].
edge
[
DIR_AHEAD
].
di°
 = 0;

1292 
åack
[120].
ödex
 = 120;

1293 
åack
[120].
«me
 = "BR155";

1294 
åack
[120].
ty≥
 = 
NODE_BRANCH
;

1295 
åack
[120].
num
 = 155;

1296 
åack
[120].
ªvî£
 = &track[121];

1297 
åack
[120].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[126].edge[
DIR_AHEAD
];

1298 
åack
[120].
edge
[
DIR_STRAIGHT
].
§c
 = &track[120];

1299 
åack
[120].
edge
[
DIR_STRAIGHT
].
de°
 = &track[127];

1300 
åack
[120].
edge
[
DIR_STRAIGHT
].
di°
 = 282;

1301 
åack
[120].
edge
[
DIR_CURVED
].
ªvî£
 = &åack[48].edge[
DIR_AHEAD
];

1302 
åack
[120].
edge
[
DIR_CURVED
].
§c
 = &track[120];

1303 
åack
[120].
edge
[
DIR_CURVED
].
de°
 = &track[49];

1304 
åack
[120].
edge
[
DIR_CURVED
].
di°
 = 246;

1306 
åack
[121].
ödex
 = 121;

1307 
åack
[121].
«me
 = "MR155";

1308 
åack
[121].
ty≥
 = 
NODE_MERGE
;

1309 
åack
[121].
num
 = 155;

1310 
åack
[121].
ªvî£
 = &track[120];

1311 
åack
[121].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[122].edge[
DIR_STRAIGHT
];

1312 
åack
[121].
edge
[
DIR_AHEAD
].
§c
 = &track[121];

1313 
åack
[121].
edge
[
DIR_AHEAD
].
de°
 = &track[123];

1314 
åack
[121].
edge
[
DIR_AHEAD
].
di°
 = 0;

1316 
åack
[122].
ödex
 = 122;

1317 
åack
[122].
«me
 = "BR156";

1318 
åack
[122].
ty≥
 = 
NODE_BRANCH
;

1319 
åack
[122].
num
 = 156;

1320 
åack
[122].
ªvî£
 = &track[123];

1321 
åack
[122].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[121].edge[
DIR_AHEAD
];

1322 
åack
[122].
edge
[
DIR_STRAIGHT
].
§c
 = &track[122];

1323 
åack
[122].
edge
[
DIR_STRAIGHT
].
de°
 = &track[120];

1324 
åack
[122].
edge
[
DIR_STRAIGHT
].
di°
 = 0;

1325 
åack
[122].
edge
[
DIR_CURVED
].
ªvî£
 = &åack[64].edge[
DIR_AHEAD
];

1326 
åack
[122].
edge
[
DIR_CURVED
].
§c
 = &track[122];

1327 
åack
[122].
edge
[
DIR_CURVED
].
de°
 = &track[65];

1328 
åack
[122].
edge
[
DIR_CURVED
].
di°
 = 239;

1330 
åack
[123].
ödex
 = 123;

1331 
åack
[123].
«me
 = "MR156";

1332 
åack
[123].
ty≥
 = 
NODE_MERGE
;

1333 
åack
[123].
num
 = 156;

1334 
åack
[123].
ªvî£
 = &track[122];

1335 
åack
[123].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[119].edge[DIR_AHEAD];

1336 
åack
[123].
edge
[
DIR_AHEAD
].
§c
 = &track[123];

1337 
åack
[123].
edge
[
DIR_AHEAD
].
de°
 = &track[118];

1338 
åack
[123].
edge
[
DIR_AHEAD
].
di°
 = 0;

1340 
åack
[124].
ödex
 = 124;

1341 
åack
[124].
«me
 = "EN1";

1342 
åack
[124].
ty≥
 = 
NODE_ENTER
;

1343 
åack
[124].
ªvî£
 = &track[125];

1344 
åack
[124].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[116].edge[
DIR_STRAIGHT
];

1345 
åack
[124].
edge
[
DIR_AHEAD
].
§c
 = &track[124];

1346 
åack
[124].
edge
[
DIR_AHEAD
].
de°
 = &track[117];

1347 
åack
[124].
edge
[
DIR_AHEAD
].
di°
 = 253;

1349 
åack
[125].
ödex
 = 125;

1350 
åack
[125].
«me
 = "EX1";

1351 
åack
[125].
ty≥
 = 
NODE_EXIT
;

1352 
åack
[125].
ªvî£
 = &track[124];

1354 
åack
[126].
ödex
 = 126;

1355 
åack
[126].
«me
 = "EN2";

1356 
åack
[126].
ty≥
 = 
NODE_ENTER
;

1357 
åack
[126].
ªvî£
 = &track[127];

1358 
åack
[126].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[120].edge[
DIR_STRAIGHT
];

1359 
åack
[126].
edge
[
DIR_AHEAD
].
§c
 = &track[126];

1360 
åack
[126].
edge
[
DIR_AHEAD
].
de°
 = &track[121];

1361 
åack
[126].
edge
[
DIR_AHEAD
].
di°
 = 282;

1363 
åack
[127].
ödex
 = 127;

1364 
åack
[127].
«me
 = "EX2";

1365 
åack
[127].
ty≥
 = 
NODE_EXIT
;

1366 
åack
[127].
ªvî£
 = &track[126];

1368 
åack
[128].
ödex
 = 128;

1369 
åack
[128].
«me
 = "EN3";

1370 
åack
[128].
ty≥
 = 
NODE_ENTER
;

1371 
åack
[128].
ªvî£
 = &track[129];

1372 
åack
[128].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[34].edge[DIR_AHEAD];

1373 
åack
[128].
edge
[
DIR_AHEAD
].
§c
 = &track[128];

1374 
åack
[128].
edge
[
DIR_AHEAD
].
de°
 = &track[35];

1375 
åack
[128].
edge
[
DIR_AHEAD
].
di°
 = 514;

1377 
åack
[129].
ödex
 = 129;

1378 
åack
[129].
«me
 = "EX3";

1379 
åack
[129].
ty≥
 = 
NODE_EXIT
;

1380 
åack
[129].
ªvî£
 = &track[128];

1382 
åack
[130].
ödex
 = 130;

1383 
åack
[130].
«me
 = "EN4";

1384 
åack
[130].
ty≥
 = 
NODE_ENTER
;

1385 
åack
[130].
ªvî£
 = &track[131];

1386 
åack
[130].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[13].edge[DIR_AHEAD];

1387 
åack
[130].
edge
[
DIR_AHEAD
].
§c
 = &track[130];

1388 
åack
[130].
edge
[
DIR_AHEAD
].
de°
 = &track[12];

1389 
åack
[130].
edge
[
DIR_AHEAD
].
di°
 = 325;

1391 
åack
[131].
ödex
 = 131;

1392 
åack
[131].
«me
 = "EX4";

1393 
åack
[131].
ty≥
 = 
NODE_EXIT
;

1394 
åack
[131].
ªvî£
 = &track[130];

1396 
åack
[132].
ödex
 = 132;

1397 
åack
[132].
«me
 = "EN5";

1398 
åack
[132].
ty≥
 = 
NODE_ENTER
;

1399 
åack
[132].
ªvî£
 = &track[133];

1400 
åack
[132].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[1].edge[DIR_AHEAD];

1401 
åack
[132].
edge
[
DIR_AHEAD
].
§c
 = &track[132];

1402 
åack
[132].
edge
[
DIR_AHEAD
].
de°
 = &track[0];

1403 
åack
[132].
edge
[
DIR_AHEAD
].
di°
 = 504;

1405 
åack
[133].
ödex
 = 133;

1406 
åack
[133].
«me
 = "EX5";

1407 
åack
[133].
ty≥
 = 
NODE_EXIT
;

1408 
åack
[133].
ªvî£
 = &track[132];

1410 
åack
[134].
ödex
 = 134;

1411 
åack
[134].
«me
 = "EN6";

1412 
åack
[134].
ty≥
 = 
NODE_ENTER
;

1413 
åack
[134].
ªvî£
 = &track[135];

1414 
åack
[134].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[14].edge[DIR_AHEAD];

1415 
åack
[134].
edge
[
DIR_AHEAD
].
§c
 = &track[134];

1416 
åack
[134].
edge
[
DIR_AHEAD
].
de°
 = &track[15];

1417 
åack
[134].
edge
[
DIR_AHEAD
].
di°
 = 144;

1419 
åack
[135].
ödex
 = 135;

1420 
åack
[135].
«me
 = "EX6";

1421 
åack
[135].
ty≥
 = 
NODE_EXIT
;

1422 
åack
[135].
ªvî£
 = &track[134];

1424 
åack
[136].
ödex
 = 136;

1425 
åack
[136].
«me
 = "EN7";

1426 
åack
[136].
ty≥
 = 
NODE_ENTER
;

1427 
åack
[136].
ªvî£
 = &track[137];

1428 
åack
[136].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[23].edge[DIR_AHEAD];

1429 
åack
[136].
edge
[
DIR_AHEAD
].
§c
 = &track[136];

1430 
åack
[136].
edge
[
DIR_AHEAD
].
de°
 = &track[22];

1431 
åack
[136].
edge
[
DIR_AHEAD
].
di°
 = 43;

1433 
åack
[137].
ödex
 = 137;

1434 
åack
[137].
«me
 = "EX7";

1435 
åack
[137].
ty≥
 = 
NODE_EXIT
;

1436 
åack
[137].
ªvî£
 = &track[136];

1438 
åack
[138].
ödex
 = 138;

1439 
åack
[138].
«me
 = "EN8";

1440 
åack
[138].
ty≥
 = 
NODE_ENTER
;

1441 
åack
[138].
ªvî£
 = &track[139];

1442 
åack
[138].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[11].edge[DIR_AHEAD];

1443 
åack
[138].
edge
[
DIR_AHEAD
].
§c
 = &track[138];

1444 
åack
[138].
edge
[
DIR_AHEAD
].
de°
 = &track[10];

1445 
åack
[138].
edge
[
DIR_AHEAD
].
di°
 = 43;

1447 
åack
[139].
ödex
 = 139;

1448 
åack
[139].
«me
 = "EX8";

1449 
åack
[139].
ty≥
 = 
NODE_EXIT
;

1450 
åack
[139].
ªvî£
 = &track[138];

1452 
åack
[140].
ödex
 = 140;

1453 
åack
[140].
«me
 = "EN9";

1454 
åack
[140].
ty≥
 = 
NODE_ENTER
;

1455 
åack
[140].
ªvî£
 = &track[141];

1456 
åack
[140].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[25].edge[DIR_AHEAD];

1457 
åack
[140].
edge
[
DIR_AHEAD
].
§c
 = &track[140];

1458 
åack
[140].
edge
[
DIR_AHEAD
].
de°
 = &track[24];

1459 
åack
[140].
edge
[
DIR_AHEAD
].
di°
 = 50;

1461 
åack
[141].
ödex
 = 141;

1462 
åack
[141].
«me
 = "EX9";

1463 
åack
[141].
ty≥
 = 
NODE_EXIT
;

1464 
åack
[141].
ªvî£
 = &track[140];

1466 
åack
[142].
ödex
 = 142;

1467 
åack
[142].
«me
 = "EN10";

1468 
åack
[142].
ty≥
 = 
NODE_ENTER
;

1469 
åack
[142].
ªvî£
 = &track[143];

1470 
åack
[142].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[27].edge[DIR_AHEAD];

1471 
åack
[142].
edge
[
DIR_AHEAD
].
§c
 = &track[142];

1472 
åack
[142].
edge
[
DIR_AHEAD
].
de°
 = &track[26];

1473 
åack
[142].
edge
[
DIR_AHEAD
].
di°
 = 50;

1475 
åack
[143].
ödex
 = 143;

1476 
åack
[143].
«me
 = "EX10";

1477 
åack
[143].
ty≥
 = 
NODE_EXIT
;

1478 
åack
[143].
ªvî£
 = &track[142];

1479 
	}
}

1481 
	$öô_åackb
(
åack_node
 *
åack
) {

1483 
åack
[0].
ödex
 = 0;

1484 
åack
[0].
«me
 = "A1";

1485 
åack
[0].
ty≥
 = 
NODE_SENSOR
;

1486 
åack
[0].
num
 = 0;

1487 
åack
[0].
ªvî£
 = &track[1];

1488 
åack
[0].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[102].edge[
DIR_STRAIGHT
];

1489 
åack
[0].
edge
[
DIR_AHEAD
].
§c
 = &track[0];

1490 
åack
[0].
edge
[
DIR_AHEAD
].
de°
 = &track[103];

1491 
åack
[0].
edge
[
DIR_AHEAD
].
di°
 = 231;

1493 
åack
[1].
ödex
 = 1;

1494 
åack
[1].
«me
 = "A2";

1495 
åack
[1].
ty≥
 = 
NODE_SENSOR
;

1496 
åack
[1].
num
 = 1;

1497 
åack
[1].
ªvî£
 = &track[0];

1498 
åack
[1].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[132].edge[DIR_AHEAD];

1499 
åack
[1].
edge
[
DIR_AHEAD
].
§c
 = &track[1];

1500 
åack
[1].
edge
[
DIR_AHEAD
].
de°
 = &track[133];

1501 
åack
[1].
edge
[
DIR_AHEAD
].
di°
 = 504;

1503 
åack
[2].
ödex
 = 2;

1504 
åack
[2].
«me
 = "A3";

1505 
åack
[2].
ty≥
 = 
NODE_SENSOR
;

1506 
åack
[2].
num
 = 2;

1507 
åack
[2].
ªvî£
 = &track[3];

1508 
åack
[2].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[107].edge[DIR_AHEAD];

1509 
åack
[2].
edge
[
DIR_AHEAD
].
§c
 = &track[2];

1510 
åack
[2].
edge
[
DIR_AHEAD
].
de°
 = &track[106];

1511 
åack
[2].
edge
[
DIR_AHEAD
].
di°
 = 43;

1513 
åack
[3].
ödex
 = 3;

1514 
åack
[3].
«me
 = "A4";

1515 
åack
[3].
ty≥
 = 
NODE_SENSOR
;

1516 
åack
[3].
num
 = 3;

1517 
åack
[3].
ªvî£
 = &track[2];

1518 
åack
[3].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[30].edge[DIR_AHEAD];

1519 
åack
[3].
edge
[
DIR_AHEAD
].
§c
 = &track[3];

1520 
åack
[3].
edge
[
DIR_AHEAD
].
de°
 = &track[31];

1521 
åack
[3].
edge
[
DIR_AHEAD
].
di°
 = 437;

1523 
åack
[4].
ödex
 = 4;

1524 
åack
[4].
«me
 = "A5";

1525 
åack
[4].
ty≥
 = 
NODE_SENSOR
;

1526 
åack
[4].
num
 = 4;

1527 
åack
[4].
ªvî£
 = &track[5];

1528 
åack
[4].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[84].edge[
DIR_STRAIGHT
];

1529 
åack
[4].
edge
[
DIR_AHEAD
].
§c
 = &track[4];

1530 
åack
[4].
edge
[
DIR_AHEAD
].
de°
 = &track[85];

1531 
åack
[4].
edge
[
DIR_AHEAD
].
di°
 = 231;

1533 
åack
[5].
ödex
 = 5;

1534 
åack
[5].
«me
 = "A6";

1535 
åack
[5].
ty≥
 = 
NODE_SENSOR
;

1536 
åack
[5].
num
 = 5;

1537 
åack
[5].
ªvî£
 = &track[4];

1538 
åack
[5].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[24].edge[DIR_AHEAD];

1539 
åack
[5].
edge
[
DIR_AHEAD
].
§c
 = &track[5];

1540 
åack
[5].
edge
[
DIR_AHEAD
].
de°
 = &track[25];

1541 
åack
[5].
edge
[
DIR_AHEAD
].
di°
 = 642;

1543 
åack
[6].
ödex
 = 6;

1544 
åack
[6].
«me
 = "A7";

1545 
åack
[6].
ty≥
 = 
NODE_SENSOR
;

1546 
åack
[6].
num
 = 6;

1547 
åack
[6].
ªvî£
 = &track[7];

1548 
åack
[6].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[26].edge[DIR_AHEAD];

1549 
åack
[6].
edge
[
DIR_AHEAD
].
§c
 = &track[6];

1550 
åack
[6].
edge
[
DIR_AHEAD
].
de°
 = &track[27];

1551 
åack
[6].
edge
[
DIR_AHEAD
].
di°
 = 470;

1553 
åack
[7].
ödex
 = 7;

1554 
åack
[7].
«me
 = "A8";

1555 
åack
[7].
ty≥
 = 
NODE_SENSOR
;

1556 
åack
[7].
num
 = 7;

1557 
åack
[7].
ªvî£
 = &track[6];

1558 
åack
[7].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[82].edge[
DIR_CURVED
];

1559 
åack
[7].
edge
[
DIR_AHEAD
].
§c
 = &track[7];

1560 
åack
[7].
edge
[
DIR_AHEAD
].
de°
 = &track[83];

1561 
åack
[7].
edge
[
DIR_AHEAD
].
di°
 = 229;

1563 
åack
[8].
ödex
 = 8;

1564 
åack
[8].
«me
 = "A9";

1565 
åack
[8].
ty≥
 = 
NODE_SENSOR
;

1566 
åack
[8].
num
 = 8;

1567 
åack
[8].
ªvî£
 = &track[9];

1568 
åack
[8].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[22].edge[DIR_AHEAD];

1569 
åack
[8].
edge
[
DIR_AHEAD
].
§c
 = &track[8];

1570 
åack
[8].
edge
[
DIR_AHEAD
].
de°
 = &track[23];

1571 
åack
[8].
edge
[
DIR_AHEAD
].
di°
 = 289;

1573 
åack
[9].
ödex
 = 9;

1574 
åack
[9].
«me
 = "A10";

1575 
åack
[9].
ty≥
 = 
NODE_SENSOR
;

1576 
åack
[9].
num
 = 9;

1577 
åack
[9].
ªvî£
 = &track[8];

1578 
åack
[9].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[80].edge[
DIR_CURVED
];

1579 
åack
[9].
edge
[
DIR_AHEAD
].
§c
 = &track[9];

1580 
åack
[9].
edge
[
DIR_AHEAD
].
de°
 = &track[81];

1581 
åack
[9].
edge
[
DIR_AHEAD
].
di°
 = 229;

1583 
åack
[10].
ödex
 = 10;

1584 
åack
[10].
«me
 = "A11";

1585 
åack
[10].
ty≥
 = 
NODE_SENSOR
;

1586 
åack
[10].
num
 = 10;

1587 
åack
[10].
ªvî£
 = &track[11];

1588 
åack
[10].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[80].edge[
DIR_STRAIGHT
];

1589 
åack
[10].
edge
[
DIR_AHEAD
].
§c
 = &track[10];

1590 
åack
[10].
edge
[
DIR_AHEAD
].
de°
 = &track[81];

1591 
åack
[10].
edge
[
DIR_AHEAD
].
di°
 = 282;

1593 
åack
[11].
ödex
 = 11;

1594 
åack
[11].
«me
 = "A12";

1595 
åack
[11].
ty≥
 = 
NODE_SENSOR
;

1596 
åack
[11].
num
 = 11;

1597 
åack
[11].
ªvî£
 = &track[10];

1598 
åack
[11].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[14].edge[DIR_AHEAD];

1599 
åack
[11].
edge
[
DIR_AHEAD
].
§c
 = &track[11];

1600 
åack
[11].
edge
[
DIR_AHEAD
].
de°
 = &track[15];

1601 
åack
[11].
edge
[
DIR_AHEAD
].
di°
 = 814;

1603 
åack
[12].
ödex
 = 12;

1604 
åack
[12].
«me
 = "A13";

1605 
åack
[12].
ty≥
 = 
NODE_SENSOR
;

1606 
åack
[12].
num
 = 12;

1607 
åack
[12].
ªvî£
 = &track[13];

1608 
åack
[12].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[86].edge[
DIR_CURVED
];

1609 
åack
[12].
edge
[
DIR_AHEAD
].
§c
 = &track[12];

1610 
åack
[12].
edge
[
DIR_AHEAD
].
de°
 = &track[87];

1611 
åack
[12].
edge
[
DIR_AHEAD
].
di°
 = 236;

1613 
åack
[13].
ödex
 = 13;

1614 
åack
[13].
«me
 = "A14";

1615 
åack
[13].
ty≥
 = 
NODE_SENSOR
;

1616 
åack
[13].
num
 = 13;

1617 
åack
[13].
ªvî£
 = &track[12];

1618 
åack
[13].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[130].edge[DIR_AHEAD];

1619 
åack
[13].
edge
[
DIR_AHEAD
].
§c
 = &track[13];

1620 
åack
[13].
edge
[
DIR_AHEAD
].
de°
 = &track[131];

1621 
åack
[13].
edge
[
DIR_AHEAD
].
di°
 = 325;

1623 
åack
[14].
ödex
 = 14;

1624 
åack
[14].
«me
 = "A15";

1625 
åack
[14].
ty≥
 = 
NODE_SENSOR
;

1626 
åack
[14].
num
 = 14;

1627 
åack
[14].
ªvî£
 = &track[15];

1628 
åack
[14].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[11].edge[DIR_AHEAD];

1629 
åack
[14].
edge
[
DIR_AHEAD
].
§c
 = &track[14];

1630 
åack
[14].
edge
[
DIR_AHEAD
].
de°
 = &track[10];

1631 
åack
[14].
edge
[
DIR_AHEAD
].
di°
 = 814;

1633 
åack
[15].
ödex
 = 15;

1634 
åack
[15].
«me
 = "A16";

1635 
åack
[15].
ty≥
 = 
NODE_SENSOR
;

1636 
åack
[15].
num
 = 15;

1637 
åack
[15].
ªvî£
 = &track[14];

1638 
åack
[15].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[86].edge[
DIR_STRAIGHT
];

1639 
åack
[15].
edge
[
DIR_AHEAD
].
§c
 = &track[15];

1640 
åack
[15].
edge
[
DIR_AHEAD
].
de°
 = &track[87];

1641 
åack
[15].
edge
[
DIR_AHEAD
].
di°
 = 275;

1643 
åack
[16].
ödex
 = 16;

1644 
åack
[16].
«me
 = "B1";

1645 
åack
[16].
ty≥
 = 
NODE_SENSOR
;

1646 
åack
[16].
num
 = 16;

1647 
åack
[16].
ªvî£
 = &track[17];

1648 
åack
[16].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[60].edge[DIR_AHEAD];

1649 
åack
[16].
edge
[
DIR_AHEAD
].
§c
 = &track[16];

1650 
åack
[16].
edge
[
DIR_AHEAD
].
de°
 = &track[61];

1651 
åack
[16].
edge
[
DIR_AHEAD
].
di°
 = 404;

1653 
åack
[17].
ödex
 = 17;

1654 
åack
[17].
«me
 = "B2";

1655 
åack
[17].
ty≥
 = 
NODE_SENSOR
;

1656 
åack
[17].
num
 = 17;

1657 
åack
[17].
ªvî£
 = &track[16];

1658 
åack
[17].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[110].edge[
DIR_STRAIGHT
];

1659 
åack
[17].
edge
[
DIR_AHEAD
].
§c
 = &track[17];

1660 
åack
[17].
edge
[
DIR_AHEAD
].
de°
 = &track[111];

1661 
åack
[17].
edge
[
DIR_AHEAD
].
di°
 = 231;

1663 
åack
[18].
ödex
 = 18;

1664 
åack
[18].
«me
 = "B3";

1665 
åack
[18].
ty≥
 = 
NODE_SENSOR
;

1666 
åack
[18].
num
 = 18;

1667 
åack
[18].
ªvî£
 = &track[19];

1668 
åack
[18].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[32].edge[DIR_AHEAD];

1669 
åack
[18].
edge
[
DIR_AHEAD
].
§c
 = &track[18];

1670 
åack
[18].
edge
[
DIR_AHEAD
].
de°
 = &track[33];

1671 
åack
[18].
edge
[
DIR_AHEAD
].
di°
 = 201;

1673 
åack
[19].
ödex
 = 19;

1674 
åack
[19].
«me
 = "B4";

1675 
åack
[19].
ty≥
 = 
NODE_SENSOR
;

1676 
åack
[19].
num
 = 19;

1677 
åack
[19].
ªvî£
 = &track[18];

1678 
åack
[19].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[110].edge[
DIR_CURVED
];

1679 
åack
[19].
edge
[
DIR_AHEAD
].
§c
 = &track[19];

1680 
åack
[19].
edge
[
DIR_AHEAD
].
de°
 = &track[111];

1681 
åack
[19].
edge
[
DIR_AHEAD
].
di°
 = 239;

1683 
åack
[20].
ödex
 = 20;

1684 
åack
[20].
«me
 = "B5";

1685 
åack
[20].
ty≥
 = 
NODE_SENSOR
;

1686 
åack
[20].
num
 = 20;

1687 
åack
[20].
ªvî£
 = &track[21];

1688 
åack
[20].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[51].edge[DIR_AHEAD];

1689 
åack
[20].
edge
[
DIR_AHEAD
].
§c
 = &track[20];

1690 
åack
[20].
edge
[
DIR_AHEAD
].
de°
 = &track[50];

1691 
åack
[20].
edge
[
DIR_AHEAD
].
di°
 = 404;

1693 
åack
[21].
ödex
 = 21;

1694 
åack
[21].
«me
 = "B6";

1695 
åack
[21].
ty≥
 = 
NODE_SENSOR
;

1696 
åack
[21].
num
 = 21;

1697 
åack
[21].
ªvî£
 = &track[20];

1698 
åack
[21].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[104].edge[
DIR_STRAIGHT
];

1699 
åack
[21].
edge
[
DIR_AHEAD
].
§c
 = &track[21];

1700 
åack
[21].
edge
[
DIR_AHEAD
].
de°
 = &track[105];

1701 
åack
[21].
edge
[
DIR_AHEAD
].
di°
 = 231;

1703 
åack
[22].
ödex
 = 22;

1704 
åack
[22].
«me
 = "B7";

1705 
åack
[22].
ty≥
 = 
NODE_SENSOR
;

1706 
åack
[22].
num
 = 22;

1707 
åack
[22].
ªvî£
 = &track[23];

1708 
åack
[22].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[8].edge[DIR_AHEAD];

1709 
åack
[22].
edge
[
DIR_AHEAD
].
§c
 = &track[22];

1710 
åack
[22].
edge
[
DIR_AHEAD
].
de°
 = &track[9];

1711 
åack
[22].
edge
[
DIR_AHEAD
].
di°
 = 289;

1713 
åack
[23].
ödex
 = 23;

1714 
åack
[23].
«me
 = "B8";

1715 
åack
[23].
ty≥
 = 
NODE_SENSOR
;

1716 
åack
[23].
num
 = 23;

1717 
åack
[23].
ªvî£
 = &track[22];

1718 
åack
[23].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[134].edge[DIR_AHEAD];

1719 
åack
[23].
edge
[
DIR_AHEAD
].
§c
 = &track[23];

1720 
åack
[23].
edge
[
DIR_AHEAD
].
de°
 = &track[135];

1721 
åack
[23].
edge
[
DIR_AHEAD
].
di°
 = 43;

1723 
åack
[24].
ödex
 = 24;

1724 
åack
[24].
«me
 = "B9";

1725 
åack
[24].
ty≥
 = 
NODE_SENSOR
;

1726 
åack
[24].
num
 = 24;

1727 
åack
[24].
ªvî£
 = &track[25];

1728 
åack
[24].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[5].edge[DIR_AHEAD];

1729 
åack
[24].
edge
[
DIR_AHEAD
].
§c
 = &track[24];

1730 
åack
[24].
edge
[
DIR_AHEAD
].
de°
 = &track[4];

1731 
åack
[24].
edge
[
DIR_AHEAD
].
di°
 = 642;

1733 
åack
[25].
ödex
 = 25;

1734 
åack
[25].
«me
 = "B10";

1735 
åack
[25].
ty≥
 = 
NODE_SENSOR
;

1736 
åack
[25].
num
 = 25;

1737 
åack
[25].
ªvî£
 = &track[24];

1738 
åack
[25].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[136].edge[DIR_AHEAD];

1739 
åack
[25].
edge
[
DIR_AHEAD
].
§c
 = &track[25];

1740 
åack
[25].
edge
[
DIR_AHEAD
].
de°
 = &track[137];

1741 
åack
[25].
edge
[
DIR_AHEAD
].
di°
 = 50;

1743 
åack
[26].
ödex
 = 26;

1744 
åack
[26].
«me
 = "B11";

1745 
åack
[26].
ty≥
 = 
NODE_SENSOR
;

1746 
åack
[26].
num
 = 26;

1747 
åack
[26].
ªvî£
 = &track[27];

1748 
åack
[26].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[6].edge[DIR_AHEAD];

1749 
åack
[26].
edge
[
DIR_AHEAD
].
§c
 = &track[26];

1750 
åack
[26].
edge
[
DIR_AHEAD
].
de°
 = &track[7];

1751 
åack
[26].
edge
[
DIR_AHEAD
].
di°
 = 470;

1753 
åack
[27].
ödex
 = 27;

1754 
åack
[27].
«me
 = "B12";

1755 
åack
[27].
ty≥
 = 
NODE_SENSOR
;

1756 
åack
[27].
num
 = 27;

1757 
åack
[27].
ªvî£
 = &track[26];

1758 
åack
[27].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[138].edge[DIR_AHEAD];

1759 
åack
[27].
edge
[
DIR_AHEAD
].
§c
 = &track[27];

1760 
åack
[27].
edge
[
DIR_AHEAD
].
de°
 = &track[139];

1761 
åack
[27].
edge
[
DIR_AHEAD
].
di°
 = 50;

1763 
åack
[28].
ödex
 = 28;

1764 
åack
[28].
«me
 = "B13";

1765 
åack
[28].
ty≥
 = 
NODE_SENSOR
;

1766 
åack
[28].
num
 = 28;

1767 
åack
[28].
ªvî£
 = &track[29];

1768 
åack
[28].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[118].edge[
DIR_CURVED
];

1769 
åack
[28].
edge
[
DIR_AHEAD
].
§c
 = &track[28];

1770 
åack
[28].
edge
[
DIR_AHEAD
].
de°
 = &track[119];

1771 
åack
[28].
edge
[
DIR_AHEAD
].
di°
 = 239;

1773 
åack
[29].
ödex
 = 29;

1774 
åack
[29].
«me
 = "B14";

1775 
åack
[29].
ty≥
 = 
NODE_SENSOR
;

1776 
åack
[29].
num
 = 29;

1777 
åack
[29].
ªvî£
 = &track[28];

1778 
åack
[29].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[62].edge[DIR_AHEAD];

1779 
åack
[29].
edge
[
DIR_AHEAD
].
§c
 = &track[29];

1780 
åack
[29].
edge
[
DIR_AHEAD
].
de°
 = &track[63];

1781 
åack
[29].
edge
[
DIR_AHEAD
].
di°
 = 201;

1783 
åack
[30].
ödex
 = 30;

1784 
åack
[30].
«me
 = "B15";

1785 
åack
[30].
ty≥
 = 
NODE_SENSOR
;

1786 
åack
[30].
num
 = 30;

1787 
åack
[30].
ªvî£
 = &track[31];

1788 
åack
[30].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[3].edge[DIR_AHEAD];

1789 
åack
[30].
edge
[
DIR_AHEAD
].
§c
 = &track[30];

1790 
åack
[30].
edge
[
DIR_AHEAD
].
de°
 = &track[2];

1791 
åack
[30].
edge
[
DIR_AHEAD
].
di°
 = 437;

1793 
åack
[31].
ödex
 = 31;

1794 
åack
[31].
«me
 = "B16";

1795 
åack
[31].
ty≥
 = 
NODE_SENSOR
;

1796 
åack
[31].
num
 = 31;

1797 
åack
[31].
ªvî£
 = &track[30];

1798 
åack
[31].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[109].edge[DIR_AHEAD];

1799 
åack
[31].
edge
[
DIR_AHEAD
].
§c
 = &track[31];

1800 
åack
[31].
edge
[
DIR_AHEAD
].
de°
 = &track[108];

1801 
åack
[31].
edge
[
DIR_AHEAD
].
di°
 = 50;

1803 
åack
[32].
ödex
 = 32;

1804 
åack
[32].
«me
 = "C1";

1805 
åack
[32].
ty≥
 = 
NODE_SENSOR
;

1806 
åack
[32].
num
 = 32;

1807 
åack
[32].
ªvî£
 = &track[33];

1808 
åack
[32].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[18].edge[DIR_AHEAD];

1809 
åack
[32].
edge
[
DIR_AHEAD
].
§c
 = &track[32];

1810 
åack
[32].
edge
[
DIR_AHEAD
].
de°
 = &track[19];

1811 
åack
[32].
edge
[
DIR_AHEAD
].
di°
 = 201;

1813 
åack
[33].
ödex
 = 33;

1814 
åack
[33].
«me
 = "C2";

1815 
åack
[33].
ty≥
 = 
NODE_SENSOR
;

1816 
åack
[33].
num
 = 33;

1817 
åack
[33].
ªvî£
 = &track[32];

1818 
åack
[33].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[116].edge[
DIR_CURVED
];

1819 
åack
[33].
edge
[
DIR_AHEAD
].
§c
 = &track[33];

1820 
åack
[33].
edge
[
DIR_AHEAD
].
de°
 = &track[117];

1821 
åack
[33].
edge
[
DIR_AHEAD
].
di°
 = 246;

1823 
åack
[34].
ödex
 = 34;

1824 
åack
[34].
«me
 = "C3";

1825 
åack
[34].
ty≥
 = 
NODE_SENSOR
;

1826 
åack
[34].
num
 = 34;

1827 
åack
[34].
ªvî£
 = &track[35];

1828 
åack
[34].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[128].edge[DIR_AHEAD];

1829 
åack
[34].
edge
[
DIR_AHEAD
].
§c
 = &track[34];

1830 
åack
[34].
edge
[
DIR_AHEAD
].
de°
 = &track[129];

1831 
åack
[34].
edge
[
DIR_AHEAD
].
di°
 = 514;

1833 
åack
[35].
ödex
 = 35;

1834 
åack
[35].
«me
 = "C4";

1835 
åack
[35].
ty≥
 = 
NODE_SENSOR
;

1836 
åack
[35].
num
 = 35;

1837 
åack
[35].
ªvî£
 = &track[34];

1838 
åack
[35].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[88].edge[
DIR_STRAIGHT
];

1839 
åack
[35].
edge
[
DIR_AHEAD
].
§c
 = &track[35];

1840 
åack
[35].
edge
[
DIR_AHEAD
].
de°
 = &track[89];

1841 
åack
[35].
edge
[
DIR_AHEAD
].
di°
 = 239;

1843 
åack
[36].
ödex
 = 36;

1844 
åack
[36].
«me
 = "C5";

1845 
åack
[36].
ty≥
 = 
NODE_SENSOR
;

1846 
åack
[36].
num
 = 36;

1847 
åack
[36].
ªvî£
 = &track[37];

1848 
åack
[36].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[91].edge[DIR_AHEAD];

1849 
åack
[36].
edge
[
DIR_AHEAD
].
§c
 = &track[36];

1850 
åack
[36].
edge
[
DIR_AHEAD
].
de°
 = &track[90];

1851 
åack
[36].
edge
[
DIR_AHEAD
].
di°
 = 61;

1853 
åack
[37].
ödex
 = 37;

1854 
åack
[37].
«me
 = "C6";

1855 
åack
[37].
ty≥
 = 
NODE_SENSOR
;

1856 
åack
[37].
num
 = 37;

1857 
åack
[37].
ªvî£
 = &track[36];

1858 
åack
[37].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[108].edge[
DIR_STRAIGHT
];

1859 
åack
[37].
edge
[
DIR_AHEAD
].
§c
 = &track[37];

1860 
åack
[37].
edge
[
DIR_AHEAD
].
de°
 = &track[109];

1861 
åack
[37].
edge
[
DIR_AHEAD
].
di°
 = 433;

1863 
åack
[38].
ödex
 = 38;

1864 
åack
[38].
«me
 = "C7";

1865 
åack
[38].
ty≥
 = 
NODE_SENSOR
;

1866 
åack
[38].
num
 = 38;

1867 
åack
[38].
ªvî£
 = &track[39];

1868 
åack
[38].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[114].edge[
DIR_STRAIGHT
];

1869 
åack
[38].
edge
[
DIR_AHEAD
].
§c
 = &track[38];

1870 
åack
[38].
edge
[
DIR_AHEAD
].
de°
 = &track[115];

1871 
åack
[38].
edge
[
DIR_AHEAD
].
di°
 = 231;

1873 
åack
[39].
ödex
 = 39;

1874 
åack
[39].
«me
 = "C8";

1875 
åack
[39].
ty≥
 = 
NODE_SENSOR
;

1876 
åack
[39].
num
 = 39;

1877 
åack
[39].
ªvî£
 = &track[38];

1878 
åack
[39].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[85].edge[DIR_AHEAD];

1879 
åack
[39].
edge
[
DIR_AHEAD
].
§c
 = &track[39];

1880 
åack
[39].
edge
[
DIR_AHEAD
].
de°
 = &track[84];

1881 
åack
[39].
edge
[
DIR_AHEAD
].
di°
 = 128;

1883 
åack
[40].
ödex
 = 40;

1884 
åack
[40].
«me
 = "C9";

1885 
åack
[40].
ty≥
 = 
NODE_SENSOR
;

1886 
åack
[40].
num
 = 40;

1887 
åack
[40].
ªvî£
 = &track[41];

1888 
åack
[40].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[108].edge[
DIR_CURVED
];

1889 
åack
[40].
edge
[
DIR_AHEAD
].
§c
 = &track[40];

1890 
åack
[40].
edge
[
DIR_AHEAD
].
de°
 = &track[109];

1891 
åack
[40].
edge
[
DIR_AHEAD
].
di°
 = 326;

1893 
åack
[41].
ödex
 = 41;

1894 
åack
[41].
«me
 = "C10";

1895 
åack
[41].
ty≥
 = 
NODE_SENSOR
;

1896 
åack
[41].
num
 = 41;

1897 
åack
[41].
ªvî£
 = &track[40];

1898 
åack
[41].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[111].edge[DIR_AHEAD];

1899 
åack
[41].
edge
[
DIR_AHEAD
].
§c
 = &track[41];

1900 
åack
[41].
edge
[
DIR_AHEAD
].
de°
 = &track[110];

1901 
åack
[41].
edge
[
DIR_AHEAD
].
di°
 = 128;

1903 
åack
[42].
ödex
 = 42;

1904 
åack
[42].
«me
 = "C11";

1905 
åack
[42].
ty≥
 = 
NODE_SENSOR
;

1906 
åack
[42].
num
 = 42;

1907 
åack
[42].
ªvî£
 = &track[43];

1908 
åack
[42].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[105].edge[DIR_AHEAD];

1909 
åack
[42].
edge
[
DIR_AHEAD
].
§c
 = &track[42];

1910 
åack
[42].
edge
[
DIR_AHEAD
].
de°
 = &track[104];

1911 
åack
[42].
edge
[
DIR_AHEAD
].
di°
 = 120;

1913 
åack
[43].
ödex
 = 43;

1914 
åack
[43].
«me
 = "C12";

1915 
åack
[43].
ty≥
 = 
NODE_SENSOR
;

1916 
åack
[43].
num
 = 43;

1917 
åack
[43].
ªvî£
 = &track[42];

1918 
åack
[43].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[106].edge[
DIR_CURVED
];

1919 
åack
[43].
edge
[
DIR_AHEAD
].
§c
 = &track[43];

1920 
åack
[43].
edge
[
DIR_AHEAD
].
de°
 = &track[107];

1921 
åack
[43].
edge
[
DIR_AHEAD
].
di°
 = 333;

1923 
åack
[44].
ödex
 = 44;

1924 
åack
[44].
«me
 = "C13";

1925 
åack
[44].
ty≥
 = 
NODE_SENSOR
;

1926 
åack
[44].
num
 = 44;

1927 
åack
[44].
ªvî£
 = &track[45];

1928 
åack
[44].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[71].edge[DIR_AHEAD];

1929 
åack
[44].
edge
[
DIR_AHEAD
].
§c
 = &track[44];

1930 
åack
[44].
edge
[
DIR_AHEAD
].
de°
 = &track[70];

1931 
åack
[44].
edge
[
DIR_AHEAD
].
di°
 = 780;

1933 
åack
[45].
ödex
 = 45;

1934 
åack
[45].
«me
 = "C14";

1935 
åack
[45].
ty≥
 = 
NODE_SENSOR
;

1936 
åack
[45].
num
 = 45;

1937 
åack
[45].
ªvî£
 = &track[44];

1938 
åack
[45].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[101].edge[DIR_AHEAD];

1939 
åack
[45].
edge
[
DIR_AHEAD
].
§c
 = &track[45];

1940 
åack
[45].
edge
[
DIR_AHEAD
].
de°
 = &track[100];

1941 
åack
[45].
edge
[
DIR_AHEAD
].
di°
 = 50;

1943 
åack
[46].
ödex
 = 46;

1944 
åack
[46].
«me
 = "C15";

1945 
åack
[46].
ty≥
 = 
NODE_SENSOR
;

1946 
åack
[46].
num
 = 46;

1947 
åack
[46].
ªvî£
 = &track[47];

1948 
åack
[46].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[58].edge[DIR_AHEAD];

1949 
åack
[46].
edge
[
DIR_AHEAD
].
§c
 = &track[46];

1950 
åack
[46].
edge
[
DIR_AHEAD
].
de°
 = &track[59];

1951 
åack
[46].
edge
[
DIR_AHEAD
].
di°
 = 404;

1953 
åack
[47].
ödex
 = 47;

1954 
åack
[47].
«me
 = "C16";

1955 
åack
[47].
ty≥
 = 
NODE_SENSOR
;

1956 
åack
[47].
num
 = 47;

1957 
åack
[47].
ªvî£
 = &track[46];

1958 
åack
[47].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[90].edge[
DIR_STRAIGHT
];

1959 
åack
[47].
edge
[
DIR_AHEAD
].
§c
 = &track[47];

1960 
åack
[47].
edge
[
DIR_AHEAD
].
de°
 = &track[91];

1961 
åack
[47].
edge
[
DIR_AHEAD
].
di°
 = 239;

1963 
åack
[48].
ödex
 = 48;

1964 
åack
[48].
«me
 = "D1";

1965 
åack
[48].
ty≥
 = 
NODE_SENSOR
;

1966 
åack
[48].
num
 = 48;

1967 
åack
[48].
ªvî£
 = &track[49];

1968 
åack
[48].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[120].edge[
DIR_CURVED
];

1969 
åack
[48].
edge
[
DIR_AHEAD
].
§c
 = &track[48];

1970 
åack
[48].
edge
[
DIR_AHEAD
].
de°
 = &track[121];

1971 
åack
[48].
edge
[
DIR_AHEAD
].
di°
 = 246;

1973 
åack
[49].
ödex
 = 49;

1974 
åack
[49].
«me
 = "D2";

1975 
åack
[49].
ty≥
 = 
NODE_SENSOR
;

1976 
åack
[49].
num
 = 49;

1977 
åack
[49].
ªvî£
 = &track[48];

1978 
åack
[49].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[66].edge[DIR_AHEAD];

1979 
åack
[49].
edge
[
DIR_AHEAD
].
§c
 = &track[49];

1980 
åack
[49].
edge
[
DIR_AHEAD
].
de°
 = &track[67];

1981 
åack
[49].
edge
[
DIR_AHEAD
].
di°
 = 201;

1983 
åack
[50].
ödex
 = 50;

1984 
åack
[50].
«me
 = "D3";

1985 
åack
[50].
ty≥
 = 
NODE_SENSOR
;

1986 
åack
[50].
num
 = 50;

1987 
åack
[50].
ªvî£
 = &track[51];

1988 
åack
[50].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[98].edge[
DIR_STRAIGHT
];

1989 
åack
[50].
edge
[
DIR_AHEAD
].
§c
 = &track[50];

1990 
åack
[50].
edge
[
DIR_AHEAD
].
de°
 = &track[99];

1991 
åack
[50].
edge
[
DIR_AHEAD
].
di°
 = 239;

1993 
åack
[51].
ödex
 = 51;

1994 
åack
[51].
«me
 = "D4";

1995 
åack
[51].
ty≥
 = 
NODE_SENSOR
;

1996 
åack
[51].
num
 = 51;

1997 
åack
[51].
ªvî£
 = &track[50];

1998 
åack
[51].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[20].edge[DIR_AHEAD];

1999 
åack
[51].
edge
[
DIR_AHEAD
].
§c
 = &track[51];

2000 
åack
[51].
edge
[
DIR_AHEAD
].
de°
 = &track[21];

2001 
åack
[51].
edge
[
DIR_AHEAD
].
di°
 = 404;

2003 
åack
[52].
ödex
 = 52;

2004 
åack
[52].
«me
 = "D5";

2005 
åack
[52].
ty≥
 = 
NODE_SENSOR
;

2006 
åack
[52].
num
 = 52;

2007 
åack
[52].
ªvî£
 = &track[53];

2008 
åack
[52].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[68].edge[DIR_AHEAD];

2009 
åack
[52].
edge
[
DIR_AHEAD
].
§c
 = &track[52];

2010 
åack
[52].
edge
[
DIR_AHEAD
].
de°
 = &track[69];

2011 
åack
[52].
edge
[
DIR_AHEAD
].
di°
 = 282;

2013 
åack
[53].
ödex
 = 53;

2014 
åack
[53].
«me
 = "D6";

2015 
åack
[53].
ty≥
 = 
NODE_SENSOR
;

2016 
åack
[53].
num
 = 53;

2017 
åack
[53].
ªvî£
 = &track[52];

2018 
åack
[53].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[96].edge[
DIR_CURVED
];

2019 
åack
[53].
edge
[
DIR_AHEAD
].
§c
 = &track[53];

2020 
åack
[53].
edge
[
DIR_AHEAD
].
de°
 = &track[97];

2021 
åack
[53].
edge
[
DIR_AHEAD
].
di°
 = 229;

2023 
åack
[54].
ödex
 = 54;

2024 
åack
[54].
«me
 = "D7";

2025 
åack
[54].
ty≥
 = 
NODE_SENSOR
;

2026 
åack
[54].
num
 = 54;

2027 
åack
[54].
ªvî£
 = &track[55];

2028 
åack
[54].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[96].edge[
DIR_STRAIGHT
];

2029 
åack
[54].
edge
[
DIR_AHEAD
].
§c
 = &track[54];

2030 
åack
[54].
edge
[
DIR_AHEAD
].
de°
 = &track[97];

2031 
åack
[54].
edge
[
DIR_AHEAD
].
di°
 = 309;

2033 
åack
[55].
ödex
 = 55;

2034 
åack
[55].
«me
 = "D8";

2035 
åack
[55].
ty≥
 = 
NODE_SENSOR
;

2036 
åack
[55].
num
 = 55;

2037 
åack
[55].
ªvî£
 = &track[54];

2038 
åack
[55].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[70].edge[DIR_AHEAD];

2039 
åack
[55].
edge
[
DIR_AHEAD
].
§c
 = &track[55];

2040 
åack
[55].
edge
[
DIR_AHEAD
].
de°
 = &track[71];

2041 
åack
[55].
edge
[
DIR_AHEAD
].
di°
 = 376;

2043 
åack
[56].
ödex
 = 56;

2044 
åack
[56].
«me
 = "D9";

2045 
åack
[56].
ty≥
 = 
NODE_SENSOR
;

2046 
åack
[56].
num
 = 56;

2047 
åack
[56].
ªvî£
 = &track[57];

2048 
åack
[56].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[74].edge[DIR_AHEAD];

2049 
åack
[56].
edge
[
DIR_AHEAD
].
§c
 = &track[56];

2050 
åack
[56].
edge
[
DIR_AHEAD
].
de°
 = &track[75];

2051 
åack
[56].
edge
[
DIR_AHEAD
].
di°
 = 282;

2053 
åack
[57].
ödex
 = 57;

2054 
åack
[57].
«me
 = "D10";

2055 
åack
[57].
ty≥
 = 
NODE_SENSOR
;

2056 
åack
[57].
num
 = 57;

2057 
åack
[57].
ªvî£
 = &track[56];

2058 
åack
[57].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[94].edge[
DIR_STRAIGHT
];

2059 
åack
[57].
edge
[
DIR_AHEAD
].
§c
 = &track[57];

2060 
åack
[57].
edge
[
DIR_AHEAD
].
de°
 = &track[95];

2061 
åack
[57].
edge
[
DIR_AHEAD
].
di°
 = 316;

2063 
åack
[57].
ödex
 = 57;

2064 
åack
[58].
«me
 = "D11";

2065 
åack
[58].
ty≥
 = 
NODE_SENSOR
;

2066 
åack
[58].
num
 = 58;

2067 
åack
[58].
ªvî£
 = &track[59];

2068 
åack
[58].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[46].edge[DIR_AHEAD];

2069 
åack
[58].
edge
[
DIR_AHEAD
].
§c
 = &track[58];

2070 
åack
[58].
edge
[
DIR_AHEAD
].
de°
 = &track[47];

2071 
åack
[58].
edge
[
DIR_AHEAD
].
di°
 = 404;

2073 
åack
[59].
ödex
 = 59;

2074 
åack
[59].
«me
 = "D12";

2075 
åack
[59].
ty≥
 = 
NODE_SENSOR
;

2076 
åack
[59].
num
 = 59;

2077 
åack
[59].
ªvî£
 = &track[58];

2078 
åack
[59].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[92].edge[
DIR_STRAIGHT
];

2079 
åack
[59].
edge
[
DIR_AHEAD
].
§c
 = &track[59];

2080 
åack
[59].
edge
[
DIR_AHEAD
].
de°
 = &track[93];

2081 
åack
[59].
edge
[
DIR_AHEAD
].
di°
 = 231;

2083 
åack
[60].
ödex
 = 60;

2084 
åack
[60].
«me
 = "D13";

2085 
åack
[60].
ty≥
 = 
NODE_SENSOR
;

2086 
åack
[60].
num
 = 60;

2087 
åack
[60].
ªvî£
 = &track[61];

2088 
åack
[60].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[16].edge[DIR_AHEAD];

2089 
åack
[60].
edge
[
DIR_AHEAD
].
§c
 = &track[60];

2090 
åack
[60].
edge
[
DIR_AHEAD
].
de°
 = &track[17];

2091 
åack
[60].
edge
[
DIR_AHEAD
].
di°
 = 404;

2093 
åack
[61].
ödex
 = 61;

2094 
åack
[61].
«me
 = "D14";

2095 
åack
[61].
ty≥
 = 
NODE_SENSOR
;

2096 
åack
[61].
num
 = 61;

2097 
åack
[61].
ªvî£
 = &track[60];

2098 
åack
[61].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[112].edge[
DIR_STRAIGHT
];

2099 
åack
[61].
edge
[
DIR_AHEAD
].
§c
 = &track[61];

2100 
åack
[61].
edge
[
DIR_AHEAD
].
de°
 = &track[113];

2101 
åack
[61].
edge
[
DIR_AHEAD
].
di°
 = 239;

2103 
åack
[62].
ödex
 = 62;

2104 
åack
[62].
«me
 = "D15";

2105 
åack
[62].
ty≥
 = 
NODE_SENSOR
;

2106 
åack
[62].
num
 = 62;

2107 
åack
[62].
ªvî£
 = &track[63];

2108 
åack
[62].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[29].edge[DIR_AHEAD];

2109 
åack
[62].
edge
[
DIR_AHEAD
].
§c
 = &track[62];

2110 
åack
[62].
edge
[
DIR_AHEAD
].
de°
 = &track[28];

2111 
åack
[62].
edge
[
DIR_AHEAD
].
di°
 = 201;

2113 
åack
[63].
ödex
 = 63;

2114 
åack
[63].
«me
 = "D16";

2115 
åack
[63].
ty≥
 = 
NODE_SENSOR
;

2116 
åack
[63].
num
 = 63;

2117 
åack
[63].
ªvî£
 = &track[62];

2118 
åack
[63].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[112].edge[
DIR_CURVED
];

2119 
åack
[63].
edge
[
DIR_AHEAD
].
§c
 = &track[63];

2120 
åack
[63].
edge
[
DIR_AHEAD
].
de°
 = &track[113];

2121 
åack
[63].
edge
[
DIR_AHEAD
].
di°
 = 246;

2123 
åack
[64].
ödex
 = 64;

2124 
åack
[64].
«me
 = "E1";

2125 
åack
[64].
ty≥
 = 
NODE_SENSOR
;

2126 
åack
[64].
num
 = 64;

2127 
åack
[64].
ªvî£
 = &track[65];

2128 
åack
[64].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[122].edge[
DIR_CURVED
];

2129 
åack
[64].
edge
[
DIR_AHEAD
].
§c
 = &track[64];

2130 
åack
[64].
edge
[
DIR_AHEAD
].
de°
 = &track[123];

2131 
åack
[64].
edge
[
DIR_AHEAD
].
di°
 = 239;

2133 
åack
[65].
ödex
 = 65;

2134 
åack
[65].
«me
 = "E2";

2135 
åack
[65].
ty≥
 = 
NODE_SENSOR
;

2136 
åack
[65].
num
 = 65;

2137 
åack
[65].
ªvî£
 = &track[64];

2138 
åack
[65].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[79].edge[DIR_AHEAD];

2139 
åack
[65].
edge
[
DIR_AHEAD
].
§c
 = &track[65];

2140 
åack
[65].
edge
[
DIR_AHEAD
].
de°
 = &track[78];

2141 
åack
[65].
edge
[
DIR_AHEAD
].
di°
 = 201;

2143 
åack
[66].
ödex
 = 66;

2144 
åack
[66].
«me
 = "E3";

2145 
åack
[66].
ty≥
 = 
NODE_SENSOR
;

2146 
åack
[66].
num
 = 66;

2147 
åack
[66].
ªvî£
 = &track[67];

2148 
åack
[66].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[49].edge[DIR_AHEAD];

2149 
åack
[66].
edge
[
DIR_AHEAD
].
§c
 = &track[66];

2150 
åack
[66].
edge
[
DIR_AHEAD
].
de°
 = &track[48];

2151 
åack
[66].
edge
[
DIR_AHEAD
].
di°
 = 201;

2153 
åack
[67].
ödex
 = 67;

2154 
åack
[67].
«me
 = "E4";

2155 
åack
[67].
ty≥
 = 
NODE_SENSOR
;

2156 
åack
[67].
num
 = 67;

2157 
åack
[67].
ªvî£
 = &track[66];

2158 
åack
[67].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[98].edge[
DIR_CURVED
];

2159 
åack
[67].
edge
[
DIR_AHEAD
].
§c
 = &track[67];

2160 
åack
[67].
edge
[
DIR_AHEAD
].
de°
 = &track[99];

2161 
åack
[67].
edge
[
DIR_AHEAD
].
di°
 = 239;

2163 
åack
[68].
ödex
 = 68;

2164 
åack
[68].
«me
 = "E5";

2165 
åack
[68].
ty≥
 = 
NODE_SENSOR
;

2166 
åack
[68].
num
 = 68;

2167 
åack
[68].
ªvî£
 = &track[69];

2168 
åack
[68].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[52].edge[DIR_AHEAD];

2169 
åack
[68].
edge
[
DIR_AHEAD
].
§c
 = &track[68];

2170 
åack
[68].
edge
[
DIR_AHEAD
].
de°
 = &track[53];

2171 
åack
[68].
edge
[
DIR_AHEAD
].
di°
 = 282;

2173 
åack
[69].
ödex
 = 69;

2174 
åack
[69].
«me
 = "E6";

2175 
åack
[69].
ty≥
 = 
NODE_SENSOR
;

2176 
åack
[69].
num
 = 69;

2177 
åack
[69].
ªvî£
 = &track[68];

2178 
åack
[69].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[99].edge[DIR_AHEAD];

2179 
åack
[69].
edge
[
DIR_AHEAD
].
§c
 = &track[69];

2180 
åack
[69].
edge
[
DIR_AHEAD
].
de°
 = &track[98];

2181 
åack
[69].
edge
[
DIR_AHEAD
].
di°
 = 50;

2183 
åack
[70].
ödex
 = 70;

2184 
åack
[70].
«me
 = "E7";

2185 
åack
[70].
ty≥
 = 
NODE_SENSOR
;

2186 
åack
[70].
num
 = 70;

2187 
åack
[70].
ªvî£
 = &track[71];

2188 
åack
[70].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[55].edge[DIR_AHEAD];

2189 
åack
[70].
edge
[
DIR_AHEAD
].
§c
 = &track[70];

2190 
åack
[70].
edge
[
DIR_AHEAD
].
de°
 = &track[54];

2191 
åack
[70].
edge
[
DIR_AHEAD
].
di°
 = 376;

2193 
åack
[71].
ödex
 = 71;

2194 
åack
[71].
«me
 = "E8";

2195 
åack
[71].
ty≥
 = 
NODE_SENSOR
;

2196 
åack
[71].
num
 = 71;

2197 
åack
[71].
ªvî£
 = &track[70];

2198 
åack
[71].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[44].edge[DIR_AHEAD];

2199 
åack
[71].
edge
[
DIR_AHEAD
].
§c
 = &track[71];

2200 
åack
[71].
edge
[
DIR_AHEAD
].
de°
 = &track[45];

2201 
åack
[71].
edge
[
DIR_AHEAD
].
di°
 = 780;

2203 
åack
[72].
ödex
 = 72;

2204 
åack
[72].
«me
 = "E9";

2205 
åack
[72].
ty≥
 = 
NODE_SENSOR
;

2206 
åack
[72].
num
 = 72;

2207 
åack
[72].
ªvî£
 = &track[73];

2208 
åack
[72].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[94].edge[
DIR_CURVED
];

2209 
åack
[72].
edge
[
DIR_AHEAD
].
§c
 = &track[72];

2210 
åack
[72].
edge
[
DIR_AHEAD
].
de°
 = &track[95];

2211 
åack
[72].
edge
[
DIR_AHEAD
].
di°
 = 239;

2213 
åack
[73].
ödex
 = 73;

2214 
åack
[73].
«me
 = "E10";

2215 
åack
[73].
ty≥
 = 
NODE_SENSOR
;

2216 
åack
[73].
num
 = 73;

2217 
åack
[73].
ªvî£
 = &track[72];

2218 
åack
[73].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[77].edge[DIR_AHEAD];

2219 
åack
[73].
edge
[
DIR_AHEAD
].
§c
 = &track[73];

2220 
åack
[73].
edge
[
DIR_AHEAD
].
de°
 = &track[76];

2221 
åack
[73].
edge
[
DIR_AHEAD
].
di°
 = 282;

2223 
åack
[74].
ödex
 = 74;

2224 
åack
[74].
«me
 = "E11";

2225 
åack
[74].
ty≥
 = 
NODE_SENSOR
;

2226 
åack
[74].
num
 = 74;

2227 
åack
[74].
ªvî£
 = &track[75];

2228 
åack
[74].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[56].edge[DIR_AHEAD];

2229 
åack
[74].
edge
[
DIR_AHEAD
].
§c
 = &track[74];

2230 
åack
[74].
edge
[
DIR_AHEAD
].
de°
 = &track[57];

2231 
åack
[74].
edge
[
DIR_AHEAD
].
di°
 = 282;

2233 
åack
[75].
ödex
 = 75;

2234 
åack
[75].
«me
 = "E12";

2235 
åack
[75].
ty≥
 = 
NODE_SENSOR
;

2236 
åack
[75].
num
 = 75;

2237 
åack
[75].
ªvî£
 = &track[74];

2238 
åack
[75].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[93].edge[DIR_AHEAD];

2239 
åack
[75].
edge
[
DIR_AHEAD
].
§c
 = &track[75];

2240 
åack
[75].
edge
[
DIR_AHEAD
].
de°
 = &track[92];

2241 
åack
[75].
edge
[
DIR_AHEAD
].
di°
 = 43;

2243 
åack
[76].
ödex
 = 76;

2244 
åack
[76].
«me
 = "E13";

2245 
åack
[76].
ty≥
 = 
NODE_SENSOR
;

2246 
åack
[76].
num
 = 76;

2247 
åack
[76].
ªvî£
 = &track[77];

2248 
åack
[76].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[113].edge[DIR_AHEAD];

2249 
åack
[76].
edge
[
DIR_AHEAD
].
§c
 = &track[76];

2250 
åack
[76].
edge
[
DIR_AHEAD
].
de°
 = &track[112];

2251 
åack
[76].
edge
[
DIR_AHEAD
].
di°
 = 43;

2253 
åack
[77].
ödex
 = 77;

2254 
åack
[77].
«me
 = "E14";

2255 
åack
[77].
ty≥
 = 
NODE_SENSOR
;

2256 
åack
[77].
num
 = 77;

2257 
åack
[77].
ªvî£
 = &track[76];

2258 
åack
[77].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[73].edge[DIR_AHEAD];

2259 
åack
[77].
edge
[
DIR_AHEAD
].
§c
 = &track[77];

2260 
åack
[77].
edge
[
DIR_AHEAD
].
de°
 = &track[72];

2261 
åack
[77].
edge
[
DIR_AHEAD
].
di°
 = 282;

2263 
åack
[78].
ödex
 = 78;

2264 
åack
[78].
«me
 = "E15";

2265 
åack
[78].
ty≥
 = 
NODE_SENSOR
;

2266 
åack
[78].
num
 = 78;

2267 
åack
[78].
ªvî£
 = &track[79];

2268 
åack
[78].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[104].edge[
DIR_CURVED
];

2269 
åack
[78].
edge
[
DIR_AHEAD
].
§c
 = &track[78];

2270 
åack
[78].
edge
[
DIR_AHEAD
].
de°
 = &track[105];

2271 
åack
[78].
edge
[
DIR_AHEAD
].
di°
 = 246;

2273 
åack
[79].
ödex
 = 79;

2274 
åack
[79].
«me
 = "E16";

2275 
åack
[79].
ty≥
 = 
NODE_SENSOR
;

2276 
åack
[79].
num
 = 79;

2277 
åack
[79].
ªvî£
 = &track[78];

2278 
åack
[79].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[65].edge[DIR_AHEAD];

2279 
åack
[79].
edge
[
DIR_AHEAD
].
§c
 = &track[79];

2280 
åack
[79].
edge
[
DIR_AHEAD
].
de°
 = &track[64];

2281 
åack
[79].
edge
[
DIR_AHEAD
].
di°
 = 201;

2283 
åack
[80].
ödex
 = 80;

2284 
åack
[80].
«me
 = "BR1";

2285 
åack
[80].
ty≥
 = 
NODE_BRANCH
;

2286 
åack
[80].
num
 = 1;

2287 
åack
[80].
ªvî£
 = &track[81];

2288 
åack
[80].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[10].edge[
DIR_AHEAD
];

2289 
åack
[80].
edge
[
DIR_STRAIGHT
].
§c
 = &track[80];

2290 
åack
[80].
edge
[
DIR_STRAIGHT
].
de°
 = &track[11];

2291 
åack
[80].
edge
[
DIR_STRAIGHT
].
di°
 = 282;

2292 
åack
[80].
edge
[
DIR_CURVED
].
ªvî£
 = &åack[9].edge[
DIR_AHEAD
];

2293 
åack
[80].
edge
[
DIR_CURVED
].
§c
 = &track[80];

2294 
åack
[80].
edge
[
DIR_CURVED
].
de°
 = &track[8];

2295 
åack
[80].
edge
[
DIR_CURVED
].
di°
 = 229;

2297 
åack
[81].
ödex
 = 81;

2298 
åack
[81].
«me
 = "MR1";

2299 
åack
[81].
ty≥
 = 
NODE_MERGE
;

2300 
åack
[81].
num
 = 1;

2301 
åack
[81].
ªvî£
 = &track[80];

2302 
åack
[81].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[82].edge[
DIR_STRAIGHT
];

2303 
åack
[81].
edge
[
DIR_AHEAD
].
§c
 = &track[81];

2304 
åack
[81].
edge
[
DIR_AHEAD
].
de°
 = &track[83];

2305 
åack
[81].
edge
[
DIR_AHEAD
].
di°
 = 188;

2307 
åack
[82].
ödex
 = 82;

2308 
åack
[82].
«me
 = "BR2";

2309 
åack
[82].
ty≥
 = 
NODE_BRANCH
;

2310 
åack
[82].
num
 = 2;

2311 
åack
[82].
ªvî£
 = &track[83];

2312 
åack
[82].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[81].edge[
DIR_AHEAD
];

2313 
åack
[82].
edge
[
DIR_STRAIGHT
].
§c
 = &track[82];

2314 
åack
[82].
edge
[
DIR_STRAIGHT
].
de°
 = &track[80];

2315 
åack
[82].
edge
[
DIR_STRAIGHT
].
di°
 = 188;

2316 
åack
[82].
edge
[
DIR_CURVED
].
ªvî£
 = &åack[7].edge[
DIR_AHEAD
];

2317 
åack
[82].
edge
[
DIR_CURVED
].
§c
 = &track[82];

2318 
åack
[82].
edge
[
DIR_CURVED
].
de°
 = &track[6];

2319 
åack
[82].
edge
[
DIR_CURVED
].
di°
 = 229;

2321 
åack
[83].
ödex
 = 83;

2322 
åack
[83].
«me
 = "MR2";

2323 
åack
[83].
ty≥
 = 
NODE_MERGE
;

2324 
åack
[83].
num
 = 2;

2325 
åack
[83].
ªvî£
 = &track[82];

2326 
åack
[83].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[84].edge[
DIR_CURVED
];

2327 
åack
[83].
edge
[
DIR_AHEAD
].
§c
 = &track[83];

2328 
åack
[83].
edge
[
DIR_AHEAD
].
de°
 = &track[85];

2329 
åack
[83].
edge
[
DIR_AHEAD
].
di°
 = 185;

2331 
åack
[84].
ödex
 = 84;

2332 
åack
[84].
«me
 = "BR3";

2333 
åack
[84].
ty≥
 = 
NODE_BRANCH
;

2334 
åack
[84].
num
 = 3;

2335 
åack
[84].
ªvî£
 = &track[85];

2336 
åack
[84].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[4].edge[
DIR_AHEAD
];

2337 
åack
[84].
edge
[
DIR_STRAIGHT
].
§c
 = &track[84];

2338 
åack
[84].
edge
[
DIR_STRAIGHT
].
de°
 = &track[5];

2339 
åack
[84].
edge
[
DIR_STRAIGHT
].
di°
 = 231;

2340 
åack
[84].
edge
[
DIR_CURVED
].
ªvî£
 = &åack[83].edge[
DIR_AHEAD
];

2341 
åack
[84].
edge
[
DIR_CURVED
].
§c
 = &track[84];

2342 
åack
[84].
edge
[
DIR_CURVED
].
de°
 = &track[82];

2343 
åack
[84].
edge
[
DIR_CURVED
].
di°
 = 185;

2345 
åack
[85].
ödex
 = 85;

2346 
åack
[85].
«me
 = "MR3";

2347 
åack
[85].
ty≥
 = 
NODE_MERGE
;

2348 
åack
[85].
num
 = 3;

2349 
åack
[85].
ªvî£
 = &track[84];

2350 
åack
[85].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[39].edge[DIR_AHEAD];

2351 
åack
[85].
edge
[
DIR_AHEAD
].
§c
 = &track[85];

2352 
åack
[85].
edge
[
DIR_AHEAD
].
de°
 = &track[38];

2353 
åack
[85].
edge
[
DIR_AHEAD
].
di°
 = 128;

2355 
åack
[86].
ödex
 = 86;

2356 
åack
[86].
«me
 = "BR4";

2357 
åack
[86].
ty≥
 = 
NODE_BRANCH
;

2358 
åack
[86].
num
 = 4;

2359 
åack
[86].
ªvî£
 = &track[87];

2360 
åack
[86].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[15].edge[
DIR_AHEAD
];

2361 
åack
[86].
edge
[
DIR_STRAIGHT
].
§c
 = &track[86];

2362 
åack
[86].
edge
[
DIR_STRAIGHT
].
de°
 = &track[14];

2363 
åack
[86].
edge
[
DIR_STRAIGHT
].
di°
 = 275;

2364 
åack
[86].
edge
[
DIR_CURVED
].
ªvî£
 = &åack[12].edge[
DIR_AHEAD
];

2365 
åack
[86].
edge
[
DIR_CURVED
].
§c
 = &track[86];

2366 
åack
[86].
edge
[
DIR_CURVED
].
de°
 = &track[13];

2367 
åack
[86].
edge
[
DIR_CURVED
].
di°
 = 236;

2369 
åack
[87].
ödex
 = 87;

2370 
åack
[87].
«me
 = "MR4";

2371 
åack
[87].
ty≥
 = 
NODE_MERGE
;

2372 
åack
[87].
num
 = 4;

2373 
åack
[87].
ªvî£
 = &track[86];

2374 
åack
[87].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[102].edge[
DIR_CURVED
];

2375 
åack
[87].
edge
[
DIR_AHEAD
].
§c
 = &track[87];

2376 
åack
[87].
edge
[
DIR_AHEAD
].
de°
 = &track[103];

2377 
åack
[87].
edge
[
DIR_AHEAD
].
di°
 = 185;

2379 
åack
[88].
ödex
 = 88;

2380 
åack
[88].
«me
 = "BR5";

2381 
åack
[88].
ty≥
 = 
NODE_BRANCH
;

2382 
åack
[88].
num
 = 5;

2383 
åack
[88].
ªvî£
 = &track[89];

2384 
åack
[88].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[35].edge[
DIR_AHEAD
];

2385 
åack
[88].
edge
[
DIR_STRAIGHT
].
§c
 = &track[88];

2386 
åack
[88].
edge
[
DIR_STRAIGHT
].
de°
 = &track[34];

2387 
åack
[88].
edge
[
DIR_STRAIGHT
].
di°
 = 239;

2388 
åack
[88].
edge
[
DIR_CURVED
].
ªvî£
 = &track[92].edge[DIR_CURVED];

2389 
åack
[88].
edge
[
DIR_CURVED
].
§c
 = &track[88];

2390 
åack
[88].
edge
[
DIR_CURVED
].
de°
 = &track[93];

2391 
åack
[88].
edge
[
DIR_CURVED
].
di°
 = 371;

2393 
åack
[89].
ödex
 = 89;

2394 
åack
[89].
«me
 = "MR5";

2395 
åack
[89].
ty≥
 = 
NODE_MERGE
;

2396 
åack
[89].
num
 = 5;

2397 
åack
[89].
ªvî£
 = &track[88];

2398 
åack
[89].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[115].edge[DIR_AHEAD];

2399 
åack
[89].
edge
[
DIR_AHEAD
].
§c
 = &track[89];

2400 
åack
[89].
edge
[
DIR_AHEAD
].
de°
 = &track[114];

2401 
åack
[89].
edge
[
DIR_AHEAD
].
di°
 = 155;

2403 
åack
[90].
ödex
 = 90;

2404 
åack
[90].
«me
 = "BR6";

2405 
åack
[90].
ty≥
 = 
NODE_BRANCH
;

2406 
åack
[90].
num
 = 6;

2407 
åack
[90].
ªvî£
 = &track[91];

2408 
åack
[90].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[47].edge[
DIR_AHEAD
];

2409 
åack
[90].
edge
[
DIR_STRAIGHT
].
§c
 = &track[90];

2410 
åack
[90].
edge
[
DIR_STRAIGHT
].
de°
 = &track[46];

2411 
åack
[90].
edge
[
DIR_STRAIGHT
].
di°
 = 239;

2412 
åack
[90].
edge
[
DIR_CURVED
].
ªvî£
 = &track[114].edge[DIR_CURVED];

2413 
åack
[90].
edge
[
DIR_CURVED
].
§c
 = &track[90];

2414 
åack
[90].
edge
[
DIR_CURVED
].
de°
 = &track[115];

2415 
åack
[90].
edge
[
DIR_CURVED
].
di°
 = 371;

2417 
åack
[91].
ödex
 = 91;

2418 
åack
[91].
«me
 = "MR6";

2419 
åack
[91].
ty≥
 = 
NODE_MERGE
;

2420 
åack
[91].
num
 = 6;

2421 
åack
[91].
ªvî£
 = &track[90];

2422 
åack
[91].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[36].edge[DIR_AHEAD];

2423 
åack
[91].
edge
[
DIR_AHEAD
].
§c
 = &track[91];

2424 
åack
[91].
edge
[
DIR_AHEAD
].
de°
 = &track[37];

2425 
åack
[91].
edge
[
DIR_AHEAD
].
di°
 = 61;

2427 
åack
[92].
ödex
 = 92;

2428 
åack
[92].
«me
 = "BR7";

2429 
åack
[92].
ty≥
 = 
NODE_BRANCH
;

2430 
åack
[92].
num
 = 7;

2431 
åack
[92].
ªvî£
 = &track[93];

2432 
åack
[92].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[59].edge[
DIR_AHEAD
];

2433 
åack
[92].
edge
[
DIR_STRAIGHT
].
§c
 = &track[92];

2434 
åack
[92].
edge
[
DIR_STRAIGHT
].
de°
 = &track[58];

2435 
åack
[92].
edge
[
DIR_STRAIGHT
].
di°
 = 231;

2436 
åack
[92].
edge
[
DIR_CURVED
].
ªvî£
 = &track[88].edge[DIR_CURVED];

2437 
åack
[92].
edge
[
DIR_CURVED
].
§c
 = &track[92];

2438 
åack
[92].
edge
[
DIR_CURVED
].
de°
 = &track[89];

2439 
åack
[92].
edge
[
DIR_CURVED
].
di°
 = 371;

2441 
åack
[93].
ödex
 = 93;

2442 
åack
[93].
«me
 = "MR7";

2443 
åack
[93].
ty≥
 = 
NODE_MERGE
;

2444 
åack
[93].
num
 = 7;

2445 
åack
[93].
ªvî£
 = &track[92];

2446 
åack
[93].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[75].edge[DIR_AHEAD];

2447 
åack
[93].
edge
[
DIR_AHEAD
].
§c
 = &track[93];

2448 
åack
[93].
edge
[
DIR_AHEAD
].
de°
 = &track[74];

2449 
åack
[93].
edge
[
DIR_AHEAD
].
di°
 = 43;

2451 
åack
[94].
ödex
 = 94;

2452 
åack
[94].
«me
 = "BR8";

2453 
åack
[94].
ty≥
 = 
NODE_BRANCH
;

2454 
åack
[94].
num
 = 8;

2455 
åack
[94].
ªvî£
 = &track[95];

2456 
åack
[94].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[57].edge[
DIR_AHEAD
];

2457 
åack
[94].
edge
[
DIR_STRAIGHT
].
§c
 = &track[94];

2458 
åack
[94].
edge
[
DIR_STRAIGHT
].
de°
 = &track[56];

2459 
åack
[94].
edge
[
DIR_STRAIGHT
].
di°
 = 316;

2460 
åack
[94].
edge
[
DIR_CURVED
].
ªvî£
 = &åack[72].edge[
DIR_AHEAD
];

2461 
åack
[94].
edge
[
DIR_CURVED
].
§c
 = &track[94];

2462 
åack
[94].
edge
[
DIR_CURVED
].
de°
 = &track[73];

2463 
åack
[94].
edge
[
DIR_CURVED
].
di°
 = 239;

2465 
åack
[95].
ödex
 = 95;

2466 
åack
[95].
«me
 = "MR8";

2467 
åack
[95].
ty≥
 = 
NODE_MERGE
;

2468 
åack
[95].
num
 = 8;

2469 
åack
[95].
ªvî£
 = &track[94];

2470 
åack
[95].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[97].edge[DIR_AHEAD];

2471 
åack
[95].
edge
[
DIR_AHEAD
].
§c
 = &track[95];

2472 
åack
[95].
edge
[
DIR_AHEAD
].
de°
 = &track[96];

2473 
åack
[95].
edge
[
DIR_AHEAD
].
di°
 = 155;

2475 
åack
[96].
ödex
 = 96;

2476 
åack
[96].
«me
 = "BR9";

2477 
åack
[96].
ty≥
 = 
NODE_BRANCH
;

2478 
åack
[96].
num
 = 9;

2479 
åack
[96].
ªvî£
 = &track[97];

2480 
åack
[96].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[54].edge[
DIR_AHEAD
];

2481 
åack
[96].
edge
[
DIR_STRAIGHT
].
§c
 = &track[96];

2482 
åack
[96].
edge
[
DIR_STRAIGHT
].
de°
 = &track[55];

2483 
åack
[96].
edge
[
DIR_STRAIGHT
].
di°
 = 309;

2484 
åack
[96].
edge
[
DIR_CURVED
].
ªvî£
 = &åack[53].edge[
DIR_AHEAD
];

2485 
åack
[96].
edge
[
DIR_CURVED
].
§c
 = &track[96];

2486 
åack
[96].
edge
[
DIR_CURVED
].
de°
 = &track[52];

2487 
åack
[96].
edge
[
DIR_CURVED
].
di°
 = 229;

2489 
åack
[97].
ödex
 = 97;

2490 
åack
[97].
«me
 = "MR9";

2491 
åack
[97].
ty≥
 = 
NODE_MERGE
;

2492 
åack
[97].
num
 = 9;

2493 
åack
[97].
ªvî£
 = &track[96];

2494 
åack
[97].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[95].edge[DIR_AHEAD];

2495 
åack
[97].
edge
[
DIR_AHEAD
].
§c
 = &track[97];

2496 
åack
[97].
edge
[
DIR_AHEAD
].
de°
 = &track[94];

2497 
åack
[97].
edge
[
DIR_AHEAD
].
di°
 = 155;

2499 
åack
[98].
ödex
 = 98;

2500 
åack
[98].
«me
 = "BR10";

2501 
åack
[98].
ty≥
 = 
NODE_BRANCH
;

2502 
åack
[98].
num
 = 10;

2503 
åack
[98].
ªvî£
 = &track[99];

2504 
åack
[98].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[50].edge[
DIR_AHEAD
];

2505 
åack
[98].
edge
[
DIR_STRAIGHT
].
§c
 = &track[98];

2506 
åack
[98].
edge
[
DIR_STRAIGHT
].
de°
 = &track[51];

2507 
åack
[98].
edge
[
DIR_STRAIGHT
].
di°
 = 239;

2508 
åack
[98].
edge
[
DIR_CURVED
].
ªvî£
 = &åack[67].edge[
DIR_AHEAD
];

2509 
åack
[98].
edge
[
DIR_CURVED
].
§c
 = &track[98];

2510 
åack
[98].
edge
[
DIR_CURVED
].
de°
 = &track[66];

2511 
åack
[98].
edge
[
DIR_CURVED
].
di°
 = 239;

2513 
åack
[99].
ödex
 = 99;

2514 
åack
[99].
«me
 = "MR10";

2515 
åack
[99].
ty≥
 = 
NODE_MERGE
;

2516 
åack
[99].
num
 = 10;

2517 
åack
[99].
ªvî£
 = &track[98];

2518 
åack
[99].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[69].edge[DIR_AHEAD];

2519 
åack
[99].
edge
[
DIR_AHEAD
].
§c
 = &track[99];

2520 
åack
[99].
edge
[
DIR_AHEAD
].
de°
 = &track[68];

2521 
åack
[99].
edge
[
DIR_AHEAD
].
di°
 = 50;

2523 
åack
[100].
ödex
 = 100;

2524 
åack
[100].
«me
 = "BR11";

2525 
åack
[100].
ty≥
 = 
NODE_BRANCH
;

2526 
åack
[100].
num
 = 11;

2527 
åack
[100].
ªvî£
 = &track[101];

2528 
åack
[100].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[103].edge[
DIR_AHEAD
];

2529 
åack
[100].
edge
[
DIR_STRAIGHT
].
§c
 = &track[100];

2530 
åack
[100].
edge
[
DIR_STRAIGHT
].
de°
 = &track[102];

2531 
åack
[100].
edge
[
DIR_STRAIGHT
].
di°
 = 188;

2532 
åack
[100].
edge
[
DIR_CURVED
].
ªvî£
 = &åack[106].edge[
DIR_STRAIGHT
];

2533 
åack
[100].
edge
[
DIR_CURVED
].
§c
 = &track[100];

2534 
åack
[100].
edge
[
DIR_CURVED
].
de°
 = &track[107];

2535 
åack
[100].
edge
[
DIR_CURVED
].
di°
 = 495;

2537 
åack
[101].
ödex
 = 101;

2538 
åack
[101].
«me
 = "MR11";

2539 
åack
[101].
ty≥
 = 
NODE_MERGE
;

2540 
åack
[101].
num
 = 11;

2541 
åack
[101].
ªvî£
 = &track[100];

2542 
åack
[101].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[45].edge[DIR_AHEAD];

2543 
åack
[101].
edge
[
DIR_AHEAD
].
§c
 = &track[101];

2544 
åack
[101].
edge
[
DIR_AHEAD
].
de°
 = &track[44];

2545 
åack
[101].
edge
[
DIR_AHEAD
].
di°
 = 50;

2547 
åack
[102].
ödex
 = 102;

2548 
åack
[102].
«me
 = "BR12";

2549 
åack
[102].
ty≥
 = 
NODE_BRANCH
;

2550 
åack
[102].
num
 = 12;

2551 
åack
[102].
ªvî£
 = &track[103];

2552 
åack
[102].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[0].edge[
DIR_AHEAD
];

2553 
åack
[102].
edge
[
DIR_STRAIGHT
].
§c
 = &track[102];

2554 
åack
[102].
edge
[
DIR_STRAIGHT
].
de°
 = &track[1];

2555 
åack
[102].
edge
[
DIR_STRAIGHT
].
di°
 = 231;

2556 
åack
[102].
edge
[
DIR_CURVED
].
ªvî£
 = &åack[87].edge[
DIR_AHEAD
];

2557 
åack
[102].
edge
[
DIR_CURVED
].
§c
 = &track[102];

2558 
åack
[102].
edge
[
DIR_CURVED
].
de°
 = &track[86];

2559 
åack
[102].
edge
[
DIR_CURVED
].
di°
 = 185;

2561 
åack
[103].
ödex
 = 103;

2562 
åack
[103].
«me
 = "MR12";

2563 
åack
[103].
ty≥
 = 
NODE_MERGE
;

2564 
åack
[103].
num
 = 12;

2565 
åack
[103].
ªvî£
 = &track[102];

2566 
åack
[103].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[100].edge[
DIR_STRAIGHT
];

2567 
åack
[103].
edge
[
DIR_AHEAD
].
§c
 = &track[103];

2568 
åack
[103].
edge
[
DIR_AHEAD
].
de°
 = &track[101];

2569 
åack
[103].
edge
[
DIR_AHEAD
].
di°
 = 188;

2571 
åack
[104].
ödex
 = 104;

2572 
åack
[104].
«me
 = "BR13";

2573 
åack
[104].
ty≥
 = 
NODE_BRANCH
;

2574 
åack
[104].
num
 = 13;

2575 
åack
[104].
ªvî£
 = &track[105];

2576 
åack
[104].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[21].edge[
DIR_AHEAD
];

2577 
åack
[104].
edge
[
DIR_STRAIGHT
].
§c
 = &track[104];

2578 
åack
[104].
edge
[
DIR_STRAIGHT
].
de°
 = &track[20];

2579 
åack
[104].
edge
[
DIR_STRAIGHT
].
di°
 = 231;

2580 
åack
[104].
edge
[
DIR_CURVED
].
ªvî£
 = &åack[78].edge[
DIR_AHEAD
];

2581 
åack
[104].
edge
[
DIR_CURVED
].
§c
 = &track[104];

2582 
åack
[104].
edge
[
DIR_CURVED
].
de°
 = &track[79];

2583 
åack
[104].
edge
[
DIR_CURVED
].
di°
 = 246;

2585 
åack
[105].
ödex
 = 105;

2586 
åack
[105].
«me
 = "MR13";

2587 
åack
[105].
ty≥
 = 
NODE_MERGE
;

2588 
åack
[105].
num
 = 13;

2589 
åack
[105].
ªvî£
 = &track[104];

2590 
åack
[105].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[42].edge[DIR_AHEAD];

2591 
åack
[105].
edge
[
DIR_AHEAD
].
§c
 = &track[105];

2592 
åack
[105].
edge
[
DIR_AHEAD
].
de°
 = &track[43];

2593 
åack
[105].
edge
[
DIR_AHEAD
].
di°
 = 120;

2595 
åack
[106].
ödex
 = 106;

2596 
åack
[106].
«me
 = "BR14";

2597 
åack
[106].
ty≥
 = 
NODE_BRANCH
;

2598 
åack
[106].
num
 = 14;

2599 
åack
[106].
ªvî£
 = &track[107];

2600 
åack
[106].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[100].edge[
DIR_CURVED
];

2601 
åack
[106].
edge
[
DIR_STRAIGHT
].
§c
 = &track[106];

2602 
åack
[106].
edge
[
DIR_STRAIGHT
].
de°
 = &track[101];

2603 
åack
[106].
edge
[
DIR_STRAIGHT
].
di°
 = 495;

2604 
åack
[106].
edge
[
DIR_CURVED
].
ªvî£
 = &åack[43].edge[
DIR_AHEAD
];

2605 
åack
[106].
edge
[
DIR_CURVED
].
§c
 = &track[106];

2606 
åack
[106].
edge
[
DIR_CURVED
].
de°
 = &track[42];

2607 
åack
[106].
edge
[
DIR_CURVED
].
di°
 = 333;

2609 
åack
[107].
ödex
 = 107;

2610 
åack
[107].
«me
 = "MR14";

2611 
åack
[107].
ty≥
 = 
NODE_MERGE
;

2612 
åack
[107].
num
 = 14;

2613 
åack
[107].
ªvî£
 = &track[106];

2614 
åack
[107].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[2].edge[DIR_AHEAD];

2615 
åack
[107].
edge
[
DIR_AHEAD
].
§c
 = &track[107];

2616 
åack
[107].
edge
[
DIR_AHEAD
].
de°
 = &track[3];

2617 
åack
[107].
edge
[
DIR_AHEAD
].
di°
 = 43;

2619 
åack
[108].
ödex
 = 108;

2620 
åack
[108].
«me
 = "BR15";

2621 
åack
[108].
ty≥
 = 
NODE_BRANCH
;

2622 
åack
[108].
num
 = 15;

2623 
åack
[108].
ªvî£
 = &track[109];

2624 
åack
[108].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[37].edge[
DIR_AHEAD
];

2625 
åack
[108].
edge
[
DIR_STRAIGHT
].
§c
 = &track[108];

2626 
åack
[108].
edge
[
DIR_STRAIGHT
].
de°
 = &track[36];

2627 
åack
[108].
edge
[
DIR_STRAIGHT
].
di°
 = 433;

2628 
åack
[108].
edge
[
DIR_CURVED
].
ªvî£
 = &åack[40].edge[
DIR_AHEAD
];

2629 
åack
[108].
edge
[
DIR_CURVED
].
§c
 = &track[108];

2630 
åack
[108].
edge
[
DIR_CURVED
].
de°
 = &track[41];

2631 
åack
[108].
edge
[
DIR_CURVED
].
di°
 = 326;

2633 
åack
[109].
ödex
 = 109;

2634 
åack
[109].
«me
 = "MR15";

2635 
åack
[109].
ty≥
 = 
NODE_MERGE
;

2636 
åack
[109].
num
 = 15;

2637 
åack
[109].
ªvî£
 = &track[108];

2638 
åack
[109].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[31].edge[DIR_AHEAD];

2639 
åack
[109].
edge
[
DIR_AHEAD
].
§c
 = &track[109];

2640 
åack
[109].
edge
[
DIR_AHEAD
].
de°
 = &track[30];

2641 
åack
[109].
edge
[
DIR_AHEAD
].
di°
 = 50;

2643 
åack
[110].
ödex
 = 110;

2644 
åack
[110].
«me
 = "BR16";

2645 
åack
[110].
ty≥
 = 
NODE_BRANCH
;

2646 
åack
[110].
num
 = 16;

2647 
åack
[110].
ªvî£
 = &track[111];

2648 
åack
[110].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[17].edge[
DIR_AHEAD
];

2649 
åack
[110].
edge
[
DIR_STRAIGHT
].
§c
 = &track[110];

2650 
åack
[110].
edge
[
DIR_STRAIGHT
].
de°
 = &track[16];

2651 
åack
[110].
edge
[
DIR_STRAIGHT
].
di°
 = 231;

2652 
åack
[110].
edge
[
DIR_CURVED
].
ªvî£
 = &åack[19].edge[
DIR_AHEAD
];

2653 
åack
[110].
edge
[
DIR_CURVED
].
§c
 = &track[110];

2654 
åack
[110].
edge
[
DIR_CURVED
].
de°
 = &track[18];

2655 
åack
[110].
edge
[
DIR_CURVED
].
di°
 = 239;

2657 
åack
[111].
ödex
 = 111;

2658 
åack
[111].
«me
 = "MR16";

2659 
åack
[111].
ty≥
 = 
NODE_MERGE
;

2660 
åack
[111].
num
 = 16;

2661 
åack
[111].
ªvî£
 = &track[110];

2662 
åack
[111].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[41].edge[DIR_AHEAD];

2663 
åack
[111].
edge
[
DIR_AHEAD
].
§c
 = &track[111];

2664 
åack
[111].
edge
[
DIR_AHEAD
].
de°
 = &track[40];

2665 
åack
[111].
edge
[
DIR_AHEAD
].
di°
 = 128;

2667 
åack
[112].
ödex
 = 112;

2668 
åack
[112].
«me
 = "BR17";

2669 
åack
[112].
ty≥
 = 
NODE_BRANCH
;

2670 
åack
[112].
num
 = 17;

2671 
åack
[112].
ªvî£
 = &track[113];

2672 
åack
[112].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[61].edge[
DIR_AHEAD
];

2673 
åack
[112].
edge
[
DIR_STRAIGHT
].
§c
 = &track[112];

2674 
åack
[112].
edge
[
DIR_STRAIGHT
].
de°
 = &track[60];

2675 
åack
[112].
edge
[
DIR_STRAIGHT
].
di°
 = 239;

2676 
åack
[112].
edge
[
DIR_CURVED
].
ªvî£
 = &åack[63].edge[
DIR_AHEAD
];

2677 
åack
[112].
edge
[
DIR_CURVED
].
§c
 = &track[112];

2678 
åack
[112].
edge
[
DIR_CURVED
].
de°
 = &track[62];

2679 
åack
[112].
edge
[
DIR_CURVED
].
di°
 = 246;

2681 
åack
[113].
ödex
 = 113;

2682 
åack
[113].
«me
 = "MR17";

2683 
åack
[113].
ty≥
 = 
NODE_MERGE
;

2684 
åack
[113].
num
 = 17;

2685 
åack
[113].
ªvî£
 = &track[112];

2686 
åack
[113].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[76].edge[DIR_AHEAD];

2687 
åack
[113].
edge
[
DIR_AHEAD
].
§c
 = &track[113];

2688 
åack
[113].
edge
[
DIR_AHEAD
].
de°
 = &track[77];

2689 
åack
[113].
edge
[
DIR_AHEAD
].
di°
 = 43;

2691 
åack
[114].
ödex
 = 114;

2692 
åack
[114].
«me
 = "BR18";

2693 
åack
[114].
ty≥
 = 
NODE_BRANCH
;

2694 
åack
[114].
num
 = 18;

2695 
åack
[114].
ªvî£
 = &track[115];

2696 
åack
[114].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[38].edge[
DIR_AHEAD
];

2697 
åack
[114].
edge
[
DIR_STRAIGHT
].
§c
 = &track[114];

2698 
åack
[114].
edge
[
DIR_STRAIGHT
].
de°
 = &track[39];

2699 
åack
[114].
edge
[
DIR_STRAIGHT
].
di°
 = 231;

2700 
åack
[114].
edge
[
DIR_CURVED
].
ªvî£
 = &track[90].edge[DIR_CURVED];

2701 
åack
[114].
edge
[
DIR_CURVED
].
§c
 = &track[114];

2702 
åack
[114].
edge
[
DIR_CURVED
].
de°
 = &track[91];

2703 
åack
[114].
edge
[
DIR_CURVED
].
di°
 = 371;

2705 
åack
[115].
ödex
 = 115;

2706 
åack
[115].
«me
 = "MR18";

2707 
åack
[115].
ty≥
 = 
NODE_MERGE
;

2708 
åack
[115].
num
 = 18;

2709 
åack
[115].
ªvî£
 = &track[114];

2710 
åack
[115].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[89].edge[DIR_AHEAD];

2711 
åack
[115].
edge
[
DIR_AHEAD
].
§c
 = &track[115];

2712 
åack
[115].
edge
[
DIR_AHEAD
].
de°
 = &track[88];

2713 
åack
[115].
edge
[
DIR_AHEAD
].
di°
 = 155;

2715 
åack
[116].
ödex
 = 116;

2716 
åack
[116].
«me
 = "BR153";

2717 
åack
[116].
ty≥
 = 
NODE_BRANCH
;

2718 
åack
[116].
num
 = 153;

2719 
åack
[116].
ªvî£
 = &track[117];

2720 
åack
[116].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[124].edge[
DIR_AHEAD
];

2721 
åack
[116].
edge
[
DIR_STRAIGHT
].
§c
 = &track[116];

2722 
åack
[116].
edge
[
DIR_STRAIGHT
].
de°
 = &track[125];

2723 
åack
[116].
edge
[
DIR_STRAIGHT
].
di°
 = 253;

2724 
åack
[116].
edge
[
DIR_CURVED
].
ªvî£
 = &åack[33].edge[
DIR_AHEAD
];

2725 
åack
[116].
edge
[
DIR_CURVED
].
§c
 = &track[116];

2726 
åack
[116].
edge
[
DIR_CURVED
].
de°
 = &track[32];

2727 
åack
[116].
edge
[
DIR_CURVED
].
di°
 = 246;

2729 
åack
[117].
ödex
 = 117;

2730 
åack
[117].
«me
 = "MR153";

2731 
åack
[117].
ty≥
 = 
NODE_MERGE
;

2732 
åack
[117].
num
 = 153;

2733 
åack
[117].
ªvî£
 = &track[116];

2734 
åack
[117].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[118].edge[
DIR_STRAIGHT
];

2735 
åack
[117].
edge
[
DIR_AHEAD
].
§c
 = &track[117];

2736 
åack
[117].
edge
[
DIR_AHEAD
].
de°
 = &track[119];

2737 
åack
[117].
edge
[
DIR_AHEAD
].
di°
 = 0;

2739 
åack
[118].
ödex
 = 118;

2740 
åack
[118].
«me
 = "BR154";

2741 
åack
[118].
ty≥
 = 
NODE_BRANCH
;

2742 
åack
[118].
num
 = 154;

2743 
åack
[118].
ªvî£
 = &track[119];

2744 
åack
[118].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[117].edge[
DIR_AHEAD
];

2745 
åack
[118].
edge
[
DIR_STRAIGHT
].
§c
 = &track[118];

2746 
åack
[118].
edge
[
DIR_STRAIGHT
].
de°
 = &track[116];

2747 
åack
[118].
edge
[
DIR_STRAIGHT
].
di°
 = 0;

2748 
åack
[118].
edge
[
DIR_CURVED
].
ªvî£
 = &åack[28].edge[
DIR_AHEAD
];

2749 
åack
[118].
edge
[
DIR_CURVED
].
§c
 = &track[118];

2750 
åack
[118].
edge
[
DIR_CURVED
].
de°
 = &track[29];

2751 
åack
[118].
edge
[
DIR_CURVED
].
di°
 = 239;

2753 
åack
[119].
ödex
 = 119;

2754 
åack
[119].
«me
 = "MR154";

2755 
åack
[119].
ty≥
 = 
NODE_MERGE
;

2756 
åack
[119].
num
 = 154;

2757 
åack
[119].
ªvî£
 = &track[118];

2758 
åack
[119].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[123].edge[DIR_AHEAD];

2759 
åack
[119].
edge
[
DIR_AHEAD
].
§c
 = &track[119];

2760 
åack
[119].
edge
[
DIR_AHEAD
].
de°
 = &track[122];

2761 
åack
[119].
edge
[
DIR_AHEAD
].
di°
 = 0;

2763 
åack
[120].
ödex
 = 120;

2764 
åack
[120].
«me
 = "BR155";

2765 
åack
[120].
ty≥
 = 
NODE_BRANCH
;

2766 
åack
[120].
num
 = 155;

2767 
åack
[120].
ªvî£
 = &track[121];

2768 
åack
[120].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[126].edge[
DIR_AHEAD
];

2769 
åack
[120].
edge
[
DIR_STRAIGHT
].
§c
 = &track[120];

2770 
åack
[120].
edge
[
DIR_STRAIGHT
].
de°
 = &track[127];

2771 
åack
[120].
edge
[
DIR_STRAIGHT
].
di°
 = 282;

2772 
åack
[120].
edge
[
DIR_CURVED
].
ªvî£
 = &åack[48].edge[
DIR_AHEAD
];

2773 
åack
[120].
edge
[
DIR_CURVED
].
§c
 = &track[120];

2774 
åack
[120].
edge
[
DIR_CURVED
].
de°
 = &track[49];

2775 
åack
[120].
edge
[
DIR_CURVED
].
di°
 = 246;

2777 
åack
[121].
ödex
 = 121;

2778 
åack
[121].
«me
 = "MR155";

2779 
åack
[121].
ty≥
 = 
NODE_MERGE
;

2780 
åack
[121].
num
 = 155;

2781 
åack
[121].
ªvî£
 = &track[120];

2782 
åack
[121].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[122].edge[
DIR_STRAIGHT
];

2783 
åack
[121].
edge
[
DIR_AHEAD
].
§c
 = &track[121];

2784 
åack
[121].
edge
[
DIR_AHEAD
].
de°
 = &track[123];

2785 
åack
[121].
edge
[
DIR_AHEAD
].
di°
 = 0;

2787 
åack
[122].
ödex
 = 122;

2788 
åack
[122].
«me
 = "BR156";

2789 
åack
[122].
ty≥
 = 
NODE_BRANCH
;

2790 
åack
[122].
num
 = 156;

2791 
åack
[122].
ªvî£
 = &track[123];

2792 
åack
[122].
edge
[
DIR_STRAIGHT
].
ªvî£
 = &åack[121].edge[
DIR_AHEAD
];

2793 
åack
[122].
edge
[
DIR_STRAIGHT
].
§c
 = &track[122];

2794 
åack
[122].
edge
[
DIR_STRAIGHT
].
de°
 = &track[120];

2795 
åack
[122].
edge
[
DIR_STRAIGHT
].
di°
 = 0;

2796 
åack
[122].
edge
[
DIR_CURVED
].
ªvî£
 = &åack[64].edge[
DIR_AHEAD
];

2797 
åack
[122].
edge
[
DIR_CURVED
].
§c
 = &track[122];

2798 
åack
[122].
edge
[
DIR_CURVED
].
de°
 = &track[65];

2799 
åack
[122].
edge
[
DIR_CURVED
].
di°
 = 239;

2801 
åack
[123].
ödex
 = 123;

2802 
åack
[123].
«me
 = "MR156";

2803 
åack
[123].
ty≥
 = 
NODE_MERGE
;

2804 
åack
[123].
num
 = 156;

2805 
åack
[123].
ªvî£
 = &track[122];

2806 
åack
[123].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[119].edge[DIR_AHEAD];

2807 
åack
[123].
edge
[
DIR_AHEAD
].
§c
 = &track[123];

2808 
åack
[123].
edge
[
DIR_AHEAD
].
de°
 = &track[118];

2809 
åack
[123].
edge
[
DIR_AHEAD
].
di°
 = 0;

2811 
åack
[124].
ödex
 = 124;

2812 
åack
[124].
«me
 = "EN1";

2813 
åack
[124].
ty≥
 = 
NODE_ENTER
;

2814 
åack
[124].
ªvî£
 = &track[125];

2815 
åack
[124].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[116].edge[
DIR_STRAIGHT
];

2816 
åack
[124].
edge
[
DIR_AHEAD
].
§c
 = &track[124];

2817 
åack
[124].
edge
[
DIR_AHEAD
].
de°
 = &track[117];

2818 
åack
[124].
edge
[
DIR_AHEAD
].
di°
 = 253;

2820 
åack
[125].
ödex
 = 125;

2821 
åack
[125].
«me
 = "EX1";

2822 
åack
[125].
ty≥
 = 
NODE_EXIT
;

2823 
åack
[125].
ªvî£
 = &track[124];

2825 
åack
[126].
ödex
 = 126;

2826 
åack
[126].
«me
 = "EN2";

2827 
åack
[126].
ty≥
 = 
NODE_ENTER
;

2828 
åack
[126].
ªvî£
 = &track[127];

2829 
åack
[126].
edge
[
DIR_AHEAD
].
ªvî£
 = &åack[120].edge[
DIR_STRAIGHT
];

2830 
åack
[126].
edge
[
DIR_AHEAD
].
§c
 = &track[126];

2831 
åack
[126].
edge
[
DIR_AHEAD
].
de°
 = &track[121];

2832 
åack
[126].
edge
[
DIR_AHEAD
].
di°
 = 282;

2834 
åack
[127].
ödex
 = 127;

2835 
åack
[127].
«me
 = "EX2";

2836 
åack
[127].
ty≥
 = 
NODE_EXIT
;

2837 
åack
[127].
ªvî£
 = &track[126];

2839 
åack
[128].
ödex
 = 128;

2840 
åack
[128].
«me
 = "EN3";

2841 
åack
[128].
ty≥
 = 
NODE_ENTER
;

2842 
åack
[128].
ªvî£
 = &track[129];

2843 
åack
[128].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[34].edge[DIR_AHEAD];

2844 
åack
[128].
edge
[
DIR_AHEAD
].
§c
 = &track[128];

2845 
åack
[128].
edge
[
DIR_AHEAD
].
de°
 = &track[35];

2846 
åack
[128].
edge
[
DIR_AHEAD
].
di°
 = 514;

2848 
åack
[129].
ödex
 = 129;

2849 
åack
[129].
«me
 = "EX3";

2850 
åack
[129].
ty≥
 = 
NODE_EXIT
;

2851 
åack
[129].
ªvî£
 = &track[128];

2853 
åack
[130].
ödex
 = 130;

2854 
åack
[130].
«me
 = "EN4";

2855 
åack
[130].
ty≥
 = 
NODE_ENTER
;

2856 
åack
[130].
ªvî£
 = &track[131];

2857 
åack
[130].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[13].edge[DIR_AHEAD];

2858 
åack
[130].
edge
[
DIR_AHEAD
].
§c
 = &track[130];

2859 
åack
[130].
edge
[
DIR_AHEAD
].
de°
 = &track[12];

2860 
åack
[130].
edge
[
DIR_AHEAD
].
di°
 = 325;

2862 
åack
[131].
ödex
 = 131;

2863 
åack
[131].
«me
 = "EX4";

2864 
åack
[131].
ty≥
 = 
NODE_EXIT
;

2865 
åack
[131].
ªvî£
 = &track[130];

2867 
åack
[132].
ödex
 = 132;

2868 
åack
[132].
«me
 = "EN5";

2869 
åack
[132].
ty≥
 = 
NODE_ENTER
;

2870 
åack
[132].
ªvî£
 = &track[133];

2871 
åack
[132].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[1].edge[DIR_AHEAD];

2872 
åack
[132].
edge
[
DIR_AHEAD
].
§c
 = &track[132];

2873 
åack
[132].
edge
[
DIR_AHEAD
].
de°
 = &track[0];

2874 
åack
[132].
edge
[
DIR_AHEAD
].
di°
 = 504;

2876 
åack
[133].
ödex
 = 133;

2877 
åack
[133].
«me
 = "EX5";

2878 
åack
[133].
ty≥
 = 
NODE_EXIT
;

2879 
åack
[133].
ªvî£
 = &track[132];

2881 
åack
[134].
ödex
 = 134;

2882 
åack
[134].
«me
 = "EN7";

2883 
åack
[134].
ty≥
 = 
NODE_ENTER
;

2884 
åack
[134].
ªvî£
 = &track[135];

2885 
åack
[134].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[23].edge[DIR_AHEAD];

2886 
åack
[134].
edge
[
DIR_AHEAD
].
§c
 = &track[134];

2887 
åack
[134].
edge
[
DIR_AHEAD
].
de°
 = &track[22];

2888 
åack
[134].
edge
[
DIR_AHEAD
].
di°
 = 43;

2890 
åack
[135].
ödex
 = 135;

2891 
åack
[135].
«me
 = "EX7";

2892 
åack
[135].
ty≥
 = 
NODE_EXIT
;

2893 
åack
[135].
ªvî£
 = &track[134];

2895 
åack
[136].
ödex
 = 136;

2896 
åack
[136].
«me
 = "EN9";

2897 
åack
[136].
ty≥
 = 
NODE_ENTER
;

2898 
åack
[136].
ªvî£
 = &track[137];

2899 
åack
[136].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[25].edge[DIR_AHEAD];

2900 
åack
[136].
edge
[
DIR_AHEAD
].
§c
 = &track[136];

2901 
åack
[136].
edge
[
DIR_AHEAD
].
de°
 = &track[24];

2902 
åack
[136].
edge
[
DIR_AHEAD
].
di°
 = 50;

2904 
åack
[137].
ödex
 = 137;

2905 
åack
[137].
«me
 = "EX9";

2906 
åack
[137].
ty≥
 = 
NODE_EXIT
;

2907 
åack
[137].
ªvî£
 = &track[136];

2909 
åack
[138].
ödex
 = 138;

2910 
åack
[138].
«me
 = "EN10";

2911 
åack
[138].
ty≥
 = 
NODE_ENTER
;

2912 
åack
[138].
ªvî£
 = &track[139];

2913 
åack
[138].
edge
[
DIR_AHEAD
].
ªvî£
 = &track[27].edge[DIR_AHEAD];

2914 
åack
[138].
edge
[
DIR_AHEAD
].
§c
 = &track[138];

2915 
åack
[138].
edge
[
DIR_AHEAD
].
de°
 = &track[26];

2916 
åack
[138].
edge
[
DIR_AHEAD
].
di°
 = 50;

2918 
åack
[139].
ödex
 = 139;

2919 
åack
[139].
«me
 = "EX10";

2920 
åack
[139].
ty≥
 = 
NODE_EXIT
;

2921 
åack
[139].
ªvî£
 = &track[138];

2922 
	}
}

	@src/project/zx_project_track_functions.c

8 
	~"zx_èsks.h
"

9 
	~"zx_u¨t_io.h
"

10 
	~"zx_queue.h
"

11 
	~"zx_sy°em_ˇŒs.h
"

12 
	~"zx_îr.h
"

14 
	~<zx_¥oje˘_åack_fun˘i⁄s.h
>

15 
	~<zx_¥oje˘_åack_node.h
>

16 
	~<zx_¥oje˘_åack_£nsög.h
>

17 
	~<zx_¥oje˘_åack_d©a.h
>

18 
	~<zx_¥oje˘.h
>

19 
	~<zx_¥oje˘_åaö_fun˘i⁄s.h
>

22 
	$åack_öô
(
åack_id
, 
åack_node
* 
åack
)

24 i‡(
åack_id
 == 'A')

25 
	`öô_åacka
(
åack
);

27 i‡(
åack_id
 == 'B')

28 
	`öô_åackb
(
åack
);

30 
	}
}

32 
	$tu∫out_commô
(
zx_tu∫out_°©e
* 
tu∫out
)

34 
com1_ouçut
[50];

35 
com1_ouçut_size
 = 0;

36 
swôch_vÆue
;

38 i‡(
tu∫out
->
°©e
 =
TURNOUT_STATE_CURVED
)

40 
swôch_vÆue
 = 34;

44 
swôch_vÆue
 = 33;

47 
com1_ouçut_size
 = 0;

48 
com1_ouçut
[
com1_ouçut_size
++] = 
swôch_vÆue
;

49 
com1_ouçut
[
com1_ouçut_size
++] = 
tu∫out
->
id
;

50 
com1_ouçut
[
com1_ouçut_size
++] = 32;

51 
com1_ouçut
[
com1_ouçut_size
++] = 
UART_PACKET_END_CHAR
;

52 
	`PutMu…ùÀ
–
COM1
, 
com1_ouçut
 );

54 
	}
}

56 
	$tu∫out_toggÀ
(
zx_tu∫out_°©e
 
tu∫out_°©es
[], 
id
, 
c°©e
)

59 i‡(
c°©e
 == 's' || cstate == 'S')

61 
tu∫out_°©es
[
id
].
°©e
 = 
TURNOUT_STATE_STRAIGHT
;

65 
tu∫out_°©es
[
id
].
°©e
 = 
TURNOUT_STATE_CURVED
;

68 
	`tu∫out_commô
(&
tu∫out_°©es
[
id
]);

69 
	}
}

71 
	$tu∫out_öô
(
zx_tu∫out_°©e
 
tu∫out_°©es
[], 
c°©e
)

73 
i
;

74 
°©e
;

76 i‡(
c°©e
 == 's' || cstate == 'S')

78 
°©e
 = 
TURNOUT_STATE_STRAIGHT
;

82 
°©e
 = 
TURNOUT_STATE_CURVED
;

85 
i
 = 0; i < 
TURNOUT_BUF_SIZE
; i++)

87 i‡((
i
 >= 1 && i <= 22) || (i >= 153))

89 
tu∫out_°©es
[
i
].
id
 = i;

90 
tu∫out_°©es
[
i
].
°©e
 = state;

91 
tu∫out_°©es
[
i
].
time
 = 0;

95 
tu∫out_°©es
[
i
].
id
 = 0;

99 
i
 = 0; i < 
TURNOUT_BUF_SIZE
; i++)

101 i‡(
tu∫out_°©es
[
i
].
id
 != 0)

103 
	`tu∫out_commô
(&
tu∫out_°©es
[
i
]);

107 
	}
}

	@src/project/zx_project_track_manager.c

	@src/project/zx_project_track_sensing.c

13 
	~<ts7200.h
>

14 
	~<zx_sy°em_ˇŒs.h
>

15 
	~<zx_kî√l_body.h
>

16 
	~<zx_kî√l_hód.h
>

17 
	~<zx_èsks.h
>

18 
	~<zx_ªady_queue.h
>

19 
	~<zx_kî√l_c⁄fig.h
>

20 
	~<zx_mem‹y.h
>

21 
	~<zx_queue.h
>

22 
	~<zx_u¨t_io.h
>

23 
	~<zx_îr.h
>

24 
	~<zx_hñ≥r.h
>

27 
	~<zx_¥oje˘_ˇlibøti⁄.h
>

28 
	~<zx_¥oje˘_åaö_fun˘i⁄s.h
>

29 
	~<zx_¥oje˘_åack_fun˘i⁄s.h
>

30 
	~<zx_¥oje˘_ui.h
>

31 
	~<zx_¥oje˘_£ns‹.h
>

32 
	~<zx_¥oje˘_sh‹ã°_∑th.h
>

33 
	~<zx_¥oje˘_åack_node.h
>

34 
	~<zx_¥oje˘_gøphics.h
>

35 
	~<zx_¥oje˘_utûôõs.h
>

36 
	~<zx_¥oje˘_åack_node.h
>

37 
	~<zx_¥oje˘_åack_£nsög.h
>

38 
	~<zx_¥oje˘_åack_d©a.h
>

39 
	~<zx_¥oje˘.h
>

50 
	$zx_rouã_èsk
()

52 
ãxt_ªsu…_∑th
[400];

53 
ãxt_ªsu…_∑th_Àn
 = 0;

55 
com2_ouçut
[400];

56 
com2_ouçut_size
 = 0;

58 
tid
;

59 
zx_rouã_ªque°
 
ªque°
;

60 
zx_rouã_ª•⁄£
 
ª•⁄£
;

64 
	`Re˚ive
(&
tid
, &
ªque°
, (request));

66 
ªque°
.
ty≥
)

68 
ROUTE_REQUEST_SHORTEST
:

70 
ãxt_ªsu…_∑th_Àn
 = 0;

72 i‡(!
	`åack_ˇlc_sh‹ã°_∑th
(
ªque°
.
åack_±r
,Ñeque°.
sour˚_id
,Ñeque°.
de°ö©i⁄_id
,Ñeque°.
tu∫out_°©es
, 
ãxt_ªsu…_∑th
, &
ãxt_ªsu…_∑th_Àn
, &ªque°.
åaö
->
waypoöts
[0]))

74 
ª•⁄£
.
ty≥
 = 1;

75 
com2_ouçut_size
 = 0;

76 
	`zx_£t_curs‹
(
ªque°
.
¥öt_row
, 1, 
com2_ouçut
, &
com2_ouçut_size
);

78 
	`zx_put_°rög
("[", 
com2_ouçut
, &
com2_ouçut_size
);

79 
	`zx_put_°rög
(
ªque°
.
åack_±r
[ªque°.
sour˚_id
].
«me
, 
com2_ouçut
, &
com2_ouçut_size
);

80 
	`zx_put_°rög
(" => ", 
com2_ouçut
, &
com2_ouçut_size
);

81 
	`zx_put_°rög
(
ªque°
.
åack_±r
[ªque°.
de°ö©i⁄_id
].
«me
, 
com2_ouçut
, &
com2_ouçut_size
);

82 
	`zx_put_°rög
("]", 
com2_ouçut
, &
com2_ouçut_size
);

84 
	`zx_put_°rög
("P©hÇŸ found.\n", 
com2_ouçut
, &
com2_ouçut_size
);

85 
com2_ouçut
[
com2_ouçut_size
++] = 
UART_PACKET_END_CHAR
;

86 
	`PutMu…ùÀ
–
COM2
, 
com2_ouçut
 );

90 
ª•⁄£
.
ty≥
 = 0;

91 
ãxt_ªsu…_∑th
[
ãxt_ªsu…_∑th_Àn
++] = 0;

93 
com2_ouçut_size
 = 0;

94 
	`zx_£t_curs‹
(
ªque°
.
¥öt_row
, 1, 
com2_ouçut
, &
com2_ouçut_size
);

95 
	`zx_put_°rög
(
ãxt_ªsu…_∑th
, 
com2_ouçut
, &
com2_ouçut_size
);

96 
com2_ouçut
[
com2_ouçut_size
++] = 
UART_PACKET_END_CHAR
;

97 
	`PutMu…ùÀ
–
COM2
, 
com2_ouçut
 );

100 
	`Rïly
(
tid
, &
ª•⁄£
, (response));

107 
	`Exô
();

108 
	}
}

110 
	$zx_åaö_c⁄åﬁÀr_èsk
()

112 
£ns‹_£¸ë¨y_tid
 = 
	`Cª©e
(
FIRST_USER_TASK_PRIORITY
 - 5, &
zx_£ns‹_£¸ë¨y_èsk
);

114 
zx_£ns‹_ªque°
 
ªque°
;

115 
zx_£ns‹_ªque°
 
ª∂y
;

118 
ui_£rvî_tid
 = 
	`Cª©e
(
FIRST_USER_TASK_PRIORITY
 - 1, &
zx_ui_£rvî_èsk
);

119 
zx_ui_ªque°
 
ui_ªque°
;

120 
zx_ui_ªque°
 
ui_ª∂y
;

123 
rouã_èsk_tid
 = 
	`Cª©e
(
FIRST_USER_TASK_PRIORITY
 - 2, &
zx_rouã_èsk
);

126 
	`¥öt_öôül_s¸ìn
();

129 
com2_ouçut
[400];

130 
com2_ouçut_size
 = 0;

133 
åack_node
 
åack
 [
TRACK_MAX
];

136 
zx_tu∫out_°©e
 
tu∫out_°©es
 [
TURNOUT_BUF_SIZE
];

139 
	`åack_öô
(
CURRENT_TRACK
, &
åack
[0]);

142 
zx_åaö
 
åaö
 [
TRAIN_COUNT
];

143 
	`åaö_öô
(&
åaö
[0], 44);

145 
åaö_°›_èsk_tid
 = 
	`Cª©e
(
FIRST_USER_TASK_PRIORITY
 -5, &
åaö_°›_èsk
 );

146 
°›_comm™d_issued_Êag
 = 0;

166 
	`åaö_£t_•ìd
(&
åaö
[0], 1);

169 
	`tu∫out_öô
(
tu∫out_°©es
, 'c');

176 
°©e
 = 
TRACK_STATE_INIT
;

179 
exô
 = 0;

182 
°©_row
 = 0;

183 
°©_row_off£t
 = 13;

184 
°©_row_cou¡
 = 20;

186 
zx_rouã_ª•⁄£
 
rouã_ª•⁄£
;

188 
zx_rouã_ªque°
 
rouã_ªque°
;

196 i‡(
°©e
 =
TRACK_STATE_UI_WAIT
)

199 
	`Síd
(
ui_£rvî_tid
, &
ui_ªque°
, (ui_ªque°), &
ui_ª∂y
, (ui_reply));

201 i‡(
ui_ª∂y
.
vÆue
 >= 0)

203 i‡(
ui_ª∂y
.
vÆue
 >
TRACK_MAX
)

205 
exô
 = 1;

210 
de°ö©i⁄_id
 = 
ui_ª∂y
.
vÆue
;

211 
sour˚_id
 = 
åaö
[0].
hód_pos
.
node
->
ödex
;

213 
rouã_ªque°
.
sour˚_id
 = source_id;

214 
rouã_ªque°
.
de°ö©i⁄_id
 = destination_id;

215 
rouã_ªque°
.
ty≥
 = 
ROUTE_REQUEST_SHORTEST
;

216 
rouã_ªque°
.
åack_±r
 = &
åack
[0];

217 
rouã_ªque°
.
tu∫out_°©es
 = &turnout_states[0];

218 
rouã_ªque°
.
¥öt_row
 = 
°©_row
 + 
°©_row_off£t
;

219 
rouã_ªque°
.
åaö
 = &train[0];

220 
rouã_ªque°
.
ö˛ude_ªvî£
 = 1;

222 
°©_row
 = (°©_row + 1Ë% 
°©_row_cou¡
;

224 
	`Síd
(
rouã_èsk_tid
, &
rouã_ªque°
, ‘ouã_ªque°), &
rouã_ª•⁄£
, (route_response));

229 
åaö
[0].
waypoöt_ödex
 = 0;

232 
åaö
[0].
èrgë
.
node
 = &
åack
[åaö[0].
waypoöts
[åaö[0].
waypoöt_ödex
].
node_id
];

233 
åaö
[0].
èrgë
.
off£t_‰om_node
 =Åøö[0].
waypoöts
[åaö[0].
waypoöt_ödex
].
off£t
 * 
DISTANCE_UNIT
;

234 
åaö
[0].
èrgë
.
di°™˚_to_node
 =Åøö[0].
waypoöts
[åaö[0].
waypoöt_ödex
].
di°™˚
 * 
DISTANCE_UNIT
;

236 
åaö
[0].
èrgë
.
visibÀ
 = 0;

238 
¥e„ºed_•ìd
 = 
	`åaö_gë_run_•ìd_‰om_di°™˚
(&
åaö
[0],Åøö[0].
èrgë
.
di°™˚_to_node
);

242 
	`åaö_£t_•ìd
(&
åaö
[0], 
¥e„ºed_•ìd
);

243 
	`åaö_upd©e_ex≥˘ed_£ns‹s
(&
åaö
[0]);

245 
°©e
 = 
TRACK_STATE_RUN
;

250 i‡(
exô
 == 1)

252 
ªque°
.
vÆue
 = 1;

255 
ªque°
.
vÆue
 = 0;

257 
	`Síd
(
£ns‹_£¸ë¨y_tid
, &
ªque°
, ‘eque°), &
ª∂y
, (reply));

259 i‡(
exô
 == 1)

262 
time
 = 
	`Time
();

264 i‡(
ª∂y
.
time
 != -1)

267 
ch™ge
 = 
ª∂y
.
vÆue
 & 0xff;

268 
£ns‹_byã_ödex
 = (
ª∂y
.
vÆue
 >> 8);

269 
£ns‹_time
 = 
ª∂y
.
time
;

271 
p
 = 0;

272 
£ns‹_id
 = -1;

277 
p
 = 
	`föd_√xt_bô_£t
–
ch™ge
,Ö + 1 );

279 if–
p
 == -1 ) ;

281 
i
 = 
£ns‹_byã_ödex
 / 2;

282 
j
 = 
p
 - 1;

283 if–
£ns‹_byã_ödex
 % 2 == 1 )

286 
j
 += 8;

290 
£ns‹_id
 = (
i
 * 16Ë+ 
j
;

295 i‡(
£ns‹_id
 =
SENSOR_C5
 || sís‹_id =
SENSOR_D10
)

300 i‡(
°©e
 =
TRACK_STATE_INIT
)

302 
	`åaö_£t_•ìd
(&
åaö
[0], 0);

303 
	`åaö_put_©_£ns‹
(&
åaö
[0], &
åack
[
£ns‹_id
], 
£ns‹_time
);

304 
åaö
[0].
vñocôy_°©e
 = 
TRAIN_STATE_IMMOBILE
;

307 
°©e
 = 
TRACK_STATE_RUN_FIRST
;

308 
åaö
->
ex≥˘ed_£ns‹s
[0].
node
 = &
åack
[
£ns‹_id
];

312 i‡(
°©e
 !
TRACK_STATE_INIT
)

320 
åiggîed_good
 = 0;

325 
åiggîed_ödex
 = -1;

326 
i
;

328 
i
 = 0; i < 
NEXT_SENSOR_COUNT
; i ++)

330 i‡(
£ns‹_id
 =
åaö
[0].
ex≥˘ed_£ns‹s
[
i
].
node
->
ödex
)

332 
åiggîed_good
 = 1;

333 
åiggîed_ödex
 = 
i
;

340 
com2_ouçut_size
 = 0;

341 
	`zx_£t_curs‹
(
°©_row
 + 
°©_row_off£t
, 1, 
com2_ouçut
, &
com2_ouçut_size
);

343 
	`zx_put_°rög
("[", 
com2_ouçut
, &
com2_ouçut_size
);

345 
	`zx_put_°rög
(
åack
[
£ns‹_id
].
«me
, 
com2_ouçut
, &
com2_ouçut_size
);

347 
	`zx_put_°rög
("] [", 
com2_ouçut
, &
com2_ouçut_size
);

349 
	`zx_put_numbî
(
£ns‹_time
, 
com2_ouçut
, &
com2_ouçut_size
);

351 
	`zx_put_°rög
("] [", 
com2_ouçut
, &
com2_ouçut_size
);

353 
	`zx_put_numbî
(
time
, 
com2_ouçut
, &
com2_ouçut_size
);

355 
	`zx_put_°rög
("]", 
com2_ouçut
, &
com2_ouçut_size
);

358 i‡(
åiggîed_good
)

361 
	`zx_put_°rög
("{", 
com2_ouçut
, &
com2_ouçut_size
);

363 
îr‹
 = 
åaö
[0].
ex≥˘ed_£ns‹s
[
åiggîed_ödex
].
di°
 / 
DISTANCE_UNIT
;

364 i‡(
îr‹
 < 0)

365 
îr‹
 = -error;

367 
	`zx_put_numbî
(
îr‹
, 
com2_ouçut
, &
com2_ouçut_size
);

369 
	`zx_put_°rög
("mm }", 
com2_ouçut
, &
com2_ouçut_size
);

371 
	`åaö_put_©_£ns‹
(&
åaö
[0], &
åack
[
£ns‹_id
], 
£ns‹_time
);

375 i‡((
°©e
 =
TRACK_STATE_RUN_FIRST
Ë&& (
£ns‹_id
 =
åaö
->
ex≥˘ed_£ns‹s
[0].
node
->
ödex
))

377 
	`åaö_£t_•ìd
(&
åaö
[0], 0);

378 
°©e
 = 
TRACK_STATE_STOP_WAIT
;

383 
	`åaö_upd©e_ex≥˘ed_£ns‹s
(&
åaö
[0]);

386 
com2_ouçut
[
com2_ouçut_size
++] = 
UART_PACKET_END_CHAR
;

387 
	`PutMu…ùÀ
–
COM2
, 
com2_ouçut
 );

390 
°©_row
 = (°©_row + 1Ë% 
°©_row_cou¡
;

399 i‡(
°©e
 !
TRACK_STATE_INIT
)

401 
	`åaö_upd©e_vñocôy_™d_off£t
(&
åaö
[0]);

403 
åaö
[0].
hód_pos
.
di°
 =Åøö[0].hód_pos.di° +Åøö[0].
di°™˚_åavñÀd_ö_dñè
;

405 
œ°_edge_di°
 = (
åaö
[0].
hód_pos
.
edge
->
di°
 * 
DISTANCE_UNIT
);

407 i‡(
åaö
[0].
hód_pos
.
di°
 >
œ°_edge_di°
)

409 
åack_node
* 
√w_node
 = 
åaö
[0].
hód_pos
.
edge
->
de°
;

411 
åaö
->
hód_pos
.
node
 = 
√w_node
;

412 
åaö
->
hód_pos
.
time
 =Åime;

413 
åaö
->
hód_pos
.
di°
 =Åøö[0].hód_pos.di° - 
œ°_edge_di°
;

416 i‡(
√w_node
->
ty≥
 =
NODE_BRANCH
)

418 i‡(
tu∫out_°©es
[
√w_node
->
num
].
°©e
 =
TURNOUT_STATE_STRAIGHT
)

420 
åaö
->
hód_pos
.
edge
 = &
√w_node
->edge[
DIR_STRAIGHT
];

424 
åaö
->
hód_pos
.
edge
 = &
√w_node
->edge[
DIR_CURVED
];

429 
i
;

432 
i
 = 0; i < 
NEXT_SENSOR_COUNT
; i++)

434 i‡(
åaö
[0].
ex≥˘ed_£ns‹s
[
i
].
node
 != 0)

435 
åaö
[0].
ex≥˘ed_£ns‹s
[
i
].
di°
 =Åøö[0].ex≥˘ed_£ns‹s[i].di° -Åøö[0].
di°™˚_åavñÀd_ö_dñè
;

438 
åaö
[0].
èrgë
.
di°™˚_to_node
 =Åøö[0].èrgë.di°™˚_to_nodê-Åøö[0].
di°™˚_åavñÀd_ö_dñè
;

440 
ªquúed_di°™˚
 = 
åaö
[0].
èrgë
.
di°™˚_to_node
 +Åøö[0].èrgë.
off£t_‰om_node
;

444 !
°›_comm™d_issued_Êag


445 && ((
ªquúed_di°™˚
 - 
åaö
[0].
di°™˚_åavñÀd_ö_dñè
Ë<åaö->
°›pög_di°™˚
[åaö->
•ìd
])

449 
zx_åaö_°›_ªque°
 
°›_ªque°
, 
°›_ª∂y
;

450 
°›_ªque°
.
åaö
 = &train[0];

451 
°›_ªque°
.
ex≥˘ed_time
 = (
ªquúed_di°™˚
 - 
åaö
->
°›pög_di°™˚
[åaö->
•ìd
]Ë/Åøö->
cuºít_vñocôy
;

452 i‡(
°›_ªque°
.
ex≥˘ed_time
 < 0)

453 
°›_ªque°
.
ex≥˘ed_time
 = 1;

455 
	`Síd
–
åaö_°›_èsk_tid
, &
°›_ªque°
, (°›_ªque°), &
°›_ª∂y
, (stop_reply));

456 
°›_comm™d_issued_Êag
 = 1;

458 
°©e
 = 
TRACK_STATE_STOP_WAIT
;

462 *
idÀ_time
 = (*)(
VAR_IDLE_TASK_TIME
);

464 
˛ock_£rvî_time
 = 
time
 * 10;

467 
≥r˚¡age
 = ((*
idÀ_time
)*100)/(
˛ock_£rvî_time
);

469 
	`¥öt_åaö_d©a
(
åack
, &
åaö
[0], 
≥r˚¡age
);

472 i‡((
°©e
 =
TRACK_STATE_STOP_WAIT
Ë&& (
åaö
[0].
vñocôy_°©e
 =
TRAIN_STATE_IMMOBILE
))

474 
°›_comm™d_issued_Êag
 = 0;

475 
åaö
[0].
waypoöt_ödex
 =Årain[0].waypoint_index + 1;

477 i‡((
åaö
[0].
waypoöt_ödex
 < 
WAYPOINT_COUNT
Ë&& (åaö[0].
waypoöts
[åaö[0].waypoöt_ödex].
node_id
 != -1))

480 
åaö
[0].
èrgë
.
node
 = &
åack
[åaö[0].
waypoöts
[åaö[0].
waypoöt_ödex
].
node_id
];

481 
åaö
[0].
èrgë
.
di°™˚_to_node
 =Åøö[0].
waypoöts
[åaö[0].
waypoöt_ödex
].
di°™˚
 * 
DISTANCE_UNIT
;

482 
åaö
[0].
èrgë
.
off£t_‰om_node
 =Åøö[0].
waypoöts
[åaö[0].
waypoöt_ödex
].
off£t
 * 
DISTANCE_UNIT
;

484 
åaö
[0].
èrgë
.
visibÀ
 = 0;

488 
åack_edge
 
edge
 = 
åack
[
åaö
[0].
hód_pos
.
node
->
ödex
].edge[
DIR_AHEAD
];

489 
åaö
[0].
hód_pos
.
node
 = 
edge
.
de°
->
ªvî£
;

490 
åaö
[0].
hód_pos
.
time
 =Åime;

491 
åaö
[0].
hód_pos
.
di°
 = 
edge
.di° * 
DISTANCE_UNIT
 -Årain[0].head_pos.dist;

492 
åaö
->
dúe˘i⁄
 = -train->direction;

493 
	`åaö_upd©e_ex≥˘ed_£ns‹s
(&
åaö
[0]);

494 
	`åaö_commô_ªvî£
(&
åaö
[0]);

496 
°©e
 = 
TRACK_STATE_RUN
;

498 
¥e„ºed_•ìd
 = 
	`åaö_gë_run_•ìd_‰om_di°™˚
(&
åaö
[0],Åøö[0].
èrgë
.
di°™˚_to_node
);

499 
	`åaö_£t_•ìd
(&
åaö
[0], 
¥e„ºed_•ìd
);

505 i‡(
åaö
->
dúe˘i⁄
 < 0)

508 
åack_edge
 
edge
 = 
åack
[
åaö
[0].
hód_pos
.
node
->
ödex
].edge[
DIR_AHEAD
];

509 
åaö
[0].
hód_pos
.
node
 = 
edge
.
de°
->
ªvî£
;

510 
åaö
[0].
hód_pos
.
time
 =Åime;

511 
åaö
[0].
hód_pos
.
di°
 = 
edge
.di° * 
DISTANCE_UNIT
 -Årain[0].head_pos.dist;

512 
åaö
->
dúe˘i⁄
 = -train->direction;

513 
	`åaö_upd©e_ex≥˘ed_£ns‹s
(&
åaö
[0]);

514 
	`åaö_commô_ªvî£
(&
åaö
[0]);

517 
°©e
 = 
TRACK_STATE_UI_WAIT
;

523 
	`zx_¥ötf
–
COM2
, "\n\n\n\n\n\n\n\nExiting.");

524 
	`Shutdown
();

525 
	`Exô
();

526 
	}
}

533 
	$åaö_kî√l_°ªss_ã°ög
()

535 
£ns‹_£rvî_tid
 = 
	`Cª©e
(
FIRST_USER_TASK_PRIORITY
 - 1, &
zx_£ns‹_courõr_èsk
);

537 
	`zx_¥ötf
(
COM2
, "Started");

539 
com1_ouçut
[50];

540 
com1_ouçut_size
 = 0;

542 
åack_node
 
åack
 [
TRACK_MAX
];

550 
	`åack_öô
(
CURRENT_TRACK
, &
åack
[0]);

553 
zx_åaö
 
åaö
 [
TRAIN_COUNT
];

554 
	`åaö_öô
(&
åaö
[0], 39);

555 
	`åaö_öô
(&
åaö
[1], 43);

556 
	`åaö_öô
(&
åaö
[2], 44);

559 
com1_ouçut_size
 = 0;

560 
com1_ouçut
[
com1_ouçut_size
++] = 7;

561 
com1_ouçut
[
com1_ouçut_size
++] = 
åaö
[0].
åaö_id
;

562 
com1_ouçut
[
com1_ouçut_size
++] = 
UART_PACKET_END_CHAR
;

563 
	`PutMu…ùÀ
(
COM1
, 
com1_ouçut
);

565 
com1_ouçut_size
 = 0;

566 
com1_ouçut
[
com1_ouçut_size
++] = 7;

567 
com1_ouçut
[
com1_ouçut_size
++] = 
åaö
[1].
åaö_id
;

568 
com1_ouçut
[
com1_ouçut_size
++] = 
UART_PACKET_END_CHAR
;

569 
	`PutMu…ùÀ
(
COM1
, 
com1_ouçut
);

571 
com1_ouçut_size
 = 0;

572 
com1_ouçut
[
com1_ouçut_size
++] = 7;

573 
com1_ouçut
[
com1_ouçut_size
++] = 
åaö
[2].
åaö_id
;

574 
com1_ouçut
[
com1_ouçut_size
++] = 
UART_PACKET_END_CHAR
;

575 
	`PutMu…ùÀ
(
COM1
, 
com1_ouçut
);

579 
zx_£ns‹_ªque°
 
ªque°
;

580 
zx_£ns‹_ªque°
 
ª∂y
;

584 
	`Síd
(
£ns‹_£rvî_tid
, &
ªque°
, ‘eque°), &
ª∂y
, (reply));

585 
	`zx_¥ötf
–
COM2
, "data\n");

586 i‡(
ª∂y
.
time
 == -1)

594 
ch™ge
 = 
ª∂y
.
vÆue
 & 0xff;

595 
£ns‹_byã_ödex
 = (
ª∂y
.
vÆue
 >> 8);

597 
p
 = 0;

598 
£ns‹_id
 = -1;

602 
p
 = 
	`föd_√xt_bô_£t
–
ch™ge
,Ö + 1 );

604 if–
p
 == -1 ) ;

606 
i
 = 
£ns‹_byã_ödex
 / 2;

607 
j
 = 
p
 - 1;

608 if–
£ns‹_byã_ödex
 % 2 == 1 )

611 
j
 += 8;

614 
£ns‹_id
 = (
i
 * 16Ë+ 
j
;
	`aö_upd©e_vñocôy_™d_off£t
(&
åaö
[0])

617 
	`zx_¥ötf
(
COM2
, "|%s", 
åack
[
£ns‹_id
].
«me
);

621 
	}
}

625 
	$ac˚Àøti⁄_¥ofûe_ã°ög
()

627 
	`zx_¥ötf
(
COM2
, "Started");

629 
åack_node
 
åack
 [
TRACK_MAX
];

632 
	`åack_öô
(
CURRENT_TRACK
, &
åack
[0]);

636 
zx_åaö
 
åaö
 [
TRAIN_COUNT
];

637 
	`åaö_öô
(&
åaö
[0], 44);

640 
åaö
[0].
hód_pos
.
node
 = &
åack
[
SENSOR_A8
];

641 
åaö
[0].
hód_pos
.
time
 = 0;

642 
åaö
[0].
hód_pos
.
di°
 = 0;

644 
	`åaö_£t_•ìd
–&
åaö
[0], 7 );

645 
	`åaö_£t_•ìd
–&
åaö
[0], 0 );

647 
	`zx_¥ötf
–
COM2
, "\n Current Velocity | Distance Travelled | State ofÅhe Train " );

649 
i
;

651 
i
 = 0; i < 100; i++)

654 
	`åaö_upd©e_vñocôy_™d_off£t
(&
åaö
[0]);

655 
åaö
[0].
hód_pos
.
di°
 +åaö[0].
di°™˚_åavñÀd_ö_dñè
;

657 
	`zx_¥ötf
–
COM2
, "\n %d | %d | %d | %d)",

658 
åaö
[0].
cuºít_vñocôy
,Åøö[0].
hód_pos
.
di°
,Åøö[0].
vñocôy_°©e
,Åøö[0].
t
 );

663 
	`Shutdown
();

664 
	`Exô
();

666 
	}
}

	@src/project/zx_project_train_functions.c

15 
	~"zx_u¨t_io.h
"

16 
	~"zx_èsks.h
"

17 
	~"zx_sy°em_ˇŒs.h
"

19 
	~"zx_¥oje˘_åaö_fun˘i⁄s.h
"

20 
	~"zx_¥oje˘_ˇlibøti⁄.h
"

21 
	~"zx_¥oje˘_åack_£nsög.h
"

22 
	~"zx_¥oje˘_åack_node.h
"

23 
	~"zx_¥oje˘_åack_d©a.h
"

25 
	$åaö_öô
(
zx_åaö
* 
åaö
, 
åaö_id
)

27 
åaö
->
åaö_id
 =Årain_id;

30 
åaö
->
hód_pos
.
time
 = 0;

31 
åaö
->
hód_pos
.
di°
 = 0;

33 
åaö
->
di°™˚_åavñÀd_ö_dñè
 = 0;

35 
åaö
->
cuºít_vñocôy
 =Åøö->
öôül_vñocôy
 =Åøö->
föÆ_vñocôy
 = 0;

37 
åaö
-> 
t
 =Åøö->
t1
 =Åøö->
t0
 = 0;

39 
åaö
->
•ìd
 = 0;

41 
åaö
->
vñocôy_°©e
 = 
TRAIN_STATE_IMMOBILE
;

43 
åaö
->
œ°_£ns‹_id
 = -1;

45 if–
åaö_id
 == 44 )

48 
åaö
->
°›pög_di°™˚
[0] = 0;

49 
åaö
->
°›pög_di°™˚
[1] = 0;

50 
åaö
->
°›pög_di°™˚
[2] = 4987;

51 
åaö
->
°›pög_di°™˚
[3] = 12500;

52 
åaö
->
°›pög_di°™˚
[4] = 19450;

53 
åaö
->
°›pög_di°™˚
[5] = 25550;

54 
åaö
->
°›pög_di°™˚
[6] = 32487;

55 
åaö
->
°›pög_di°™˚
[7] = 41100;

56 
åaö
->
°›pög_di°™˚
[8] = 46737;

57 
åaö
->
°›pög_di°™˚
[9] = 52437;

58 
åaö
->
°›pög_di°™˚
[10] = 58925;

59 
åaö
->
°›pög_di°™˚
[11] = 66787;

60 
åaö
->
°›pög_di°™˚
[12] = 73837;

61 
åaö
->
°›pög_di°™˚
[13] = 81662;

62 
åaö
->
°›pög_di°™˚
[14] = 81975;

66 
åaö
->
•ìd_to_vñocôy
[0][0] = 0;

67 
åaö
->
•ìd_to_vñocôy
[0][1] = 35;

68 
åaö
->
•ìd_to_vñocôy
[0][2] = 80;

69 
åaö
->
•ìd_to_vñocôy
[0][3] = 130;

70 
åaö
->
•ìd_to_vñocôy
[0][4] = 181;

71 
åaö
->
•ìd_to_vñocôy
[0][5] = 233;

72 
åaö
->
•ìd_to_vñocôy
[0][6] = 286;

73 
åaö
->
•ìd_to_vñocôy
[0][7] = 347;

74 
åaö
->
•ìd_to_vñocôy
[0][8] = 402;

75 
åaö
->
•ìd_to_vñocôy
[0][9] = 453;

76 
åaö
->
•ìd_to_vñocôy
[0][10] = 509;

77 
åaö
->
•ìd_to_vñocôy
[0][11] = 569;

78 
åaö
->
•ìd_to_vñocôy
[0][12] = 629;

79 
åaö
->
•ìd_to_vñocôy
[0][13] = 660;

80 
åaö
->
•ìd_to_vñocôy
[0][14] = 660;

84 if–
åaö_id
 == 39 )

87 
åaö
->
°›pög_di°™˚
[0] = 0;

88 
åaö
->
°›pög_di°™˚
[1] = 0;

89 
åaö
->
°›pög_di°™˚
[2] = 4737;

90 
åaö
->
°›pög_di°™˚
[3] = 11950;

91 
åaö
->
°›pög_di°™˚
[4] = 19062;

92 
åaö
->
°›pög_di°™˚
[5] = 25100;

93 
åaö
->
°›pög_di°™˚
[6] = 32362;

94 
åaö
->
°›pög_di°™˚
[7] = 40187;

95 
åaö
->
°›pög_di°™˚
[8] = 44262;

96 
åaö
->
°›pög_di°™˚
[9] = 51662;

97 
åaö
->
°›pög_di°™˚
[10] = 56900;

98 
åaö
->
°›pög_di°™˚
[11] = 64675;

99 
åaö
->
°›pög_di°™˚
[12] = 71487;

100 
åaö
->
°›pög_di°™˚
[13] = 79125;

101 
åaö
->
°›pög_di°™˚
[14] = 79612;

105 
åaö
->
•ìd_to_vñocôy
[0][0] = 0;

106 
åaö
->
•ìd_to_vñocôy
[0][1] = 35;

107 
åaö
->
•ìd_to_vñocôy
[0][2] = 80;

108 
åaö
->
•ìd_to_vñocôy
[0][3] = 181;

109 
åaö
->
•ìd_to_vñocôy
[0][4] = 172;

110 
åaö
->
•ìd_to_vñocôy
[0][5] = 226;

111 
åaö
->
•ìd_to_vñocôy
[0][6] = 278;

112 
åaö
->
•ìd_to_vñocôy
[0][7] = 335;

113 
åaö
->
•ìd_to_vñocôy
[0][8] = 379;

114 
åaö
->
•ìd_to_vñocôy
[0][9] = 421;

115 
åaö
->
•ìd_to_vñocôy
[0][10] = 456;

116 
åaö
->
•ìd_to_vñocôy
[0][11] = 508;

117 
åaö
->
•ìd_to_vñocôy
[0][12] = 553;

118 
åaö
->
•ìd_to_vñocôy
[0][13] = 602;

119 
åaö
->
•ìd_to_vñocôy
[0][14] = 602;

124 
åaö
->
dúe˘i⁄
 = 1;

126 
i
;

128 
i
 = 0; i < 
NEXT_SENSOR_COUNT
; i++)

130 
åaö
->
ex≥˘ed_£ns‹s
[
i
].
time
 = 0;

131 
åaö
->
ex≥˘ed_£ns‹s
[
i
].
node
 = 0;

132 
åaö
->
ex≥˘ed_£ns‹s
[
i
].
di°
 = -1;

135 
i
 = 0; i < 
WAYPOINT_COUNT
; i++)

137 
åaö
->
waypoöts
[
i
].
node_id
 = -1;

138 
åaö
->
waypoöts
[
i
].
off£t
 = 0;

139 
åaö
->
waypoöts
[
i
].
di°™˚
 = 0;

142 
i
 = 0; i < 
TRACK_MAX
; i++)

144 
åaö
->
rouã
[
i
] = -1;

147 
åaö
->
waypoöt_ödex
 = 0;

148 
	}
}

152 
	$åaö_commô_ªvî£
(
zx_åaö
* 
åaö
)

154 
com1_ouçut
[50];

155 
com1_ouçut_size
 = 0;

157 
com1_ouçut_size
 = 0;

158 
com1_ouçut
[
com1_ouçut_size
++] = 15;

159 
com1_ouçut
[
com1_ouçut_size
++] = 
åaö
->
åaö_id
;

160 
com1_ouçut
[
com1_ouçut_size
++] = 
UART_PACKET_END_CHAR
;

161 
	`PutMu…ùÀ
(
COM1
, 
com1_ouçut
);

162 
	}
}

165 
	$åaö_commô
(
zx_åaö
* 
åaö
)

167 
com1_ouçut
[50];

168 
com1_ouçut_size
 = 0;

170 
com1_ouçut_size
 = 0;

171 
com1_ouçut
[
com1_ouçut_size
++] = 
åaö
->
•ìd
;

172 
com1_ouçut
[
com1_ouçut_size
++] = 
åaö
->
åaö_id
;

173 
com1_ouçut
[
com1_ouçut_size
++] = 
UART_PACKET_END_CHAR
;

174 
	`PutMu…ùÀ
(
COM1
, 
com1_ouçut
);

175 
	}
}

177 
	$åaö_£t_•ìd
(
zx_åaö
* 
åaö
, 
√w_•ìd
)

180 
time
 = 
	`Time
();

181 
åaö
->
t
 = 
time
;

184 
åaö
->
cuºít_vñocôy
 =Åøö->
föÆ_vñocôy
;

190 i‡(
√w_•ìd
 > 
åaö
->
•ìd
)

192 
åaö
->
föÆ_vñocôy
 =Åøö->
•ìd_to_vñocôy
[0][
√w_•ìd
];

193 
åaö
->
•ìd
 = 
√w_•ìd
;

194 
åaö
->
t1
 = 
time
 + 
	`åaö_ˇlc_ac˚Àøtög_dñay
(train);

195 
åaö
->
vñocôy_°©e
 = 
TRAIN_STATE_ACCELERATING
;

197 i‡(
√w_•ìd
 < 
åaö
->
•ìd
)

199 
åaö
->
t1
 = 
time
 + 
	`åaö_ˇlc_dec˚Àøtög_dñay
(train);

200 
åaö
->
•ìd
 = 
√w_•ìd
;

201 
åaö
->
föÆ_vñocôy
 =Åøö->
•ìd_to_vñocôy
[0][
√w_•ìd
];

202 
åaö
->
vñocôy_°©e
 = 
TRAIN_STATE_DECCELERATING
;

205 
	`åaö_commô
(
åaö
);

206 
	}
}

210 
	$åaö_upd©e_vñocôy_™d_off£t
(
zx_åaö
* 
åaö
)

212 
time
 = 
	`Time
();

214 
åaö
->
öôül_vñocôy
 =Åøö->
cuºít_vñocôy
;

215 
åaö
->
t0
 =Åøö->
t
;

217 
åaö
->
t
 = 
time
;

221 
ch™ged
 = 0;

223 i‡((
time
 >
åaö
->
t1
Ë&& (åaö->
vñocôy_°©e
 =
TRAIN_STATE_ACCELERATING
 ||Åøö->vñocôy_°©ê=
TRAIN_STATE_DECCELERATING
) )

225 
ch™ged
 = 1;

227 
åaö
->
t
 =Åøö->
t1
;

233 if–
åaö
->
vñocôy_°©e
 !
TRAIN_STATE_IMMOBILE
 )

235 
	`åaö_föd_vñocôy_™d_di°™˚_ö_dñè
–
åaö
 );

239 
åaö
->
di°™˚_åavñÀd_ö_dñè
 = 0;

242 i‡(
ch™ged
)

244 
di°™˚_∑π_1
 = 
åaö
->
di°™˚_åavñÀd_ö_dñè
;

246 
åaö
->
cuºít_vñocôy
 =Åøö->
föÆ_vñocôy
;

247 
åaö
->
öôül_vñocôy
 =Åøö->
cuºít_vñocôy
;

248 
åaö
->
t0
 =Åøö->
t
;

252 i‡(
åaö
->
•ìd
 == 0)

254 
åaö
->
vñocôy_°©e
 = 
TRAIN_STATE_IMMOBILE
;

258 
åaö
->
vñocôy_°©e
 = 
TRAIN_STATE_UNIFORM
;

261 
åaö
->
t
 = 
time
;

263 if–
åaö
->
vñocôy_°©e
 !
TRAIN_STATE_IMMOBILE
 )

265 
	`åaö_föd_vñocôy_™d_di°™˚_ö_dñè
–
åaö
 );

269 
åaö
->
di°™˚_åavñÀd_ö_dñè
 = 0;

272 
åaö
->
di°™˚_åavñÀd_ö_dñè
 =Åøö->di°™˚_åavñÀd_ö_dñè + 
di°™˚_∑π_1
;

275 
	}
}

277 
	$åaö_upd©e_ex≥˘ed_£ns‹s_ªc
(
zx_åaö
* 
åaö
, 
åack_node
* 
°¨t
, 
dïth
, 
°¨t_di°™˚
)

280 
åack_node
* 
node
 = 
°¨t
;

282 
¨øy_ödex
 = -1;

283 
i
;

285 i‡(
dïth
 == 0)

288 
i
 = 0; i < 
NEXT_SENSOR_COUNT
; i++)

290 i‡(
åaö
->
ex≥˘ed_£ns‹s
[
i
].
node
 == 0)

292 
¨øy_ödex
 = 
i
;

297 i‡(
¨øy_ödex
 == -1)

300 
cuºít_cou¡
 = 0;

301 
cuºít_di°™˚
 = 
°¨t_di°™˚
;

303  
node
->
ty≥
 !
NODE_EXIT
 )

305 i‡(
node
->
ty≥
 =
NODE_SENSOR
)

309 
åaö
->
ex≥˘ed_£ns‹s
[
¨øy_ödex
].
node
 =Çode;

310 
åaö
->
ex≥˘ed_£ns‹s
[
¨øy_ödex
].
di°
 = 
cuºít_di°™˚
;

311 
¨øy_ödex
++;

312 
cuºít_cou¡
++;

314 i‡(
cuºít_cou¡
 =
NEXT_SENSOR_LOOKUP_BREADTH
)

319 i‡(
¨øy_ödex
 =
NEXT_SENSOR_COUNT
)

325 i‡(
node
->
ty≥
 =
NODE_BRANCH
)

330 
di°™˚_°øight
 = 
cuºít_di°™˚
 + 
node
->
edge
[
DIR_STRAIGHT
].
di°
 * 
DISTANCE_UNIT
;

331 
di°™˚_curved
 = 
cuºít_di°™˚
 + 
node
->
edge
[
DIR_CURVED
].
di°
 * 
DISTANCE_UNIT
;

333 
	`åaö_upd©e_ex≥˘ed_£ns‹s_ªc
(
åaö
, 
node
->
edge
[
DIR_STRAIGHT
].
de°
, 
dïth
 - 1, 
di°™˚_°øight
);

334 
	`åaö_upd©e_ex≥˘ed_£ns‹s_ªc
(
åaö
, 
node
->
edge
[
DIR_CURVED
].
de°
, 
dïth
 - 1, 
di°™˚_curved
);

338 i‡(
node
 =
åaö
->
èrgë
.node)

340 
åaö
->
èrgë
.
visibÀ
 = 1;

341 
åaö
->
èrgë
.
di°™˚_to_node
 = 
cuºít_di°™˚
;

344 
cuºít_di°™˚
 +
node
->
edge
[
DIR_AHEAD
].
di°
 * 
DISTANCE_UNIT
;

345 
node
 =Çode->
edge
[
DIR_AHEAD
].
de°
;

350 
	}
}

352 
	$åaö_upd©e_ex≥˘ed_£ns‹s
(
zx_åaö
* 
åaö
)

354 
i
;

356 
i
 = 0; i < 
NEXT_SENSOR_COUNT
; i++)

358 
åaö
->
ex≥˘ed_£ns‹s
[
i
].
time
 = 0;

359 
åaö
->
ex≥˘ed_£ns‹s
[
i
].
node
 = 0;

360 
åaö
->
ex≥˘ed_£ns‹s
[
i
].
di°
 = -1;

363 
¨øy_ödex
 = 0;

365 
åack_node
* 
node
 = 
åaö
->
hód_pos
.
edge
->
de°
;

372 
cuºít_di°™˚
 = ((
åaö
->
hód_pos
.
edge
->
di°
 * 
DISTANCE_UNIT
) -Årain->head_pos.dist);

376 
	`åaö_upd©e_ex≥˘ed_£ns‹s_ªc
(
åaö
, 
node
, 2, 
cuºít_di°™˚
);

380 
	}
}

382 
	$åaö_put_©_£ns‹
(
zx_åaö
* 
åaö
, 
åack_node
* 
£ns‹_node
, 
time
)

384 
åaö
->
hód_pos
.
node
 = 
£ns‹_node
;

385 
åaö
->
hód_pos
.
time
 =Åime;

386 
åaö
->
hód_pos
.
di°
 = 0;

387 
åaö
->
hód_pos
.
edge
 = &åaö->hód_pos.
node
->edge[
DIR_AHEAD
];

389 
åack_edge
* 
ªvî£_edge
 = 
åaö
->
hód_pos
.
edge
->
ªvî£
;

390 
åack_edge
* 
dúe˘_edge
 = 
ªvî£_edge
->
de°
->
edge
[
DIR_AHEAD
].
ªvî£
;

394 
åaö
->
èû_pos
.
node
 = 
dúe˘_edge
->
§c
;

395 
åaö
->
èû_pos
.
time
 =Åime;

396 
åaö
->
èû_pos
.
di°
 = (
dúe˘_edge
->di° - 
TRAIN_HT_LENGTH
Ë* 
DISTANCE_UNIT
;

397 
åaö
->
èû_pos
.
edge
 = 
dúe˘_edge
;

399 
åaö
->
œ°_£ns‹_id
 = 
£ns‹_node
->
ödex
;

400 
	}
}

404 
	$åaö_gë_run_•ìd_‰om_di°™˚
(
zx_åaö
* 
åaö
, 
di°™˚
)

409 
i
;

410 
ªsu…
 = 0;

412 
i
 = 10; i >= 0; i--)

414 i‡(
åaö
->
°›pög_di°™˚
[
i
] * 2 + 200 * 100 <
di°™˚
)

416 
ªsu…
 = 
i
;

421  
ªsu…
;

422 
	}
}

424 
	$åaö_°›_èsk
()

426 
tid
 = 0;

428 
zx_åaö_°›_ªque°
 
åaö_°›_ªque°
;

430 
FOREVER


432 
	`Re˚ive
–&
tid
, &
åaö_°›_ªque°
, (Årain_stop_request ) );

433 
	`Rïly
–
tid
, &
åaö_°›_ªque°
 ,  (Årain_stop_request ) );

435 
zx_åaö
 *
åaö
 = 
åaö_°›_ªque°
.train;

437 
	`Dñay
 ( 
åaö_°›_ªque°
.
ex≥˘ed_time
 );

439 
	`åaö_£t_•ìd
(
åaö
, 0);

441 
	`Exô
();

442 
	}
}

	@src/project/zx_project_ui.c

12 
	~<zx_îr.h
>

13 
	~<zx_u¨t_io.h
>

14 
	~<zx_èsks.h
>

15 
	~<zx_sy°em_ˇŒs.h
>

17 
	~<zx_¥oje˘_ui.h
>

18 
	~<zx_¥oje˘_åack_node.h
>

19 
	~<zx_¥oje˘_åack_£nsög.h
>

20 
	~<zx_¥oje˘_åack_d©a.h
>

21 
	~<zx_¥oje˘_gøphics.h
>

22 
	~<zx_¥oje˘_åack_fun˘i⁄s.h
>

23 
	~<zx_¥oje˘_utûôõs.h
>

24 
	~<zx_¥oje˘.h
>

26 
	#hódî_cﬁumn
 1

	)

27 
	#d©a_cﬁumn
 30

	)

28 
	#öput_row_hódî
 32

	)

29 
	#öput_row
 33

	)

31 
	$¥öt_åaö_d©a
(
åack_node
* 
åack
, 
zx_åaö
* 
åaö
, 
idÀ_èsk_≥r˚¡
 )

33 
com2_ouçut
[400];

34 
com2_ouçut_size
 = 0;

36 
off£t
 = 4;

38 
com2_ouçut_size
 = 0;

40 
time
 = 
	`Time
();

42 
	`zx_£t_curs‹
(
off£t
 + 0, 
d©a_cﬁumn
, 
com2_ouçut
, &
com2_ouçut_size
);

43 
	`zx_put_numbî
(
time
, 
com2_ouçut
, &
com2_ouçut_size
);

44 
	`zx_put_°rög
(" ", 
com2_ouçut
, &
com2_ouçut_size
);

46 
	`zx_£t_curs‹
(
off£t
 + 1, 
d©a_cﬁumn
, 
com2_ouçut
, &
com2_ouçut_size
);

47 
	`zx_put_°rög
(
åaö
->
hód_pos
.
node
->
«me
, 
com2_ouçut
, &
com2_ouçut_size
);

48 
	`zx_put_°rög
(" ", 
com2_ouçut
, &
com2_ouçut_size
);

49 
	`zx_put_numbî
(
åaö
->
hód_pos
.
di°
 / 
DISTANCE_UNIT
, 
com2_ouçut
, &
com2_ouçut_size
);

50 
	`zx_put_°rög
(" ", 
com2_ouçut
, &
com2_ouçut_size
);

53 
	`zx_£t_curs‹
(
off£t
 + 2, 
d©a_cﬁumn
, 
com2_ouçut
, &
com2_ouçut_size
);

54 
	`zx_put_°rög
(
åaö
->
èû_pos
.
node
->
«me
, 
com2_ouçut
, &
com2_ouçut_size
);

55 
	`zx_put_°rög
(" ", 
com2_ouçut
, &
com2_ouçut_size
);

56 
	`zx_put_numbî
(
åaö
->
èû_pos
.
di°
 / 
DISTANCE_UNIT
, 
com2_ouçut
, &
com2_ouçut_size
);

57 
	`zx_put_°rög
(" ", 
com2_ouçut
, &
com2_ouçut_size
);

60 
	`zx_£t_curs‹
(
off£t
 + 3, 
d©a_cﬁumn
, 
com2_ouçut
, &
com2_ouçut_size
);

61 
	`zx_put_numbî
(
åaö
->
cuºít_vñocôy
, 
com2_ouçut
, &
com2_ouçut_size
);

63 
	`zx_put_°rög
(" [", 
com2_ouçut
, &
com2_ouçut_size
);

64 
	`zx_put_numbî
(
åaö
->
•ìd
, 
com2_ouçut
, &
com2_ouçut_size
);

65 
	`zx_put_°rög
(" ] ", 
com2_ouçut
, &
com2_ouçut_size
);

67 
	`zx_£t_curs‹
(
off£t
 + 4, 
d©a_cﬁumn
, 
com2_ouçut
, &
com2_ouçut_size
);

69 i‡(
åaö
->
vñocôy_°©e
 =
TRAIN_STATE_IMMOBILE
)

71 
	`zx_put_°rög
("Immobûe", 
com2_ouçut
, &
com2_ouçut_size
);

73 i‡(
åaö
->
vñocôy_°©e
 =
TRAIN_STATE_ACCELERATING
)

75 
	`zx_put_°rög
("Ac˚Àøtög", 
com2_ouçut
, &
com2_ouçut_size
);

77 i‡(
åaö
->
vñocôy_°©e
 =
TRAIN_STATE_DECCELERATING
)

79 
	`zx_put_°rög
("Dec˚Àøtög", 
com2_ouçut
, &
com2_ouçut_size
);

81 i‡(
åaö
->
vñocôy_°©e
 =
TRAIN_STATE_UNIFORM
)

83 
	`zx_put_°rög
("Movög unif‹mly", 
com2_ouçut
, &
com2_ouçut_size
);

86 
	`zx_put_°rög
(" [", 
com2_ouçut
, &
com2_ouçut_size
);

87 
	`zx_put_numbî
(
åaö
->
t1
, 
com2_ouçut
, &
com2_ouçut_size
);

88 
	`zx_put_°rög
(" ]", 
com2_ouçut
, &
com2_ouçut_size
);

89 
	`zx_put_°rög
(" ", 
com2_ouçut
, &
com2_ouçut_size
);

91 
	`zx_£t_curs‹
(
off£t
 + 5, 
d©a_cﬁumn
, 
com2_ouçut
, &
com2_ouçut_size
);

93 
i
;

94 
i
 = 0; i < 
NEXT_SENSOR_COUNT
; i++)

96 i‡(
åaö
->
ex≥˘ed_£ns‹s
[
i
].
node
 != 0)

98 
	`zx_put_°rög
(
åaö
->
ex≥˘ed_£ns‹s
[
i
].
node
->
«me
, 
com2_ouçut
, &
com2_ouçut_size
);

99 
	`zx_put_°rög
(": ", 
com2_ouçut
, &
com2_ouçut_size
);

100 
	`zx_put_numbî
(
åaö
->
ex≥˘ed_£ns‹s
[
i
].
di°
 / 
DISTANCE_UNIT
, 
com2_ouçut
, &
com2_ouçut_size
);

102 
	`zx_put_°rög
("mm | ", 
com2_ouçut
, &
com2_ouçut_size
);

106 
	`zx_put_°rög
(" ", 
com2_ouçut
, &
com2_ouçut_size
);

125 
	`zx_£t_curs‹
(
off£t
 + 7, 
d©a_cﬁumn
, 
com2_ouçut
, &
com2_ouçut_size
);

127 
	`zx_put_numbî
(
idÀ_èsk_≥r˚¡
, 
com2_ouçut
, &
com2_ouçut_size
);

128 
	`zx_put_°rög
("%", 
com2_ouçut
, &
com2_ouçut_size
);

129 
	`zx_put_°rög
(" ", 
com2_ouçut
, &
com2_ouçut_size
);

131 
com2_ouçut
[
com2_ouçut_size
++] = 
UART_PACKET_END_CHAR
;

132 
	`PutMu…ùÀ
–
COM2
, 
com2_ouçut
 );

133 
	}
}

135 
	$¥öt_öôül_s¸ìn
()

137 
com2_ouçut
[400];

138 
com2_ouçut_size
 = 0;

140 
com2_ouçut_size
 = 0;

141 
	`zx_˛ór_s¸ìn
(
com2_ouçut
, &
com2_ouçut_size
);

142 
	`zx_£t_curs‹
(1, 
hódî_cﬁumn
, 
com2_ouçut
, &
com2_ouçut_size
);

143 
	`zx_put_°rög
("======================================================\n", 
com2_ouçut
, &
com2_ouçut_size
);

144 
	`zx_put_°rög
("====== Proje˘ 1 Demÿ = AÀxánd PriyØ ========\n", 
com2_ouçut
, &
com2_ouçut_size
);

145 
	`zx_put_°rög
("======================================================\n", 
com2_ouçut
, &
com2_ouçut_size
);

146 
	`zx_put_°rög
("Cuºíàtimê—icks):\n", 
com2_ouçut
, &
com2_ouçut_size
);

147 
	`zx_put_°rög
("Hód (M¨k | of‡mm):\n", 
com2_ouçut
, &
com2_ouçut_size
);

148 
	`zx_put_°rög
("Taû (M¨k | of‡mm):\n", 
com2_ouçut
, &
com2_ouçut_size
);

149 
	`zx_put_°rög
("Vñocôy (mm /Åicks):\n", 
com2_ouçut
, &
com2_ouçut_size
);

150 
	`zx_put_°rög
("Ac˚Àøti⁄ sèã:\n", 
com2_ouçut
, &
com2_ouçut_size
);

151 
	`zx_put_°rög
("Exp. sís‹†(id | di° mm):\n", 
com2_ouçut
, &
com2_ouçut_size
);

152 
	`zx_put_°rög
("Exp.Çode†(id | di° mm):\n", 
com2_ouçut
, &
com2_ouçut_size
);

153 
	`zx_put_°rög
("IdÀÅaskÅime:\n", 
com2_ouçut
, &
com2_ouçut_size
);

155 
	`zx_£t_curs‹
(
öput_row_hódî
, 1, 
com2_ouçut
, &
com2_ouçut_size
);

156 
	`zx_put_°rög
("FödáÑouãÅÿ(£ns‹ id):", 
com2_ouçut
, &
com2_ouçut_size
);

158 
com2_ouçut
[
com2_ouçut_size
++] = 
UART_PACKET_END_CHAR
;

159 
	`PutMu…ùÀ
–
COM2
, 
com2_ouçut
 );

160 
	}
}

162 
	$zx_comm™d_èsk
()

164 
£rvî_id
 = 
	`WhoIs
("ui_server");

166 
zx_comm™d_èsk_ªque°
 
comm™d_ªque°
;

168 
ouçut
[20];

169 
ouçut_size
 = 0;

171 
¥om±
[15];

172 
	`zx_öôülize_¥om±
–
¥om±
 );

174 
	`zx_£t_curs‹
–
TERMINAL_POS_X
, 
TERMINAL_POS_Y
, 
ouçut
, &
ouçut_size
);

175 
	`zx_put_°rög
–
¥om±
, 
ouçut
, &
ouçut_size
);

176 
ouçut
[
ouçut_size
++] = 
UART_PACKET_END_CHAR
;

177 
	`PutMu…ùÀ
–
COM2
, 
ouçut
 );

187 
c
;

190 
ªad_buf„r
[
RECEIVE_BUF_LEN
];

191 
ªad_buf„r_pos
=-1;

193 
comm™d_Êag
=0;

194 
löe
 = 0;

195 
ch¨_¥öãd

TERMINAL_PROMPT_LEN
;

197 
ªsu…
 = 0;

199 
FOREVER


202  (
ªsu…
 = 
	`GëC
(
COM2
)Ë=
RECEIVE_ERROR
 );

204 
c
 = 
ªsu…
;

206 if–
c
 == '\r')

209 
comm™d_Êag
 = 1;

212 
ªad_buf„r_pos
++;

213 
	`add_byã_to_buff
–'\0', 
ªad_buf„r
, 
ªad_buf„r_pos
 );

214 
ªad_buf„r_pos
 = -1;

217 
löe
=÷öe+1)%
TERMINAL_LENGTH
;

219 if–
löe
 == 0 )

221 
ouçut_size
 = 0;

222 
	`zx_£t_curs‹
–
TERMINAL_POS_X
, 
TERMINAL_POS_Y
, 
ouçut
, &
ouçut_size
 );

223 
	`zx_îa£_‰om_cuºít_to_s¸íd
(
ouçut
, &
ouçut_size
);

224 
ouçut
[
ouçut_size
++] = 
UART_PACKET_END_CHAR
;

225 
	`PutMu…ùÀ
–
COM2
, 
ouçut
 );

228 
ouçut_size
 = 0;

229 
	`zx_£t_curs‹
–
TERMINAL_POS_X
+
löe
, 
TERMINAL_POS_Y
, 
ouçut
, &
ouçut_size
 );

230 
	`¥öt_¥om±
–
¥om±
, 
ouçut
, &
ouçut_size
 );

231 
ouçut
[
ouçut_size
++] = 
UART_PACKET_END_CHAR
;

232 
	`PutMu…ùÀ
–
COM2
, 
ouçut
 );

234 
ch¨_¥öãd
 = 
TERMINAL_PROMPT_LEN
;

238 if–
c
 == '\b' )

240 i‡(
ªad_buf„r_pos
 >= 0)

244 
ªad_buf„r_pos
--;

247 
ouçut_size
 = 0;

248 
	`zx_£t_curs‹
–
TERMINAL_POS_X
+
löe
, 
TERMINAL_POS_Y
+
ch¨_¥öãd
, 
ouçut
, &
ouçut_size
 );

249 
	`zx_îa£_löe
–
ouçut
, &
ouçut_size
 );

250 
ouçut
[
ouçut_size
++] = 
UART_PACKET_END_CHAR
;

251 
	`PutMu…ùÀ
–
COM2
, 
ouçut
 );

253 
ch¨_¥öãd
--;

263 
ªad_buf„r_pos
++;

264 
	`add_byã_to_buff
–
c
, 
ªad_buf„r
, 
ªad_buf„r_pos
 );

267 
ch¨_¥öãd
++;

270 
ouçut_size
 = 0;

271 
	`zx_£t_curs‹
–
TERMINAL_POS_X
+
löe
, 
TERMINAL_POS_Y
+
ch¨_¥öãd
, 
ouçut
, &
ouçut_size
 );

272 
ouçut
[
ouçut_size
++] = 
c
;

273 
ouçut
[
ouçut_size
++] = 
UART_PACKET_END_CHAR
;

274 
	`PutMu…ùÀ
–
COM2
, 
ouçut
 );

281 if–
comm™d_Êag
 )

283 
comm™d_Êag
 = 0;

285 
comm™d_ªque°
.
¨g1
 = comm™d_ªque°.
¨g2
 =

286 
comm™d_ªque°
.
¨g3
 = comm™d_ªque°.
¨g4
 = -1;

288 
	`¥o˚ss_comm™d
(
ªad_buf„r
, &
comm™d_ªque°
.
¨g1
, &comm™d_ªque°.
¨g2
,

289 &
comm™d_ªque°
.
¨g3
, &comm™d_ªque°.
¨g4


292  
comm™d_ªque°
.
¨g1
 )

294 
TR_CMD
:

295 
SW_CMD
:

296 if–
comm™d_ªque°
.
¨g2
 =-1 || comm™d_ªque°.
¨g3
 == -1 )

298 
	`zx_a0_¥öt_îr‹_mesßge
( "Incorrectárg" );

302 
	`Síd
(
£rvî_id
, &
comm™d_ªque°
, (command_request),

303 &
comm™d_ªque°
, (command_request));

307 
RV_CMD
:

308 
	`Síd
(
£rvî_id
, &
comm™d_ªque°
, (command_request),

309 &
comm™d_ªque°
, (command_request));

312 
GO2_CMD
:

313 if–
comm™d_ªque°
.
¨g2
 == -1)

315 
	`zx_a0_¥öt_îr‹_mesßge
( "Incorrectárg(2)" );

317 if–
comm™d_ªque°
.
¨g3
 =
OFFSET_OPT
 && comm™d_ªque°.
¨g4
 == -1 )

319 
	`zx_a0_¥öt_îr‹_mesßge
( "Incorrectárg(4)" );

323 
	`Síd
(
£rvî_id
, &
comm™d_ªque°
, (command_request),

324 &
comm™d_ªque°
, (command_request));

329 
	`zx_a0_¥öt_îr‹_mesßge
( "Incorrect command" );

335 if–
comm™d_ªque°
.
¨g1
 =
QUIT_CMD
 )

339 
	`Exô
();

340 
	}
}

344 
	$zx_ui_öput_èsk
()

347 
zx_ui_ªque°
 
ui_ªque°
;

348 
zx_ui_ªque°
 
ui_ª∂y
;

350 
£rvî_id
 = 
	`WhoIs
("ui_server");

352 
buf
[20];

353 
buf_pos
 = 0;

355 
ãmp_buf
[20];

356 
ãmp_buf_pos
 = 0;

358 
com2_ouçut
[20];

359 
com2_ouçut_size
 = 0;

363 
åack_node
 
åack
 [
TRACK_MAX
];

366 
	`åack_öô
(
CURRENT_TRACK
, &
åack
[0]);

370 
gë_ªsu…
 = 
	`GëC
(
COM2
);

372 
c
 = 
gë_ªsu…
;

374 i‡(
c
 == 13)

376 i‡(
buf_pos
 == 0)

379 
buf
[
buf_pos
++] = 0;

381 i‡(
buf
[0] == 'q')

383 
ui_ªque°
.
vÆue
 = 5000;

387 
i
;

388 
ui_ªque°
.
vÆue
 = 
TRACK_MAX
;

390 
i
 = 0; i < 
TRACK_MAX
; i++)

392 
ãmp_buf_pos
 = 0;

393 
	`zx_put_°rög
(
åack
[
i
].
«me
, &
ãmp_buf
[0], &
ãmp_buf_pos
);

394 
ãmp_buf
[
ãmp_buf_pos
++] = 0;

401 i‡((
ãmp_buf_pos
 =
buf_pos
Ë&& (
	`°rcmp
(&
buf
[0], &
ãmp_buf
[0]) == 0))

403 
ui_ªque°
.
vÆue
 = 
i
;

409 
buf_pos
 = 0;

413 i‡(
ui_ªque°
.
vÆue
 !
TRACK_MAX
)

414 
	`Síd
(
£rvî_id
, &
ui_ªque°
, (ui_ªque°), &
ui_ª∂y
, (ui_reply));

416 i‡(
ui_ªque°
.
vÆue
 > 
TRACK_MAX
)

419 i‡(
c
 == 8)

421 
com2_ouçut_size
 = 0;

422 
	`zx_£t_curs‹
(50, 1 + 
buf_pos
, 
com2_ouçut
, &
com2_ouçut_size
);

423 
com2_ouçut
[
com2_ouçut_size
++] = 
c
;

424 
com2_ouçut
[
com2_ouçut_size
++] = 
UART_PACKET_END_CHAR
;

425 
	`PutMu…ùÀ
–
COM2
, 
com2_ouçut
 );

427 i‡(
buf_pos
 > 0)

429 
buf
[
buf_pos
] = 0;

430 
buf_pos
--;

435 
com2_ouçut_size
 = 0;

436 
	`zx_£t_curs‹
(50, 1 + 
buf_pos
, 
com2_ouçut
, &
com2_ouçut_size
);

437 
com2_ouçut
[
com2_ouçut_size
++] = 
c
;

438 
com2_ouçut
[
com2_ouçut_size
++] = 
UART_PACKET_END_CHAR
;

439 
	`PutMu…ùÀ
–
COM2
, 
com2_ouçut
 );

441 
buf
[
buf_pos
++] = 
c
;

445 
	`Exô
();

446 
	}
}

449 
	$zx_ui_£rvî_èsk
()

452 
	`Regi°îAs
("ui_server");

454 
tid
;

455 
ui_öput_tid
 = 
	`Cª©e
(
FIRST_USER_TASK_PRIORITY
 - 1, 
zx_comm™d_èsk
 );

457 
comm™d_èsk_tid
 = 0;

458 
c⁄åﬁÀr_waôög
 = 0;

459 
comm™d_waôög
 = 0;

461 
zx_comm™d_èsk_ªque°
 
comm™d_ªque°
;

462 
zx_comm™d_èsk_ªque°
 
comm™d
;

467 
	`Re˚ive
(&
tid
, &
comm™d
, (command));

469 i‡(
tid
 =
ui_öput_tid
)

472 
comm™d_èsk_tid
 = 
tid
;

475 
comm™d_ªque°
.
¨g1
 = 
comm™d
.arg1;

476 
comm™d_ªque°
.
¨g2
 = 
comm™d
.arg2;

477 
comm™d_ªque°
.
¨g3
 = 
comm™d
.arg3;

478 
comm™d_ªque°
.
¨g4
 = 
comm™d
.arg4;

479 
comm™d_waôög
 =1;

483 if–
comm™d_waôög
 == 1 )

486 
	`Rïly
(
tid
, &
comm™d_ªque°
, (command_request));

489 
	`Rïly
(
comm™d_èsk_tid
, &
comm™d
, (command));

491 
comm™d_waôög
 = 0;

496 
	`Rïly
(
tid
, &
comm™d
, (command));

503 (
comm™d
.
¨g1
 =
QUIT_CMD
)

508 
	`Regi°îAs
("ui_server");

510 
tid
;

511 
ui_öput_tid
 = 
	`Cª©e
(
FIRST_USER_TASK_PRIORITY
 - 1, 
zx_ui_öput_èsk
);

513 
zx_ui_ªque°
 
ui_ªque°
;

514 
zx_ui_ªque°
 
œ°_d©a
;

515 
œ°_d©a
.
vÆue
 = -1;

519 
	`Re˚ive
(&
tid
, &
ui_ªque°
, (ui_request));

521 i‡(
tid
 =
ui_öput_tid
)

523 
	`Rïly
(
tid
, &
ui_ªque°
, (ui_request));

524 
œ°_d©a
.
vÆue
 = 
ui_ªque°
.value;

528 
	`Rïly
(
tid
, &
œ°_d©a
, (last_data));

529 
œ°_d©a
.
vÆue
 = -1;

532 i‡(
œ°_d©a
.
vÆue
 > 
TRACK_MAX
)

536 
	`Exô
();

537 
	}
}

	@src/project/zx_project_utilities.c

8 
	~<zx_¥oje˘_utûôõs.h
>

9 
	~<zx_¥oje˘.h
>

10 
	~<zx_¥oje˘_åack_node.h
>

11 
	~<zx_¥oje˘_åack_d©a.h
>

12 
	~<zx_u¨t_io.h
>

13 
	~<zx_sy°em_ˇŒs.h
>

16 
	$num_to_°rög
–
num
, 
ba£
, *
bf
 ) {

17 
n
 = 0;

18 
dgt
;

19 
d
 = 1;

21  (
num
 / 
d
Ë>
ba£
 ) d *= base;

22  
d
 != 0 ) {

23 
dgt
 = 
num
 / 
d
;

24 
num
 %
d
;

25 
d
 /
ba£
;

26 if–
n
 || 
dgt
 > 0 || 
d
 == 0 ) {

27 *
bf
++ = 
dgt
 + ( dgt < 10 ? '0' : 'a' - 10 );

28 ++
n
;

31 *
bf
 = 0;

32 
	}
}

35 
	$©oi
–*
°rög
 )

37 
num
=0;

38  *
°rög
 )

40 
num
 =Çum*10 + ( *
°rög
++ -'0' );

42  
num
;

43 
	}
}

46 
	$°rcmp
–*
°r1
, *
°r2
 )

48  *
°r2
 )

50 if–*
°r1
++ !*
°r2
++ )  1;

53 
	}
}

55 
	$node_«me_to_id
–*
node_«me
 )

58 
åack_node
 
åack
 [
TRACK_MAX
];

61 
	`åack_öô
(
CURRENT_TRACK
, &
åack
[0]);

63 
i
=0;

65 
i
 = 0; i < 
TRACK_MAX
; i++)

67 i‡–
	`°rcmp
–
node_«me
, 
åack
[
i
].
«me
 ) == 0)

69  
i
;

74 
	}
}

76 
	$föd_comm™d_vÆue
–*
comm™d
 )

78 if(
	`°rcmp
(
comm™d
, "å"Ë=0 )  
TR_CMD
;

79 if(
	`°rcmp
(
comm™d
, "rv"Ë=0 )  
RV_CMD
;

80 if(
	`°rcmp
(
comm™d
, "sw"Ë=0 )  
SW_CMD
;

81 if(
	`°rcmp
(
comm™d
, "gŸo"Ë=0 )  
GO2_CMD
;

82 if(
	`°rcmp
(
comm™d
, "q" ) =0 )  
QUIT_CMD
;

85 
	}
}

88 
	$¥o˚ss_comm™d
–*
buf„r
, *
¨g1
, *
¨g2
, *
¨g3
, *
¨g4
)

91 
¨g
[5][8];

92 
¨g_cou¡
=0, 
pos
=0, 
i
=0;

95  *
buf„r
 )

97 if–*
buf„r
 == ' ' )

99 
¨g
[
¨g_cou¡
][
pos
]=0;

100 
¨g_cou¡
++;

101 
pos
=0;

102 
buf„r
++;

106 
¨g
[
¨g_cou¡
][
pos
++] = *
buf„r
++;

109 
¨g
[
¨g_cou¡
][
pos
]=0;

110 
¨g_cou¡
++;

112  
i
=0; i<
¨g_cou¡
; i++ )

114 if–
i
 == 0 )

116 *
¨g1
 = 
	`föd_comm™d_vÆue
(
¨g
[0]);

119 if–
i
 == 1 )

121 if–*
¨g1
 =
GO2_CMD
 )

123 *
¨g2
 = 
	`node_«me_to_id
–
¨g
[1] );

124 if–*
¨g2
 == -1 )

132 *
¨g2
 = 
	`©oi
(
¨g
[1]);

136 if–
i
 == 2 )

138 if–*
¨g1
 =
SW_CMD
 )

140 *
¨g3
 = 
¨g
[2][0];

142 if–*
¨g1
 =
GO2_CMD
 )

144 i‡–
	`°rcmp
–
¨g
[2], "off" ) == 0)

146 *
¨g3
 = 
OFFSET_OPT
;

147 *
¨g4
 = 
	`©oi
(
¨g
[3]);

153 *
¨g3
 = 
	`©oi
(
¨g
[2]);

160 
	}
}

164 
	$zx_a0_¥öt_îr‹_mesßge
–*
mesßge
 )

167 
ouçut
[100];

168 
ouçut_size
 = 0;

170 
ouçut_size
 = 0;

171 
	`zx_£t_curs‹
–
DISPLAY_ROW_END
+1, 
TERMINAL_POS_Y
, 
ouçut
, &
ouçut_size
 );

172 
	`zx_îa£_löe
(
ouçut
, &
ouçut_size
);

174 
	`zx_£t_curs‹
–
DISPLAY_ROW_END
+1, 
TERMINAL_POS_Y
, 
ouçut
, &
ouçut_size
);

176 
	`zx_put_°rög
–
mesßge
, 
ouçut
, &
ouçut_size
);

178 
ouçut
[
ouçut_size
++] = 
UART_PACKET_END_CHAR
;

179 
	`PutMu…ùÀ
–
COM2
, 
ouçut
 );

180 
	}
}

	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

146 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


148 
	#P_tmpdú
 "/tmp"

	)

161 
	~<bôs/°dio_lim.h
>

165 
_IO_FILE
 *
°dö
;

166 
_IO_FILE
 *
°dout
;

167 
_IO_FILE
 *
°dîr
;

169 
	#°dö
 
°dö


	)

170 
	#°dout
 
°dout


	)

171 
	#°dîr
 
°dîr


	)

173 
__BEGIN_NAMESPACE_STD


175 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

177 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

178 
__END_NAMESPACE_STD


180 #ifde‡
__USE_ATFILE


182 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

183 
__c⁄°
 *
__√w
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


191 #i‚de‡
__USE_FILE_OFFSET64


192 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

194 #ifde‡
__REDIRECT


195 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

197 
	#tmpfûe
 
tmpfûe64


	)

201 #ifde‡
__USE_LARGEFILE64


202 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

206 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

207 
__END_NAMESPACE_STD


209 #ifde‡
__USE_MISC


212 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

216 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


224 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

225 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

229 
__BEGIN_NAMESPACE_STD


234 
	`f˛o£
 (
FILE
 *
__°ªam
);

239 
	`fÊush
 (
FILE
 *
__°ªam
);

240 
__END_NAMESPACE_STD


242 #ifde‡
__USE_MISC


249 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

252 #ifde‡
__USE_GNU


259 
	`f˛o£Æl
 ();

263 
__BEGIN_NAMESPACE_STD


264 #i‚de‡
__USE_FILE_OFFSET64


269 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

270 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

275 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

276 
__c⁄°
 *
__ª°ri˘
 
__modes
,

277 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

279 #ifde‡
__REDIRECT


280 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

281 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

282 
__wur
;

283 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

284 
__c⁄°
 *
__ª°ri˘
 
__modes
,

285 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

286 
__wur
;

288 
	#f›í
 
f›í64


	)

289 
	#‰e›í
 
‰e›í64


	)

292 
__END_NAMESPACE_STD


293 #ifde‡
__USE_LARGEFILE64


294 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

295 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

296 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

297 
__c⁄°
 *
__ª°ri˘
 
__modes
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

301 #ifdef 
__USE_POSIX


303 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

306 #ifdef 
__USE_GNU


309 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

310 
__c⁄°
 *
__ª°ri˘
 
__modes
,

311 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

314 #ifde‡
__USE_XOPEN2K8


316 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

317 
__THROW
 
__wur
;

322 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

326 
__BEGIN_NAMESPACE_STD


329 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

333 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

334 
__modes
, 
size_t
 
__n
Ë
__THROW
;

335 
__END_NAMESPACE_STD


337 #ifdef 
__USE_BSD


340 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

341 
size_t
 
__size
Ë
__THROW
;

344 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

348 
__BEGIN_NAMESPACE_STD


353 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

354 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

359 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

361 
	$•rötf
 (*
__ª°ri˘
 
__s
,

362 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

368 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

369 
_G_va_li°
 
__¨g
);

374 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

376 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

377 
_G_va_li°
 
__¨g
Ë
__THROW
;

378 
__END_NAMESPACE_STD


380 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


381 
__BEGIN_NAMESPACE_C99


383 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

384 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

385 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

387 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

388 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

389 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

390 
__END_NAMESPACE_C99


393 #ifde‡
__USE_GNU


396 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

397 
_G_va_li°
 
__¨g
)

398 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

399 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

400 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

401 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

402 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

403 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

404 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

407 #ifde‡
__USE_XOPEN2K8


414 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

415 
_G_va_li°
 
__¨g
)

416 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

417 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

418 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

422 
__BEGIN_NAMESPACE_STD


427 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

428 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

433 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

435 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

436 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

438 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

439 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

440 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

441 #ifde‡
__REDIRECT


445 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

446 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

447 
__isoc99_fsˇnf
Ë
__wur
;

448 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

449 
__isoc99_sˇnf
Ë
__wur
;

450 
	`__REDIRECT_NTH
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

451 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

452 
__isoc99_ssˇnf
);

454 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

455 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

456 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

457 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

458 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

459 
	#fsˇnf
 
__isoc99_fsˇnf


	)

460 
	#sˇnf
 
__isoc99_sˇnf


	)

461 
	#ssˇnf
 
__isoc99_ssˇnf


	)

465 
__END_NAMESPACE_STD


467 #ifdef 
__USE_ISOC99


468 
__BEGIN_NAMESPACE_C99


473 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

474 
_G_va_li°
 
__¨g
)

475 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

481 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

482 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

485 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

486 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

487 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

489 #i‡!
deföed
 
__USE_GNU
 \

490 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

491 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

492 #ifde‡
__REDIRECT


496 
	`__REDIRECT
 (
vfsˇnf
,

497 (
FILE
 *
__ª°ri˘
 
__s
,

498 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

499 
__isoc99_vfsˇnf
)

500 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

501 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

502 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

503 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

504 
	`__REDIRECT_NTH
 (
vssˇnf
,

505 (
__c⁄°
 *
__ª°ri˘
 
__s
,

506 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

507 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

508 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

510 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

511 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

512 
_G_va_li°
 
__¨g
Ë
__wur
;

513 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

514 
_G_va_li°
 
__¨g
Ë
__wur
;

515 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

516 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

517 
_G_va_li°
 
__¨g
Ë
__THROW
;

518 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

519 
	#vsˇnf
 
__isoc99_vsˇnf


	)

520 
	#vssˇnf
 
__isoc99_vssˇnf


	)

524 
__END_NAMESPACE_C99


528 
__BEGIN_NAMESPACE_STD


533 
	`fgëc
 (
FILE
 *
__°ªam
);

534 
	`gëc
 (
FILE
 *
__°ªam
);

540 
	`gëch¨
 ();

541 
__END_NAMESPACE_STD


545 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

547 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


552 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

553 
	`gëch¨_u∆ocked
 ();

556 #ifde‡
__USE_MISC


563 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

567 
__BEGIN_NAMESPACE_STD


575 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

576 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

582 
	`putch¨
 (
__c
);

583 
__END_NAMESPACE_STD


587 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

589 #ifde‡
__USE_MISC


596 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

599 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


604 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

605 
	`putch¨_u∆ocked
 (
__c
);

609 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

610 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

612 
	`gëw
 (
FILE
 *
__°ªam
);

615 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

619 
__BEGIN_NAMESPACE_STD


624 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

625 
__wur
;

632 *
	$gës
 (*
__s
Ë
__wur
;

633 
__END_NAMESPACE_STD


635 #ifde‡
__USE_GNU


642 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

643 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

647 #ifdef 
__USE_XOPEN2K8


658 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

659 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

660 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

661 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

662 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

663 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

671 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

672 
size_t
 *
__ª°ri˘
 
__n
,

673 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

677 
__BEGIN_NAMESPACE_STD


682 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

688 
	`puts
 (
__c⁄°
 *
__s
);

695 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

702 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

703 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

708 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

709 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

710 
__END_NAMESPACE_STD


712 #ifde‡
__USE_GNU


719 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

720 
FILE
 *
__ª°ri˘
 
__°ªam
);

723 #ifde‡
__USE_MISC


730 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

731 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

732 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

733 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

737 
__BEGIN_NAMESPACE_STD


742 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

747 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

752 
	`ªwöd
 (
FILE
 *
__°ªam
);

753 
__END_NAMESPACE_STD


760 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


761 #i‚de‡
__USE_FILE_OFFSET64


766 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

771 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

773 #ifde‡
__REDIRECT


774 
	`__REDIRECT
 (
f£eko
,

775 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

776 
f£eko64
);

777 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

779 
	#f£eko
 
f£eko64


	)

780 
	#·ñlo
 
·ñlo64


	)

785 
__BEGIN_NAMESPACE_STD


786 #i‚de‡
__USE_FILE_OFFSET64


791 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

796 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

798 #ifde‡
__REDIRECT


799 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

800 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

801 
	`__REDIRECT
 (
f£ços
,

802 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

804 
	#fgëpos
 
fgëpos64


	)

805 
	#f£ços
 
f£ços64


	)

808 
__END_NAMESPACE_STD


810 #ifde‡
__USE_LARGEFILE64


811 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

812 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

813 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

814 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

817 
__BEGIN_NAMESPACE_STD


819 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

821 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

823 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

824 
__END_NAMESPACE_STD


826 #ifde‡
__USE_MISC


828 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

829 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

830 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 
__BEGIN_NAMESPACE_STD


839 
	`≥º‹
 (
__c⁄°
 *
__s
);

840 
__END_NAMESPACE_STD


846 
	~<bôs/sys_îæi°.h
>

849 #ifdef 
__USE_POSIX


851 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

854 #ifde‡
__USE_MISC


856 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

860 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

861 
deföed
 
__USE_MISC
)

866 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

872 
	`p˛o£
 (
FILE
 *
__°ªam
);

876 #ifdef 
__USE_POSIX


878 *
	$˘îmid
 (*
__s
Ë
__THROW
;

882 #ifde‡
__USE_XOPEN


884 *
	`cu£rid
 (*
__s
);

888 #ifdef 
__USE_GNU


889 
ob°ack
;

892 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

893 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

894 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

895 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

896 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

897 
_G_va_li°
 
__¨gs
)

898 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

902 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


906 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

910 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

913 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

916 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


920 
	#__√ed_gë›t


	)

921 
	~<gë›t.h
>

926 #ifde‡
__USE_EXTERN_INLINES


927 
	~<bôs/°dio.h
>

929 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


930 
	~<bôs/°dio2.h
>

932 #ifde‡
__LDBL_COMPAT


933 
	~<bôs/°dio-ldbl.h
>

936 
__END_DECLS


	@/usr/include/bits/stdio-ldbl.h

20 #i‚de‡
_STDIO_H


24 
__BEGIN_NAMESPACE_STD


25 
	$__LDBL_REDIR_DECL
 (
Ârötf
)

26 
	$__LDBL_REDIR_DECL
 (
¥ötf
)

27 
	$__LDBL_REDIR_DECL
 (
•rötf
)

28 
	$__LDBL_REDIR_DECL
 (
vÂrötf
)

29 
	$__LDBL_REDIR_DECL
 (
v¥ötf
)

30 
	$__LDBL_REDIR_DECL
 (
v•rötf
)

31 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

32 && !
deföed
 
__REDIRECT
 \

33 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

34 
	$__LDBL_REDIR1_DECL
 (
fsˇnf
, 
__∆dbl___isoc99_fsˇnf
)

35 
	$__LDBL_REDIR1_DECL
 (
sˇnf
, 
__∆dbl___isoc99_sˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
ssˇnf
, 
__∆dbl___isoc99_ssˇnf
)

38 
	$__LDBL_REDIR_DECL
 (
fsˇnf
)

39 
	$__LDBL_REDIR_DECL
 (
sˇnf
)

40 
	$__LDBL_REDIR_DECL
 (
ssˇnf
)

42 
__END_NAMESPACE_STD


44 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


45 
__BEGIN_NAMESPACE_C99


46 
	$__LDBL_REDIR_DECL
 (
¢¥ötf
)

47 
	$__LDBL_REDIR_DECL
 (
v¢¥ötf
)

48 
__END_NAMESPACE_C99


51 #ifdef 
__USE_ISOC99


52 
__BEGIN_NAMESPACE_C99


53 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

54 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

55 
	$__LDBL_REDIR1_DECL
 (
vfsˇnf
, 
__∆dbl___isoc99_vfsˇnf
)

56 
	$__LDBL_REDIR1_DECL
 (
vsˇnf
, 
__∆dbl___isoc99_vsˇnf
)

57 
	$__LDBL_REDIR1_DECL
 (
vssˇnf
, 
__∆dbl___isoc99_vssˇnf
)

59 
	$__LDBL_REDIR_DECL
 (
vfsˇnf
)

60 
	$__LDBL_REDIR_DECL
 (
vssˇnf
)

61 
	$__LDBL_REDIR_DECL
 (
vsˇnf
)

63 
__END_NAMESPACE_C99


66 #ifde‡
__USE_GNU


67 
	$__LDBL_REDIR_DECL
 (
vd¥ötf
)

68 
	$__LDBL_REDIR_DECL
 (
d¥ötf
)

69 
	$__LDBL_REDIR_DECL
 (
va•rötf
)

70 
	$__LDBL_REDIR_DECL
 (
__a•rötf
)

71 
	$__LDBL_REDIR_DECL
 (
a•rötf
)

72 
	$__LDBL_REDIR_DECL
 (
ob°ack_¥ötf
)

73 
	$__LDBL_REDIR_DECL
 (
ob°ack_v¥ötf
)

76 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


77 
	$__LDBL_REDIR_DECL
 (
__•rötf_chk
)

78 
	$__LDBL_REDIR_DECL
 (
__v•rötf_chk
)

79 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


80 
	$__LDBL_REDIR_DECL
 (
__¢¥ötf_chk
)

81 
	$__LDBL_REDIR_DECL
 (
__v¢¥ötf_chk
)

83 #i‡
__USE_FORTIFY_LEVEL
 > 1

84 
	$__LDBL_REDIR_DECL
 (
__Ârötf_chk
)

85 
	$__LDBL_REDIR_DECL
 (
__¥ötf_chk
)

86 
	$__LDBL_REDIR_DECL
 (
__vÂrötf_chk
)

87 
	$__LDBL_REDIR_DECL
 (
__v¥ötf_chk
)

88 #ifde‡
__USE_GNU


89 
	$__LDBL_REDIR_DECL
 (
__a•rötf_chk
)

90 
	$__LDBL_REDIR_DECL
 (
__va•rötf_chk
)

91 
	$__LDBL_REDIR_DECL
 (
__d¥ötf_chk
)

92 
	$__LDBL_REDIR_DECL
 (
__vd¥ötf_chk
)

93 
	$__LDBL_REDIR_DECL
 (
__ob°ack_¥ötf_chk
)

94 
	$__LDBL_REDIR_DECL
 (
__ob°ack_v¥ötf_chk
)

	@/usr/include/bits/stdio.h

20 #i‚de‡
_STDIO_H


24 #i‚de‡
__exã∫_ölöe


25 
	#__STDIO_INLINE
 
ölöe


	)

27 
	#__STDIO_INLINE
 
__exã∫_ölöe


	)

31 #ifde‡
__USE_EXTERN_INLINES


34 #i‡!(
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
)

36 
__STDIO_INLINE
 

37 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

39  
	`vÂrötf
 (
°dout
, 
__fmt
, 
__¨g
);

40 
	}
}

44 
__STDIO_INLINE
 

45 
	$gëch¨
 ()

47  
	`_IO_gëc
 (
°dö
);

48 
	}
}

51 #ifde‡
__USE_MISC


53 
__STDIO_INLINE
 

54 
	$fgëc_u∆ocked
 (
FILE
 *
__Â
)

56  
	`_IO_gëc_u∆ocked
 (
__Â
);

57 
	}
}

61 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


63 
__STDIO_INLINE
 

64 
	$gëc_u∆ocked
 (
FILE
 *
__Â
)

66  
	`_IO_gëc_u∆ocked
 (
__Â
);

67 
	}
}

70 
__STDIO_INLINE
 

71 
	$gëch¨_u∆ocked
 ()

73  
	`_IO_gëc_u∆ocked
 (
°dö
);

74 
	}
}

79 
__STDIO_INLINE
 

80 
	$putch¨
 (
__c
)

82  
	`_IO_putc
 (
__c
, 
°dout
);

83 
	}
}

86 #ifde‡
__USE_MISC


88 
__STDIO_INLINE
 

89 
	$Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

91  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

92 
	}
}

96 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


98 
__STDIO_INLINE
 

99 
	$putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
)

101  
	`_IO_putc_u∆ocked
 (
__c
, 
__°ªam
);

102 
	}
}

105 
__STDIO_INLINE
 

106 
	$putch¨_u∆ocked
 (
__c
)

108  
	`_IO_putc_u∆ocked
 (
__c
, 
°dout
);

109 
	}
}

113 #ifdef 
__USE_GNU


115 
__STDIO_INLINE
 
_IO_ssize_t


116 
	$gëlöe
 (**
__löïå
, 
size_t
 *
__n
, 
FILE
 *
__°ªam
)

118  
	`__gëdñim
 (
__löïå
, 
__n
, '\n', 
__°ªam
);

119 
	}
}

123 #ifde‡
__USE_MISC


125 
__STDIO_INLINE
 

126 
__NTH
 (
	$„of_u∆ocked
 (
FILE
 *
__°ªam
))

128  
	`_IO_„of_u∆ocked
 (
__°ªam
);

129 
	}
}

132 
__STDIO_INLINE
 

133 
__NTH
 (
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
))

135  
	`_IO_„º‹_u∆ocked
 (
__°ªam
);

136 
	}
}

142 #i‡
deföed
 
__USE_MISC
 && deföed 
__GNUC__
 && deföed 
__OPTIMIZE__
 \

143 && !
deföed
 
	g__˝lu•lus


145 
	#‰ód_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

146 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

147 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

148 && (
size_t
Ë(
size
) != 0) \

149 ? ({ *
__±r
 = (*Ë(
±r
); \

150 
FILE
 *
__°ªam
 = (
°ªam
); \

151 
size_t
 
__˙t
; \

152 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

153 
__˙t
 > 0; --__cnt) \

155 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
); \

156 i‡(
__c
 =
EOF
) \

158 *
__±r
++ = 
__c
; \

160 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

161 / (
size_t
Ë(
size
); }) \

162 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

163 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

165 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

166 (Ë(
n
), (
size_t
) 0) \

167 : 
	`‰ód_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

169 
	#fwrôe_u∆ocked
(
±r
, 
size
, 
n
, 
°ªam
) \

170 (
	`__exãnsi⁄__
 ((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& __buûtö_c⁄°™t_∞(
n
) \

171 && (
size_t
Ë(
size
Ë* (size_tË(
n
) <= 8 \

172 && (
size_t
Ë(
size
) != 0) \

173 ? ({ c⁄° *
__±r
 = (c⁄° *Ë(
±r
); \

174 
FILE
 *
__°ªam
 = (
°ªam
); \

175 
size_t
 
__˙t
; \

176 
__˙t
 = (
size_t
Ë(
size
Ë* (size_tË(
n
); \

177 
__˙t
 > 0; --__cnt) \

178 i‡(
	`_IO_putc_u∆ocked
 (*
__±r
++, 
__°ªam
Ë=
EOF
) \

180 ((
size_t
Ë(
size
Ë* (size_tË(
n
Ë- 
__˙t
) \

181 / (
size_t
Ë(
size
); }) \

182 : (((
	`__buûtö_c⁄°™t_p
 (
size
Ë&& (
size_t
) (size) == 0) \

183 || (
	`__buûtö_c⁄°™t_p
 (
n
Ë&& (
size_t
) (n) == 0)) \

185 ? ((Ë(
±r
), (Ë(
°ªam
), (Ë(
size
), \

186 (Ë(
n
), (
size_t
) 0) \

187 : 
	`fwrôe_u∆ocked
 (
±r
, 
size
, 
n
, 
°ªam
))))

	)

191 #unde‡
__STDIO_INLINE


	@/usr/include/bits/stdio2.h

20 #i‚de‡
_STDIO_H


24 
	$__•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

25 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

26 
	$__v•rötf_chk
 (*
__ª°ri˘
 
__s
, 
__Êag
, 
size_t
 
__¶í
,

27 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

28 
_G_va_li°
 
__≠
Ë
__THROW
;

30 #ifde‡
__va_¨g_∑ck


31 
__exã∫_Æways_ölöe
 

32 
	`__NTH
 (
	$•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

34  
	`__buûtö___•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

35 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

36 
	}
}

37 #ñi‡!
deföed
 
__˝lu•lus


38 
	#•rötf
(
°r
, ...) \

39 
	`__buûtö___•rötf_chk
 (
°r
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

40 
__VA_ARGS__
)

	)

43 
__exã∫_Æways_ölöe
 

44 
__NTH
 (
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

45 
_G_va_li°
 
__≠
))

47  
	`__buûtö___v•rötf_chk
 (
__s
, 
__USE_FORTIFY_LEVEL
 - 1,

48 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

49 
	}
}

51 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


53 
	$__¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

54 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

55 ...Ë
__THROW
;

56 
	$__v¢¥ötf_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
, 
__Êag
,

57 
size_t
 
__¶í
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

58 
_G_va_li°
 
__≠
Ë
__THROW
;

60 #ifde‡
__va_¨g_∑ck


61 
__exã∫_Æways_ölöe
 

62 
	`__NTH
 (
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

63 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

65  
	`__buûtö___¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

66 
	`__bos
 (
__s
), 
__fmt
, 
	`__va_¨g_∑ck
 ());

67 
	}
}

68 #ñi‡!
deföed
 
__˝lu•lus


69 
	#¢¥ötf
(
°r
, 
Àn
, ...) \

70 
	`__buûtö___¢¥ötf_chk
 (
°r
, 
Àn
, 
__USE_FORTIFY_LEVEL
 - 1, 
	`__bos
 (str), \

71 
__VA_ARGS__
)

	)

74 
__exã∫_Æways_ölöe
 

75 
__NTH
 (
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__n
,

76 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

78  
	`__buûtö___v¢¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

79 
	`__bos
 (
__s
), 
__fmt
, 
__≠
);

80 
	}
}

84 #i‡
__USE_FORTIFY_LEVEL
 > 1

86 
__Ârötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

87 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

88 
__¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

89 
__vÂrötf_chk
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

90 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__≠
);

91 
__v¥ötf_chk
 (
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

92 
_G_va_li°
 
__≠
);

94 #ifde‡
__va_¨g_∑ck


95 
__exã∫_Æways_ölöe
 

96 
	$Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...)

98  
	`__Ârötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

99 
	`__va_¨g_∑ck
 ());

100 
	}
}

102 
__exã∫_Æways_ölöe
 

103 
	$¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

105  
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

106 
	}
}

107 #ñi‡!
deföed
 
__˝lu•lus


108 
	#¥ötf
(...) \

109 
	`__¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

110 
	#Ârötf
(
°ªam
, ...) \

111 
	`__Ârötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

114 
__exã∫_Æways_ölöe
 

115 
	$v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

117 #ifde‡
__USE_EXTERN_INLINES


118  
	`__vÂrötf_chk
 (
°dout
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

120  
	`__v¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

122 
	}
}

124 
__exã∫_Æways_ölöe
 

125 
	$vÂrötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

126 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

128  
	`__vÂrötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

129 
	}
}

131 #ifde‡
__USE_GNU


133 
	$__a•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

134 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

135 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 4))Ë
__wur
;

136 
	$__va•rötf_chk
 (**
__ª°ri˘
 
__±r
, 
__Êag
,

137 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

138 
__THROW
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 3, 0))Ë
__wur
;

139 
	$__d¥ötf_chk
 (
__fd
, 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

140 ...Ë
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

141 
	$__vd¥ötf_chk
 (
__fd
, 
__Êag
,

142 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__¨g
)

143 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

144 
	$__ob°ack_¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

145 
__Êag
, 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

147 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

148 
	$__ob°ack_v¥ötf_chk
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

149 
__Êag
,

150 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

151 
_G_va_li°
 
__¨gs
)

152 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

154 #ifde‡
__va_¨g_∑ck


155 
__exã∫_Æways_ölöe
 

156 
	`__NTH
 (
	$a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
, ...))

158  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

159 
	`__va_¨g_∑ck
 ());

160 
	}
}

162 
__exã∫_Æways_ölöe
 

163 
__NTH
 (
	$__a•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

166  
	`__a•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

167 
	`__va_¨g_∑ck
 ());

168 
	}
}

170 
__exã∫_Æways_ölöe
 

171 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

173  
	`__d¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

174 
	`__va_¨g_∑ck
 ());

175 
	}
}

177 
__exã∫_Æways_ölöe
 

178 
__NTH
 (
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

179 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...))

181  
	`__ob°ack_¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

182 
	`__va_¨g_∑ck
 ());

183 
	}
}

184 #ñi‡!
deföed
 
__˝lu•lus


185 
	#a•rötf
(
±r
, ...) \

186 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

187 
	#__a•rötf
(
±r
, ...) \

188 
	`__a•rötf_chk
 (
±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

189 
	#d¥ötf
(
fd
, ...) \

190 
	`__d¥ötf_chk
 (
fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

191 
	#ob°ack_¥ötf
(
ob°ack
, ...) \

192 
	`__ob°ack_¥ötf_chk
 (
ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

195 
__exã∫_Æways_ölöe
 

196 
__NTH
 (
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__fmt
,

197 
_G_va_li°
 
__≠
))

199  
	`__va•rötf_chk
 (
__±r
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

200 
	}
}

202 
__exã∫_Æways_ölöe
 

203 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
)

205  
	`__vd¥ötf_chk
 (
__fd
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

206 
	}
}

208 
__exã∫_Æways_ölöe
 

209 
__NTH
 (
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

210 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
_G_va_li°
 
__≠
))

212  
	`__ob°ack_v¥ötf_chk
 (
__ob°ack
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

213 
__≠
);

214 
	}
}

220 *
	$__gës_chk
 (*
__°r
, 
size_t
Ë
__wur
;

221 *
	`__REDIRECT
 (
__gës_w¨n
, (*
__°r
), 
gës
)

222 
__wur
 
	`__w¨«âr
 ("please use fgets or getline instead, gets can't "

225 
__exã∫_Æways_ölöe
 
__wur
 *

226 
	$gës
 (*
__°r
)

228 i‡(
	`__bos
 (
__°r
Ë!(
size_t
) -1)

229  
	`__gës_chk
 (
__°r
, 
	`__bos
 (__str));

230  
	`__gës_w¨n
 (
__°r
);

231 
	}
}

233 *
	$__fgës_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

234 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

235 *
	`__REDIRECT
 (
__fgës_Æüs
,

236 (*
__ª°ri˘
 
__s
, 
__n
,

237 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës
Ë
__wur
;

238 *
	`__REDIRECT
 (
__fgës_chk_w¨n
,

239 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

240 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_chk
)

241 
__wur
 
	`__w¨«âr
 ("fgets called with bigger sizeÅhanÜength "

244 
__exã∫_Æways_ölöe
 
__wur
 *

245 
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

247 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

249 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

250  
	`__fgës_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

252 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

253  
	`__fgës_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

255  
	`__fgës_Æüs
 (
__s
, 
__n
, 
__°ªam
);

256 
	}
}

258 
size_t
 
	$__‰ód_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

259 
size_t
 
__size
, size_à
__n
,

260 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

261 
size_t
 
	`__REDIRECT
 (
__‰ód_Æüs
,

262 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

263 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

264 
‰ód
Ë
__wur
;

265 
size_t
 
	`__REDIRECT
 (
__‰ód_chk_w¨n
,

266 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

267 
size_t
 
__size
, size_à
__n
,

268 
FILE
 *
__ª°ri˘
 
__°ªam
),

269 
__‰ód_chk
)

270 
__wur
 
	`__w¨«âr
 ("fread called with bigger size *ÇmembÅhanÜength "

273 
__exã∫_Æways_ölöe
 
__wur
 
size_t


274 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
)

277 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

279 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

280 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

281 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

282  
	`__‰ód_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

284 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

285  
	`__‰ód_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
, 
__°ªam
);

287  
	`__‰ód_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

288 
	}
}

290 #ifde‡
__USE_GNU


291 *
	$__fgës_u∆ocked_chk
 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
,

292 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

293 *
	`__REDIRECT
 (
__fgës_u∆ocked_Æüs
,

294 (*
__ª°ri˘
 
__s
, 
__n
,

295 
FILE
 *
__ª°ri˘
 
__°ªam
), 
fgës_u∆ocked
Ë
__wur
;

296 *
	`__REDIRECT
 (
__fgës_u∆ocked_chk_w¨n
,

297 (*
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

298 
FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgës_u∆ocked_chk
)

299 
__wur
 
	`__w¨«âr
 ("fgets_unlocked called with bigger sizeÅhanÜength "

302 
__exã∫_Æways_ölöe
 
__wur
 *

303 
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

305 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

307 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

308  
	`__fgës_u∆ocked_chk
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

310 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
))

311  
	`__fgës_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__s), 
__n
, 
__°ªam
);

313  
	`__fgës_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

314 
	}
}

317 #ifde‡
__USE_MISC


318 #unde‡
‰ód_u∆ocked


319 
size_t
 
	$__‰ód_u∆ocked_chk
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

320 
size_t
 
__size
, size_à
__n
,

321 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

322 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_Æüs
,

323 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

324 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
),

325 
‰ód_u∆ocked
Ë
__wur
;

326 
size_t
 
	`__REDIRECT
 (
__‰ód_u∆ocked_chk_w¨n
,

327 (*
__ª°ri˘
 
__±r
, 
size_t
 
__±æí
,

328 
size_t
 
__size
, size_à
__n
,

329 
FILE
 *
__ª°ri˘
 
__°ªam
),

330 
__‰ód_u∆ocked_chk
)

331 
__wur
 
	`__w¨«âr
 ("fread_unlocked called with bigger size *ÇmembÅhan "

334 
__exã∫_Æways_ölöe
 
__wur
 
size_t


335 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
, size_à
__n
,

336 
FILE
 *
__ª°ri˘
 
__°ªam
)

338 i‡(
	`__bos0
 (
__±r
Ë!(
size_t
) -1)

340 i‡(!
	`__buûtö_c⁄°™t_p
 (
__size
)

341 || !
	`__buûtö_c⁄°™t_p
 (
__n
)

342 || (
__size
 | 
__n
Ë>(((
size_t
) 1) << (8 *  (size_t) / 2)))

343  
	`__‰ód_u∆ocked_chk
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

344 
__°ªam
);

346 i‡(
__size
 * 
__n
 > 
	`__bos0
 (
__±r
))

347  
	`__‰ód_u∆ocked_chk_w¨n
 (
__±r
, 
	`__bos0
 (__±r), 
__size
, 
__n
,

348 
__°ªam
);

351 #ifde‡
__USE_EXTERN_INLINES


352 i‡(
	`__buûtö_c⁄°™t_p
 (
__size
)

353 && 
	`__buûtö_c⁄°™t_p
 (
__n
)

354 && (
__size
 | 
__n
Ë< (((
size_t
) 1) << (8 *  (size_t) / 2))

355 && 
__size
 * 
__n
 <= 8)

357 
size_t
 
__˙t
 = 
__size
 * 
__n
;

358 *
__˝å
 = (*Ë
__±r
;

359 i‡(
__˙t
 == 0)

362 ; 
__˙t
 > 0; --__cnt)

364 
__c
 = 
	`_IO_gëc_u∆ocked
 (
__°ªam
);

365 i‡(
__c
 =
EOF
)

367 *
__˝å
++ = 
__c
;

369  (
__˝å
 - (*Ë
__±r
Ë/ 
__size
;

372  
	`__‰ód_u∆ocked_Æüs
 (
__±r
, 
__size
, 
__n
, 
__°ªam
);

373 
	}
}

	@/usr/include/bits/stdio_lim.h

19 #i‡!
deföed
 
_STDIO_H
 && !deföed 
__√ed_FOPEN_MAX
 && !deföed 
__√ed_IOV_MAX


23 #ifde‡
_STDIO_H


24 
	#L_tm≤am
 20

	)

25 
	#TMP_MAX
 238328

	)

26 
	#FILENAME_MAX
 4096

	)

28 #ifde‡
__USE_POSIX


29 
	#L_˘îmid
 9

	)

30 #i‡!
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_GNU


31 
	#L_cu£rid
 9

	)

36 #i‡
deföed
 
__√ed_FOPEN_MAX
 || deföed 
_STDIO_H


37 #unde‡
FOPEN_MAX


38 
	#FOPEN_MAX
 16

	)

41 #i‡
deföed
 
__√ed_IOV_MAX
 && !deföed 
IOV_MAX


42 
	#IOV_MAX
 1024

	)

	@/usr/include/bits/sys_errlist.h

20 #i‚de‡
_STDIO_H


26 #ifde‡ 
__USE_BSD


27 
sys_√º
;

28 
__c⁄°
 *__c⁄° 
sys_îæi°
[];

30 #ifde‡ 
__USE_GNU


31 
_sys_√º
;

32 
__c⁄°
 *__c⁄° 
_sys_îæi°
[];

	@/usr/include/bits/types.h

24 #i‚def 
_BITS_TYPES_H


25 
	#_BITS_TYPES_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/w‹dsize.h
>

31 
	t__u_ch¨
;

32 
	t__u_sh‹t
;

33 
	t__u_öt
;

34 
	t__u_l⁄g
;

37 sig√d 
	t__öt8_t
;

38 
	t__uöt8_t
;

39 sig√d 
	t__öt16_t
;

40 
	t__uöt16_t
;

41 sig√d 
	t__öt32_t
;

42 
	t__uöt32_t
;

43 #i‡
__WORDSIZE
 == 64

44 sig√d 
	t__öt64_t
;

45 
	t__uöt64_t
;

46 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


47 
__exãnsi⁄__
 sig√d 
	t__öt64_t
;

48 
__exãnsi⁄__
 
	t__uöt64_t
;

52 #i‡
__WORDSIZE
 == 64

53 
	t__quad_t
;

54 
	t__u_quad_t
;

55 #ñi‡
deföed
 
__GLIBC_HAVE_LONG_LONG


56 
__exãnsi⁄__
 
	t__quad_t
;

57 
__exãnsi⁄__
 
	t__u_quad_t
;

61 
	m__vÆ
[2];

62 } 
	t__quad_t
;

65 
__u_l⁄g
 
	m__vÆ
[2];

66 } 
	t__u_quad_t
;

99 
	#__S16_TYPE
 

	)

100 
	#__U16_TYPE
 

	)

101 
	#__S32_TYPE
 

	)

102 
	#__U32_TYPE
 

	)

103 
	#__SLONGWORD_TYPE
 

	)

104 
	#__ULONGWORD_TYPE
 

	)

105 #i‡
__WORDSIZE
 == 32

106 
	#__SQUAD_TYPE
 
__quad_t


	)

107 
	#__UQUAD_TYPE
 
__u_quad_t


	)

108 
	#__SWORD_TYPE
 

	)

109 
	#__UWORD_TYPE
 

	)

110 
	#__SLONG32_TYPE
 

	)

111 
	#__ULONG32_TYPE
 

	)

112 
	#__S64_TYPE
 
__quad_t


	)

113 
	#__U64_TYPE
 
__u_quad_t


	)

116 
	#__STD_TYPE
 
__exãnsi⁄__
 

	)

117 #ñi‡
__WORDSIZE
 == 64

118 
	t__SQUAD_TYPE
 

	)

119 
	t__UQUAD_TYPE
 

	)

120 
	t__SWORD_TYPE
 

	)

121 
	t__UWORD_TYPE
 

	)

122 
	t__SLONG32_TYPE
 

	)

123 
	t__ULONG32_TYPE
 

	)

124 
	t__S64_TYPE
 

	)

125 
	t__U64_TYPE
 

	)

127 
	t__STD_TYPE
 

	)

131 
	~<bôs/ty≥sizes.h
>

134 
__STD_TYPE
 
	t__DEV_T_TYPE
 
	t__dev_t
;

135 
__STD_TYPE
 
__UID_T_TYPE
 
	g__uid_t
;

136 
__STD_TYPE
 
__GID_T_TYPE
 
	g__gid_t
;

137 
__STD_TYPE
 
__INO_T_TYPE
 
	g__öo_t
;

138 
__STD_TYPE
 
__INO64_T_TYPE
 
	g__öo64_t
;

139 
__STD_TYPE
 
__MODE_T_TYPE
 
	g__mode_t
;

140 
__STD_TYPE
 
__NLINK_T_TYPE
 
	g__∆ök_t
;

141 
__STD_TYPE
 
__OFF_T_TYPE
 
	g__off_t
;

142 
__STD_TYPE
 
__OFF64_T_TYPE
 
	g__off64_t
;

143 
__STD_TYPE
 
__PID_T_TYPE
 
	g__pid_t
;

144 
__STD_TYPE
 
__FSID_T_TYPE
 
	g__fsid_t
;

145 
__STD_TYPE
 
__CLOCK_T_TYPE
 
	g__˛ock_t
;

146 
__STD_TYPE
 
__RLIM_T_TYPE
 
	g__æim_t
;

147 
__STD_TYPE
 
__RLIM64_T_TYPE
 
	g__æim64_t
;

148 
__STD_TYPE
 
__ID_T_TYPE
 
	g__id_t
;

149 
__STD_TYPE
 
__TIME_T_TYPE
 
	g__time_t
;

150 
__STD_TYPE
 
__USECONDS_T_TYPE
 
	g__u£c⁄ds_t
;

151 
__STD_TYPE
 
__SUSECONDS_T_TYPE
 
	g__su£c⁄ds_t
;

153 
__STD_TYPE
 
__DADDR_T_TYPE
 
	g__daddr_t
;

154 
__STD_TYPE
 
__SWBLK_T_TYPE
 
	g__swblk_t
;

155 
__STD_TYPE
 
__KEY_T_TYPE
 
	g__key_t
;

158 
__STD_TYPE
 
__CLOCKID_T_TYPE
 
	g__˛ockid_t
;

161 
__STD_TYPE
 
__TIMER_T_TYPE
 
	g__timî_t
;

164 
__STD_TYPE
 
__BLKSIZE_T_TYPE
 
	g__blksize_t
;

169 
__STD_TYPE
 
__BLKCNT_T_TYPE
 
	g__blk˙t_t
;

170 
__STD_TYPE
 
__BLKCNT64_T_TYPE
 
	g__blk˙t64_t
;

173 
__STD_TYPE
 
__FSBLKCNT_T_TYPE
 
	g__fsblk˙t_t
;

174 
__STD_TYPE
 
__FSBLKCNT64_T_TYPE
 
	g__fsblk˙t64_t
;

177 
__STD_TYPE
 
__FSFILCNT_T_TYPE
 
	g__fsfû˙t_t
;

178 
__STD_TYPE
 
__FSFILCNT64_T_TYPE
 
	g__fsfû˙t64_t
;

180 
__STD_TYPE
 
__SSIZE_T_TYPE
 
	g__ssize_t
;

184 
__off64_t
 
	t__loff_t
;

185 
__quad_t
 *
	t__qaddr_t
;

186 *
	t__ˇddr_t
;

189 
__STD_TYPE
 
__SWORD_TYPE
 
	g__öçå_t
;

192 
__STD_TYPE
 
__U32_TYPE
 
	g__sockÀn_t
;

195 #unde‡
__STD_TYPE


	@/usr/include/features.h

19 #i‚def 
_FEATURES_H


20 
	#_FEATURES_H
 1

	)

96 #unde‡
__USE_ISOC99


97 #unde‡
__USE_ISOC95


98 #unde‡
__USE_POSIX


99 #unde‡
__USE_POSIX2


100 #unde‡
__USE_POSIX199309


101 #unde‡
__USE_POSIX199506


102 #unde‡
__USE_XOPEN


103 #unde‡
__USE_XOPEN_EXTENDED


104 #unde‡
__USE_UNIX98


105 #unde‡
__USE_XOPEN2K


106 #unde‡
__USE_XOPEN2KXSI


107 #unde‡
__USE_XOPEN2K8


108 #unde‡
__USE_XOPEN2K8XSI


109 #unde‡
__USE_LARGEFILE


110 #unde‡
__USE_LARGEFILE64


111 #unde‡
__USE_FILE_OFFSET64


112 #unde‡
__USE_BSD


113 #unde‡
__USE_SVID


114 #unde‡
__USE_MISC


115 #unde‡
__USE_ATFILE


116 #unde‡
__USE_GNU


117 #unde‡
__USE_REENTRANT


118 #unde‡
__USE_FORTIFY_LEVEL


119 #unde‡
__FAVOR_BSD


120 #unde‡
__KERNEL_STRICT_NAMES


124 #i‚de‡
_LOOSE_KERNEL_NAMES


125 
	#__KERNEL_STRICT_NAMES


	)

129 
	#__USE_ANSI
 1

	)

138 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


139 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

140 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

142 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

147 #i‡
deföed
 
_BSD_SOURCE
 && \

148 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

149 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

150 
	#__FAVOR_BSD
 1

	)

154 #ifde‡
_GNU_SOURCE


155 #unde‡
_ISOC95_SOURCE


156 
	#_ISOC95_SOURCE
 1

	)

157 #unde‡
_ISOC99_SOURCE


158 
	#_ISOC99_SOURCE
 1

	)

159 #unde‡
_POSIX_SOURCE


160 
	#_POSIX_SOURCE
 1

	)

161 #unde‡
_POSIX_C_SOURCE


162 
	#_POSIX_C_SOURCE
 200809L

	)

163 #unde‡
_XOPEN_SOURCE


164 
	#_XOPEN_SOURCE
 700

	)

165 #unde‡
_XOPEN_SOURCE_EXTENDED


166 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

167 #unde‡
_LARGEFILE64_SOURCE


168 
	#_LARGEFILE64_SOURCE
 1

	)

169 #unde‡
_BSD_SOURCE


170 
	#_BSD_SOURCE
 1

	)

171 #unde‡
_SVID_SOURCE


172 
	#_SVID_SOURCE
 1

	)

173 #unde‡
_ATFILE_SOURCE


174 
	#_ATFILE_SOURCE
 1

	)

179 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

180 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

181 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

182 
	#_BSD_SOURCE
 1

	)

183 
	#_SVID_SOURCE
 1

	)

190 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

191 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

192 
	#__USE_ISOC99
 1

	)

196 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

197 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

198 
	#__USE_ISOC95
 1

	)

203 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

204 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

205 
	#_POSIX_SOURCE
 1

	)

206 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

207 
	#_POSIX_C_SOURCE
 2

	)

208 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

209 
	#_POSIX_C_SOURCE
 199506L

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

211 
	#_POSIX_C_SOURCE
 200112L

	)

213 
	#_POSIX_C_SOURCE
 200809L

	)

215 
	#__USE_POSIX_IMPLICITLY
 1

	)

218 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


219 
	#__USE_POSIX
 1

	)

222 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


223 
	#__USE_POSIX2
 1

	)

226 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

227 
	#__USE_POSIX199309
 1

	)

230 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

231 
	#__USE_POSIX199506
 1

	)

234 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

235 
	#__USE_XOPEN2K
 1

	)

236 #unde‡
__USE_ISOC95


237 
	#__USE_ISOC95
 1

	)

238 #unde‡
__USE_ISOC99


239 
	#__USE_ISOC99
 1

	)

242 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

243 
	#__USE_XOPEN2K8
 1

	)

244 #unde‡
_ATFILE_SOURCE


245 
	#_ATFILE_SOURCE
 1

	)

248 #ifdef 
_XOPEN_SOURCE


249 
	#__USE_XOPEN
 1

	)

250 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

251 
	#__USE_XOPEN_EXTENDED
 1

	)

252 
	#__USE_UNIX98
 1

	)

253 #unde‡
_LARGEFILE_SOURCE


254 
	#_LARGEFILE_SOURCE
 1

	)

255 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

256 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

257 
	#__USE_XOPEN2K8
 1

	)

258 
	#__USE_XOPEN2K8XSI
 1

	)

260 
	#__USE_XOPEN2K
 1

	)

261 
	#__USE_XOPEN2KXSI
 1

	)

262 #unde‡
__USE_ISOC95


263 
	#__USE_ISOC95
 1

	)

264 #unde‡
__USE_ISOC99


265 
	#__USE_ISOC99
 1

	)

268 #ifde‡
_XOPEN_SOURCE_EXTENDED


269 
	#__USE_XOPEN_EXTENDED
 1

	)

274 #ifde‡
_LARGEFILE_SOURCE


275 
	#__USE_LARGEFILE
 1

	)

278 #ifde‡
_LARGEFILE64_SOURCE


279 
	#__USE_LARGEFILE64
 1

	)

282 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

283 
	#__USE_FILE_OFFSET64
 1

	)

286 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


287 
	#__USE_MISC
 1

	)

290 #ifdef 
_BSD_SOURCE


291 
	#__USE_BSD
 1

	)

294 #ifdef 
_SVID_SOURCE


295 
	#__USE_SVID
 1

	)

298 #ifdef 
_ATFILE_SOURCE


299 
	#__USE_ATFILE
 1

	)

302 #ifdef 
_GNU_SOURCE


303 
	#__USE_GNU
 1

	)

306 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


307 
	#__USE_REENTRANT
 1

	)

310 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

311 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

312 #i‡
_FORTIFY_SOURCE
 > 1

313 
	#__USE_FORTIFY_LEVEL
 2

	)

315 
	#__USE_FORTIFY_LEVEL
 1

	)

318 
	#__USE_FORTIFY_LEVEL
 0

	)

322 
	~<bôs/¥edefs.h
>

325 
	#__STDC_ISO_10646__
 200009L

	)

333 #unde‡
__GNU_LIBRARY__


334 
	#__GNU_LIBRARY__
 6

	)

338 
	#__GLIBC__
 2

	)

339 
	#__GLIBC_MINOR__
 12

	)

341 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

342 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

345 #i‡
deföed
 
__GNUC__
 \

346 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

347 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

348 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

349 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

353 #i‚de‡
__ASSEMBLER__


354 #i‚de‡
_SYS_CDEFS_H


355 
	~<sys/cdefs.h
>

360 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


361 
	#__USE_LARGEFILE
 1

	)

362 
	#__USE_LARGEFILE64
 1

	)

368 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

369 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

370 && 
deföed
 
	g__exã∫_ölöe


371 
	#__USE_EXTERN_INLINES
 1

	)

376 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

377 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

378 && 
deföed
 
	g__exã∫_ölöe


379 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

387 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
);

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

151 
	#_IO_SKIPWS
 01

	)

152 
	#_IO_LEFT
 02

	)

153 
	#_IO_RIGHT
 04

	)

154 
	#_IO_INTERNAL
 010

	)

155 
	#_IO_DEC
 020

	)

156 
	#_IO_OCT
 040

	)

157 
	#_IO_HEX
 0100

	)

158 
	#_IO_SHOWBASE
 0200

	)

159 
	#_IO_SHOWPOINT
 0400

	)

160 
	#_IO_UPPERCASE
 01000

	)

161 
	#_IO_SHOWPOS
 02000

	)

162 
	#_IO_SCIENTIFIC
 04000

	)

163 
	#_IO_FIXED
 010000

	)

164 
	#_IO_UNITBUF
 020000

	)

165 
	#_IO_STDIO
 040000

	)

166 
	#_IO_DONT_CLOSE
 0100000

	)

167 
	#_IO_BOOLALPHA
 0200000

	)

170 
_IO_jump_t
; 
	g_IO_FILE
;

173 #ifde‡
_IO_MTSAFE_IO


174 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

175 
	~<bôs/°dio-lock.h
>

180 
	t_IO_lock_t
;

186 
	s_IO_m¨kî
 {

187 
_IO_m¨kî
 *
	m_√xt
;

188 
_IO_FILE
 *
	m_sbuf
;

192 
	m_pos
;

194 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

195 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

196 
	mpublic
:

197 
°ªamm¨kî
(
°ªambuf
 *
sb
);

198 ~
°ªamm¨kî
();

199 
ßvög
(Ë{  
	m_•os
 == -2; }

200 
dñè
(
°ªamm¨kî
&);

201 
dñè
();

206 
	e__codecvt_ªsu…


208 
	m__codecvt_ok
,

209 
	m__codecvt_∑πül
,

210 
	m__codecvt_îr‹
,

211 
	m__codecvt_noc⁄v


214 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


217 
	s_IO_codecvt


219 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

220 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

221 
	m__mb°©e_t
 *,

222 c⁄° 
	mwch¨_t
 *,

223 c⁄° 
	mwch¨_t
 *,

224 c⁄° 
	mwch¨_t
 **, *,

226 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

227 
	m__mb°©e_t
 *, *,

229 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

230 
	m__mb°©e_t
 *,

232 c⁄° **, 
	mwch¨_t
 *,

233 
	mwch¨_t
 *, wchar_t **);

234 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

235 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

236 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

237 c⁄° *, c⁄° *, 
	m_IO_size_t
);

238 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

240 
_IO_ic⁄v_t
 
	m__cd_ö
;

241 
_IO_ic⁄v_t
 
	m__cd_out
;

245 
	s_IO_wide_d©a


247 
wch¨_t
 *
	m_IO_ªad_±r
;

248 
wch¨_t
 *
	m_IO_ªad_íd
;

249 
wch¨_t
 *
	m_IO_ªad_ba£
;

250 
wch¨_t
 *
	m_IO_wrôe_ba£
;

251 
wch¨_t
 *
	m_IO_wrôe_±r
;

252 
wch¨_t
 *
	m_IO_wrôe_íd
;

253 
wch¨_t
 *
	m_IO_buf_ba£
;

254 
wch¨_t
 *
	m_IO_buf_íd
;

256 
wch¨_t
 *
	m_IO_ßve_ba£
;

257 
wch¨_t
 *
	m_IO_backup_ba£
;

259 
wch¨_t
 *
	m_IO_ßve_íd
;

261 
__mb°©e_t
 
	m_IO_°©e
;

262 
__mb°©e_t
 
	m_IO_œ°_°©e
;

263 
_IO_codecvt
 
	m_codecvt
;

265 
wch¨_t
 
	m_sh‹tbuf
[1];

267 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

271 
	s_IO_FILE
 {

272 
	m_Êags
;

273 
	#_IO_fûe_Êags
 
_Êags


	)

277 * 
	m_IO_ªad_±r
;

278 * 
	m_IO_ªad_íd
;

279 * 
	m_IO_ªad_ba£
;

280 * 
	m_IO_wrôe_ba£
;

281 * 
	m_IO_wrôe_±r
;

282 * 
	m_IO_wrôe_íd
;

283 * 
	m_IO_buf_ba£
;

284 * 
	m_IO_buf_íd
;

286 *
	m_IO_ßve_ba£
;

287 *
	m_IO_backup_ba£
;

288 *
	m_IO_ßve_íd
;

290 
_IO_m¨kî
 *
	m_m¨kîs
;

292 
_IO_FILE
 *
	m_chaö
;

294 
	m_fûío
;

296 
	m_blksize
;

298 
	m_Êags2
;

300 
_IO_off_t
 
	m_ﬁd_off£t
;

302 
	#__HAVE_COLUMN


	)

304 
	m_cur_cﬁumn
;

305 sig√d 
	m_vèbÀ_off£t
;

306 
	m_sh‹tbuf
[1];

310 
_IO_lock_t
 *
	m_lock
;

311 #ifde‡
_IO_USE_OLD_IO_FILE


314 
	s_IO_FILE_com∂ëe


316 
_IO_FILE
 
	m_fûe
;

318 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

319 
_IO_off64_t
 
	m_off£t
;

320 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


322 
_IO_codecvt
 *
	m_codecvt
;

323 
_IO_wide_d©a
 *
	m_wide_d©a
;

324 
_IO_FILE
 *
	m_‰ìªs_li°
;

325 *
	m_‰ìªs_buf
;

326 
size_t
 
	m_‰ìªs_size
;

328 *
	m__∑d1
;

329 *
	m__∑d2
;

330 *
	m__∑d3
;

331 *
	m__∑d4
;

332 
size_t
 
	m__∑d5
;

334 
	m_mode
;

336 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

340 #i‚de‡
__˝lu•lus


341 
_IO_FILE
 
	t_IO_FILE
;

344 
	g_IO_FILE_∂us
;

346 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

347 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

349 #i‚de‡
_LIBC


350 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

351 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

352 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

354 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

355 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

356 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

364 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

372 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

373 
	tsize_t
 
	t__n
);

381 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

384 
	t__io_˛o£_‚
 (*
	t__cookõ
);

387 #ifde‡
_GNU_SOURCE


389 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

390 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

391 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

392 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

397 
__io_ªad_‚
 *
	mªad
;

398 
__io_wrôe_‚
 *
	mwrôe
;

399 
__io_£ek_‚
 *
	m£ek
;

400 
__io_˛o£_‚
 *
	m˛o£
;

401 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

402 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

404 
	g_IO_cookõ_fûe
;

407 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

408 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

412 #ifde‡
__˝lu•lus


416 
__undîÊow
 (
_IO_FILE
 *);

417 
__uÊow
 (
_IO_FILE
 *);

418 
__ovîÊow
 (
_IO_FILE
 *, );

419 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


420 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

421 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

422 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

425 #i‡ 
__GNUC__
 >= 3

426 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

431 
	#_IO_gëc_u∆ocked
(
_Â
) \

432 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

433 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

434 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

435 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

436 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

437 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

438 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

439 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

440 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

441 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

443 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


444 
	#_IO_gëwc_u∆ocked
(
_Â
) \

445 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

446 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

447 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

448 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

449 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

450 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

451 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

452 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

453 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

454 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

457 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

458 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

460 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

461 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

462 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

463 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

468 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

469 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

471 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

472 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

473 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 #ifde‡
_IO_MTSAFE_IO


476 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

477 
	#_IO_Êockfûe
(
_Â
) \

478 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

479 
	#_IO_fu∆ockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

482 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

483 
	#_IO_Êockfûe
(
_Â
Ë

	)

484 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

485 
	#_IO_·rylockfûe
(
_Â
Ë

	)

486 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

487 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

490 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

491 
_IO_va_li°
, *
__ª°ri˘
);

492 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

493 
_IO_va_li°
);

494 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

495 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

497 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

498 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

500 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

502 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


503 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

504 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

505 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

506 #i‡
__GNUC__
 >= 2

509 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


510 
	~<shlib-com∑t.h
>

511 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

512 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

513 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

514 c⁄° 
_IO_°dö_u£d
;

515 
wók_exã∫
 (
_IO_°dö_u£d
);

518 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


519 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

523 
	#_IO_fwide
(
__Â
, 
__mode
) \

524 ({ 
__ªsu…
 = (
__mode
); \

525 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

527 i‡((
__Â
)->
_mode
 == 0) \

529 (
__Â
)->
_mode
 = -1; \

530 
__ªsu…
 = (
__Â
)->
_mode
; \

532 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

533 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

535 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

536 
__ªsu…
; })

	)

539 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

540 
_IO_va_li°
, *
__ª°ri˘
);

541 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

542 
_IO_va_li°
);

543 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

544 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

547 #ifde‡
__LDBL_COMPAT


548 
	~<bôs/libio-ldbl.h
>

551 #ifde‡
__˝lu•lus


	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/bits/libio-ldbl.h

20 #i‚de‡
_IO_STDIO_H


24 
	$__LDBL_REDIR_DECL
 (
_IO_vfsˇnf
)

25 
	`__LDBL_REDIR_DECL
 (
_IO_vÂrötf
)

	@/usr/include/bits/predefs.h

19 #i‚de‡
_FEATURES_H


23 #i‚de‡
_PREDEFS_H


24 
	#_PREDEFS_H


	)

27 
	#__STDC_IEC_559__
 1

	)

28 
	#__STDC_IEC_559_COMPLEX__
 1

	)

	@/usr/include/bits/stdio-lock.h

20 #i‚de‡
_BITS_STDIO_LOCK_H


21 
	#_BITS_STDIO_LOCK_H
 1

	)

23 
	~<bôs/libc-lock.h
>

24 
	~<lowÀvñlock.h
>

28 
	#_IO_lock_öex≥nsive
 1

	)

30 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t_IO_lock_t
;

32 
	#_IO_lock_öôülizî
 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

34 
	#_IO_lock_öô
(
_«me
) \

35 ((
_«me
Ë(
_IO_lock_t
Ë
_IO_lock_öôülizî
 , 0)

	)

37 
	#_IO_lock_föi
(
_«me
) \

38 ((Ë0)

	)

40 
	#_IO_lock_lock
(
_«me
) \

42 *
__£lf
 = 
THREAD_SELF
; \

43 i‡((
_«me
).
ow√r
 !
__£lf
) \

45 
	`Œl_lock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

46 (
_«me
).
ow√r
 = 
__£lf
; \

48 ++(
_«me
).
˙t
; \

49 } 0)

	)

51 
	#_IO_lock_åylock
(
_«me
) \

53 
__ªsu…
 = 0; \

54 *
__£lf
 = 
THREAD_SELF
; \

55 i‡((
_«me
).
ow√r
 !
__£lf
) \

57 i‡(
	`Œl_åylock
 ((
_«me
).
lock
) == 0) \

59 (
_«me
).
ow√r
 = 
__£lf
; \

60 (
_«me
).
˙t
 = 1; \

63 
__ªsu…
 = 
EBUSY
; \

66 ++(
_«me
).
˙t
; \

67 
__ªsu…
; \

68 })

	)

70 
	#_IO_lock_u∆ock
(
_«me
) \

72 i‡(--(
_«me
).
˙t
 == 0) \

74 (
_«me
).
ow√r
 = 
NULL
; \

75 
	`Œl_u∆ock
 ((
_«me
).
lock
, 
LLL_PRIVATE
); \

77 } 0)

	)

81 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
) \

82 
	`__libc_˛ónup_ªgi⁄_°¨t
 (((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0, 
_f˘
, _Â)

	)

83 
	#_IO_˛ónup_ªgi⁄_°¨t_nﬂrg
(
_f˘
) \

84 
	`__libc_˛ónup_ªgi⁄_°¨t
 (1, 
_f˘
, 
NULL
)

	)

85 
	#_IO_˛ónup_ªgi⁄_íd
(
_doô
) \

86 
	`__libc_˛ónup_ªgi⁄_íd
 (
_doô
)

	)

88 #i‡
deföed
 
_LIBC
 && !deföed 
NOT_IN_libc


90 #ifde‡
__EXCEPTIONS


91 
	#_IO_acquúe_lock
(
_Â
) \

93 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

94 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_f˘
))) \

95 (
_Â
); \

96 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

97 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
) \

99 
_IO_FILE
 *
_IO_acquúe_lock_fûe
 \

100 
	`__©åibuã__
((
	`˛ónup
 (
_IO_acquúe_lock_˛ór_Êags2_f˘
))) \

101 (
_Â
); \

102 
	`_IO_Êockfûe
 (
_IO_acquúe_lock_fûe
);

	)

104 
	#_IO_acquúe_lock
(
_Â
Ë
_IO_acquúe_lock_√eds_ex˚±i⁄s_íabÀd


	)

105 
	#_IO_acquúe_lock_˛ór_Êags2
(
_Â
Ë
	`_IO_acquúe_lock
 (_Â)

	)

107 
	#_IO_ªÀa£_lock
(
_Â
Ë; } 0)

	)

	@/usr/include/bits/typesizes.h

20 #i‚de‡
_BITS_TYPES_H


24 #i‚def 
_BITS_TYPESIZES_H


25 
	#_BITS_TYPESIZES_H
 1

	)

30 
	#__DEV_T_TYPE
 
__UQUAD_TYPE


	)

31 
	#__UID_T_TYPE
 
__U32_TYPE


	)

32 
	#__GID_T_TYPE
 
__U32_TYPE


	)

33 
	#__INO_T_TYPE
 
__ULONGWORD_TYPE


	)

34 
	#__INO64_T_TYPE
 
__UQUAD_TYPE


	)

35 
	#__MODE_T_TYPE
 
__U32_TYPE


	)

36 
	#__NLINK_T_TYPE
 
__UWORD_TYPE


	)

37 
	#__OFF_T_TYPE
 
__SLONGWORD_TYPE


	)

38 
	#__OFF64_T_TYPE
 
__SQUAD_TYPE


	)

39 
	#__PID_T_TYPE
 
__S32_TYPE


	)

40 
	#__RLIM_T_TYPE
 
__ULONGWORD_TYPE


	)

41 
	#__RLIM64_T_TYPE
 
__UQUAD_TYPE


	)

42 
	#__BLKCNT_T_TYPE
 
__SLONGWORD_TYPE


	)

43 
	#__BLKCNT64_T_TYPE
 
__SQUAD_TYPE


	)

44 
	#__FSBLKCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

45 
	#__FSBLKCNT64_T_TYPE
 
__UQUAD_TYPE


	)

46 
	#__FSFILCNT_T_TYPE
 
__ULONGWORD_TYPE


	)

47 
	#__FSFILCNT64_T_TYPE
 
__UQUAD_TYPE


	)

48 
	#__ID_T_TYPE
 
__U32_TYPE


	)

49 
	#__CLOCK_T_TYPE
 
__SLONGWORD_TYPE


	)

50 
	#__TIME_T_TYPE
 
__SLONGWORD_TYPE


	)

51 
	#__USECONDS_T_TYPE
 
__U32_TYPE


	)

52 
	#__SUSECONDS_T_TYPE
 
__SLONGWORD_TYPE


	)

53 
	#__DADDR_T_TYPE
 
__S32_TYPE


	)

54 
	#__SWBLK_T_TYPE
 
__SLONGWORD_TYPE


	)

55 
	#__KEY_T_TYPE
 
__S32_TYPE


	)

56 
	#__CLOCKID_T_TYPE
 
__S32_TYPE


	)

57 
	#__TIMER_T_TYPE
 *

	)

58 
	#__BLKSIZE_T_TYPE
 
__SLONGWORD_TYPE


	)

59 
	#__FSID_T_TYPE
 såu˘ { 
__vÆ
[2]; }

	)

60 
	#__SSIZE_T_TYPE
 
__SWORD_TYPE


	)

63 
	#__FD_SETSIZE
 1024

	)

	@/usr/include/bits/wordsize.h

3 #i‡
deföed
 
__x86_64__


4 
	#__WORDSIZE
 64

	)

5 
	#__WORDSIZE_COMPAT32
 1

	)

7 
	#__WORDSIZE
 32

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

91 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

92 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

94 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

96 
__BEGIN_NAMESPACE_STD


102 
	`__ex˘y≥
 (
iß um
);

103 
	`__ex˘y≥
 (
ißÕha
);

104 
	`__ex˘y≥
 (
is˙ål
);

105 
	`__ex˘y≥
 (
isdigô
);

106 
	`__ex˘y≥
 (
i¶owî
);

107 
	`__ex˘y≥
 (
isgøph
);

108 
	`__ex˘y≥
 (
i•röt
);

109 
	`__ex˘y≥
 (
i•un˘
);

110 
	`__ex˘y≥
 (
is•a˚
);

111 
	`__ex˘y≥
 (
isuµî
);

112 
	`__ex˘y≥
 (
isxdigô
);

116 
	$tﬁowî
 (
__c
Ë
__THROW
;

119 
	$touµî
 (
__c
Ë
__THROW
;

121 
__END_NAMESPACE_STD


125 #ifdef 
__USE_ISOC99


126 
__BEGIN_NAMESPACE_C99


128 
	`__ex˘y≥
 (
isbœnk
);

130 
__END_NAMESPACE_C99


133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE
 && !deföed 
__˝lu•lus


173 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

174 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

175 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

176 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

177 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

178 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

179 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

180 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

181 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

182 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

183 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

185 #ifde‡
__USE_ISOC99


186 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

189 #ifde‡
__USE_EXTERN_INLINES


190 
__exã∫_ölöe
 

191 
__NTH
 (
	$tﬁowî
 (
__c
))

193  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

194 
	}
}

196 
__exã∫_ölöe
 

197 
__NTH
 (
	$touµî
 (
__c
))

199  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

200 
	}
}

203 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


204 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

205 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

208 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


209 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

210 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

212 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

213 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

219 #ifde‡
__USE_XOPEN2K8


233 
	~<xloˇÀ.h
>

237 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

238 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

240 
	#__ex˘y≥_l
(
«me
) \

241 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

247 
__ex˘y≥_l
 (
iß um_l
);

248 
__ex˘y≥_l
 (
ißÕha_l
);

249 
__ex˘y≥_l
 (
is˙ål_l
);

250 
__ex˘y≥_l
 (
isdigô_l
);

251 
__ex˘y≥_l
 (
i¶owî_l
);

252 
__ex˘y≥_l
 (
isgøph_l
);

253 
__ex˘y≥_l
 (
i•röt_l
);

254 
__ex˘y≥_l
 (
i•un˘_l
);

255 
__ex˘y≥_l
 (
is•a˚_l
);

256 
__ex˘y≥_l
 (
isuµî_l
);

257 
__ex˘y≥_l
 (
isxdigô_l
);

259 
__ex˘y≥_l
 (
isbœnk_l
);

263 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

264 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

267 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

270 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


271 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

272 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

273 
	#__touµî_l
(
c
, 
loˇÀ
) \

274 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

275 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

276 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

280 #i‚de‡
__NO_CTYPE


281 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

282 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

283 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

284 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

285 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

286 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

287 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

288 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

289 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

290 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

291 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

293 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

295 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


296 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

297 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

300 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

301 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

302 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

303 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

304 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

305 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

306 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

307 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

308 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

309 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

310 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

312 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

314 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


315 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

316 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

323 
__END_DECLS


	@/usr/include/gnu/stubs.h

4 
	~<bôs/w‹dsize.h
>

6 #i‡
__WORDSIZE
 == 32

7 
	~<gnu/°ubs-32.h
>

8 #ñi‡
__WORDSIZE
 == 64

9 
	~<gnu/°ubs-64.h
>

	@/usr/include/sys/cdefs.h

20 #i‚def 
_SYS_CDEFS_H


21 
	#_SYS_CDEFS_H
 1

	)

24 #i‚de‡
_FEATURES_H


25 
	~<„©uªs.h
>

31 #i‡
deföed
 
__GNUC__
 && !deföed 
__STDC__


36 #unde‡
__P


37 #unde‡
__PMT


39 #ifde‡
__GNUC__


46 #i‡!
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (3, 3)

47 
	#__THROW
 
	`__©åibuã__
 ((
__nŸhrow__
))

	)

48 
	#__NTH
(
f˘
Ë
	`__©åibuã__
 ((
__nŸhrow__
)Ë
	)
fct

50 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

51 
	#__THROW
 
	`throw
 ()

	)

52 
	#__NTH
(
f˘
Ëf˘ 
	`throw
 ()

	)

54 
	#__THROW


	)

55 
	#__NTH
(
f˘
Ë
	)
fct

61 
	#__ölöe


	)

63 
	#__THROW


	)

64 
	#__NTH
(
f˘
Ë
	)
fct

66 
	#__c⁄°
 c⁄°

	)

67 
	#__sig√d
 sig√d

	)

68 
	#__vﬁ©ûe
 vﬁ©ûe

	)

74 
	#__P
(
¨gs
Ë
	)
args

75 
	#__PMT
(
¨gs
Ë
	)
args

80 
	#__CONCAT
(
x
,
y
Ëx ## 
	)
y

81 
	#__STRING
(
x
Ë#x

	)

84 
	#__±r_t
 *

	)

85 
	#__l⁄g_doubÀ_t
 

	)

89 #ifdef 
__˝lu•lus


90 
	#__BEGIN_DECLS
 "C" {

	)

91 
	#__END_DECLS
 }

	)

93 
	#__BEGIN_DECLS


	)

94 
	#__END_DECLS


	)

103 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES


104 
	#__BEGIN_NAMESPACE_STD
 
«me•a˚
 
°d
 {

	)

105 
	#__END_NAMESPACE_STD
 }

	)

106 
	#__USING_NAMESPACE_STD
(
«me
Ë
usög
 
°d
::«me;

	)

107 
	#__BEGIN_NAMESPACE_C99
 
«me•a˚
 
__c99
 {

	)

108 
	#__END_NAMESPACE_C99
 }

	)

109 
	#__USING_NAMESPACE_C99
(
«me
Ë
usög
 
__c99
::«me;

	)

114 
	#__BEGIN_NAMESPACE_STD


	)

115 
	#__END_NAMESPACE_STD


	)

116 
	#__USING_NAMESPACE_STD
(
«me
)

	)

117 
	#__BEGIN_NAMESPACE_C99


	)

118 
	#__END_NAMESPACE_C99


	)

119 
	#__USING_NAMESPACE_C99
(
«me
)

	)

124 #i‚de‡
__BOUNDED_POINTERS__


125 
	#__bounded


	)

126 
	#__unbounded


	)

127 
	#__±rvÆue


	)

132 
	#__bos
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 
__USE_FORTIFY_LEVEL
 > 1)

	)

133 
	#__bos0
(
±r
Ë
	`__buûtö_obje˘_size
 (±r, 0)

	)

135 #i‡
__GNUC_PREREQ
 (4,3)

136 
	#__w¨nde˛
(
«me
, 
msg
) \

137 
	`«me
 (Ë
	`__©åibuã__
((
	`__w¨nög__
 (
msg
)))

	)

138 
	#__w¨«âr
(
msg
Ë
	`__©åibuã__
((
	`__w¨nög__
 (msg)))

	)

139 
	#__îr‹de˛
(
«me
, 
msg
) \

140 
	`«me
 (Ë
	`__©åibuã__
((
	`__îr‹__
 (
msg
)))

	)

142 
	#__w¨nde˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

143 
	#__w¨«âr
(
msg
)

	)

144 
	#__îr‹de˛
(
«me
, 
msg
Ë
	`«me
 ()

	)

148 #i‡
__GNUC_PREREQ
 (2,97)

150 
	#__Êex¨r
 []

	)

152 #ifde‡
__GNUC__


153 
	#__Êex¨r
 [0]

	)

155 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

156 
	#__Êex¨r
 []

	)

159 
	#__Êex¨r
 [1]

	)

175 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

177 
	#__REDIRECT
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

178 #ifde‡
__˝lu•lus


179 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

180 
«me
 
¥Ÿo
 
__THROW
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs))

	)

182 
	#__REDIRECT_NTH
(
«me
, 
¥Ÿo
, 
Æüs
) \

183 
«me
 
¥Ÿo
 
	`__asm__
 (
	`__ASMNAME
 (#Æüs)Ë
__THROW


	)

185 
	#__ASMNAME
(
˙ame
Ë
	`__ASMNAME2
 (
__USER_LABEL_PREFIX__
, c«me)

	)

186 
	#__ASMNAME2
(
¥efix
, 
˙ame
Ë
	`__STRING
 (¥efixË
	)
cname

199 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

200 
	#__©åibuã__
(
xyz
Ë

	)

206 #i‡
__GNUC_PREREQ
 (2,96)

207 
	#__©åibuã_mÆloc__
 
	`__©åibuã__
 ((
__mÆloc__
))

	)

209 
	#__©åibuã_mÆloc__


	)

215 #i‡
__GNUC_PREREQ
 (2,96)

216 
	#__©åibuã_puª__
 
	`__©åibuã__
 ((
__puª__
))

	)

218 
	#__©åibuã_puª__


	)

224 #i‡
__GNUC_PREREQ
 (3,1)

225 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__u£d__
))

	)

226 
	#__©åibuã_noölöe__
 
	`__©åibuã__
 ((
__noölöe__
))

	)

228 
	#__©åibuã_u£d__
 
	`__©åibuã__
 ((
__unu£d__
))

	)

229 
	#__©åibuã_noölöe__


	)

233 #i‡
__GNUC_PREREQ
 (3,2)

234 
	#__©åibuã_dïªˇãd__
 
	`__©åibuã__
 ((
__dïªˇãd__
))

	)

236 
	#__©åibuã_dïªˇãd__


	)

245 #i‡
__GNUC_PREREQ
 (2,8)

246 
	#__©åibuã_f‹m©_¨g__
(
x
Ë
	`__©åibuã__
 ((
	`__f‹m©_¨g__
 (x)))

	)

248 
	#__©åibuã_f‹m©_¨g__
(
x
Ë

	)

255 #i‡
__GNUC_PREREQ
 (2,97)

256 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
) \

257 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__°rfm⁄__
, 
a
, 
b
)))

	)

259 
	#__©åibuã_f‹m©_°rfm⁄__
(
a
,
b
Ë

	)

264 #i‡
__GNUC_PREREQ
 (3,3)

265 
	#__n⁄nuŒ
(
∑øms
Ë
	`__©åibuã__
 ((
__n⁄nuŒ__
Ö¨ams))

	)

267 
	#__n⁄nuŒ
(
∑øms
)

	)

272 #i‡
__GNUC_PREREQ
 (3,4)

273 
	#__©åibuã_w¨n_unu£d_ªsu…__
 \

274 
	`__©åibuã__
 ((
__w¨n_unu£d_ªsu…__
))

	)

275 #i‡
__USE_FORTIFY_LEVEL
 > 0

276 
	#__wur
 
__©åibuã_w¨n_unu£d_ªsu…__


	)

279 
	#__©åibuã_w¨n_unu£d_ªsu…__


	)

281 #i‚de‡
__wur


282 
	#__wur


	)

286 #i‡
__GNUC_PREREQ
 (3,2)

287 
	#__Æways_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__Æways_ölöe__
))

	)

289 
	#__Æways_ölöe
 
__ölöe


	)

294 #i‡!
deföed
 
__˝lu•lus
 || 
__GNUC_PREREQ
 (4,3)

295 #i‡
deföed
 
__GNUC_STDC_INLINE__
 || deföed 
__˝lu•lus


296 
	#__exã∫_ölöe
 
__ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

297 #i‡
__GNUC_PREREQ
 (4,3)

298 
	#__exã∫_Æways_ölöe
 \

299 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
, 
__¨tificül__
))

	)

301 
	#__exã∫_Æways_ölöe
 \

302 
__Æways_ölöe
 
	`__©åibuã__
 ((
__gnu_ölöe__
))

	)

305 
	#__exã∫_ölöe
 
__ölöe


	)

306 #i‡
__GNUC_PREREQ
 (4,3)

307 
	#__exã∫_Æways_ölöe
 \

308 
__Æways_ölöe
 
	`__©åibuã__
 ((
__¨tificül__
))

	)

310 
	#__exã∫_Æways_ölöe
 
__Æways_ölöe


	)

317 #i‡
__GNUC_PREREQ
 (4,3)

318 
	#__va_¨g_∑ck
(Ë
	`__buûtö_va_¨g_∑ck
 ()

	)

319 
	#__va_¨g_∑ck_Àn
(Ë
	`__buûtö_va_¨g_∑ck_Àn
 ()

	)

326 #i‡!
__GNUC_PREREQ
 (2,8)

327 
	#__exãnsi⁄__


	)

331 #i‡!
__GNUC_PREREQ
 (2,92)

332 
	#__ª°ri˘


	)

338 #i‡
__GNUC_PREREQ
 (3,1Ë&& !
deföed
 
__GNUG__


339 
	#__ª°ri˘_¨r
 
__ª°ri˘


	)

341 #ifde‡
__GNUC__


342 
	#__ª°ri˘_¨r


	)

344 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

345 
	#__ª°ri˘_¨r
 
ª°ri˘


	)

348 
	#__ª°ri˘_¨r


	)

353 
	~<bôs/w‹dsize.h
>

355 #i‡
deföed
 
__LONG_DOUBLE_MATH_OPTIONAL
 && deföed 
__NO_LONG_DOUBLE_MATH


356 
	#__LDBL_COMPAT
 1

	)

357 #ifde‡
__REDIRECT


358 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

359 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
) \

360 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

361 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT_NTH
 («me,ÖrŸo,álüs)

	)

362 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
) \

363 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##«me)

	)

364 
	#__LDBL_REDIR1_DECL
(
«me
, 
Æüs
) \

365 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 (#Æüs));

	)

366 
	#__LDBL_REDIR_DECL
(
«me
) \

367 
	`__ty≥of
 (
«me
Ë«mê
	`__asm
 (
	`__ASMNAME
 ("__∆dbl_" #«me));

	)

368 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

369 
	`__LDBL_REDIR1
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

370 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

371 
	`__LDBL_REDIR1_NTH
 (
«me
, 
¥Ÿo
, 
__∆dbl_
##
Æüs
)

	)

374 #i‡!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT


375 
	#__LDBL_REDIR1
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê
	)
proto

376 
	#__LDBL_REDIR
(
«me
, 
¥Ÿo
Ë«mê
	)
proto

377 
	#__LDBL_REDIR1_NTH
(
«me
, 
¥Ÿo
, 
Æüs
Ë«mê¥Ÿÿ
__THROW


	)

378 
	#__LDBL_REDIR_NTH
(
«me
, 
¥Ÿo
Ë«mê¥Ÿÿ
__THROW


	)

379 
	#__LDBL_REDIR_DECL
(
«me
)

	)

380 #ifde‡
__REDIRECT


381 
	#__REDIRECT_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
Ë
	`__REDIRECT
 («me,ÖrŸo,álüs)

	)

382 
	#__REDIRECT_NTH_LDBL
(
«me
, 
¥Ÿo
, 
Æüs
) \

383 
	`__REDIRECT_NTH
 (
«me
, 
¥Ÿo
, 
Æüs
)

	)

	@/usr/include/bits/libc-lock.h

20 #i‚de‡
_BITS_LIBC_LOCK_H


21 
	#_BITS_LIBC_LOCK_H
 1

	)

23 
	~<±hªad.h
>

24 
	#__√ed_NULL


	)

25 
	~<°ddef.h
>

34 #ifde‡
_LIBC


35 
	~<lowÀvñlock.h
>

36 
	~<és.h
>

37 
	~<±hªad-fun˘i⁄s.h
>

38 
	~<î∫o.h
>

39 
	~<gnu/›ti⁄-groups.h
>

43 #i‡
deföed
 
_LIBC
 || deföed 
_IO_MTSAFE_IO


44 #i‡(
deföed
 
NOT_IN_libc
 && !deföed 
IS_IN_lib±hªad
Ë|| !deföed 
_LIBC


45 
±hªad_muãx_t
 
	t__libc_lock_t
;

46 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__libc_lock_ªcursive_t
;

48 
	t__libc_lock_t
;

49 °ru˘ { 
	mlock
; 
	m˙t
; *
	mow√r
; } 
	t__libc_lock_ªcursive_t
;

51 °ru˘ { 
±hªad_muãx_t
 
	mmuãx
; } 
	t__πld_lock_ªcursive_t
;

52 #ifde‡
__USE_UNIX98


53 
±hªad_rwlock_t
 
	t__libc_rwlock_t
;

55 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

58 
__libc_lock_›aque__
 
	t__libc_lock_t
;

59 
__libc_lock_ªcursive_›aque__
 
	t__libc_lock_ªcursive_t
;

60 
__libc_rwlock_›aque__
 
	t__libc_rwlock_t
;

64 
±hªad_key_t
 
	t__libc_key_t
;

73 
	#__libc_lock_deföe
(
CLASS
,
NAME
) \

74 
CLASS
 
__libc_lock_t
 
NAME
;

	)

75 
	#__libc_rwlock_deföe
(
CLASS
,
NAME
) \

76 
CLASS
 
__libc_rwlock_t
 
NAME
;

	)

77 
	#__libc_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

78 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

79 
	#__πld_lock_deföe_ªcursive
(
CLASS
,
NAME
) \

80 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
;

	)

91 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

92 #i‡
LLL_LOCK_INITIALIZER
 == 0

93 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

94 
CLASS
 
__libc_lock_t
 
NAME
;

	)

96 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

97 
CLASS
 
__libc_lock_t
 
NAME
 = 
LLL_LOCK_INITIALIZER
;

	)

100 #i‡
__LT_SPINLOCK_INIT
 == 0

101 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

102 
CLASS
 
__libc_lock_t
 
NAME
;

	)

104 
	#__libc_lock_deföe_öôülized
(
CLASS
,
NAME
) \

105 
CLASS
 
__libc_lock_t
 
NAME
 = 
PTHREAD_MUTEX_INITIALIZER
;

	)

109 
	#__libc_rwlock_deföe_öôülized
(
CLASS
,
NAME
) \

110 
CLASS
 
__libc_rwlock_t
 
NAME
 = 
PTHREAD_RWLOCK_INITIALIZER
;

	)

114 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

115 #i‡
LLL_LOCK_INITIALIZER
 == 0

116 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

117 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
;

	)

119 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

120 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

122 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

123 { 
LLL_LOCK_INITIALIZER
, 0, 
NULL
 }

	)

125 
	#__libc_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

126 
CLASS
 
__libc_lock_ªcursive_t
 
NAME
 = 
_LIBC_LOCK_RECURSIVE_INITIALIZER
;

	)

127 
	#_LIBC_LOCK_RECURSIVE_INITIALIZER
 \

128 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

131 
	#__πld_lock_deföe_öôülized_ªcursive
(
CLASS
,
NAME
) \

132 
CLASS
 
__πld_lock_ªcursive_t
 
NAME
 = 
_RTLD_LOCK_RECURSIVE_INITIALIZER
;

	)

133 
	#_RTLD_LOCK_RECURSIVE_INITIALIZER
 \

134 {
PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
}

	)

136 
	#__πld_lock_öôülize
(
NAME
) \

137 (Ë((
NAME
Ë(
__πld_lock_ªcursive_t
Ë
_RTLD_LOCK_RECURSIVE_INITIALIZER
)

	)

144 #ifde‡
__PIC__


145 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

146 (
	`__exãnsi⁄__
 ({ 
	`__ty≥of
 (
FUNC
Ë*
_‚
 = (FUNC); \

147 
_‚
 !
NULL
 ? (*_‚Ë
ARGS
 : 
ELSE
; }))

	)

149 
	#__libc_maybe_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

150 (
FUNC
 !
NULL
 ? FUNC 
ARGS
 : 
ELSE
)

	)

154 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


155 
	#PTFAVAIL
(
NAME
Ë
__libc_±hªad_fun˘i⁄s_öô


	)

156 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

157 (
__libc_±hªad_fun˘i⁄s_öô
 ? 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
Ë: 
ELSE
)

	)

158 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

159 
	`PTHFCT_CALL
 (
±r_
##
FUNC
, 
ARGS
)

	)

161 
	#PTFAVAIL
(
NAME
Ë(NAME !
NULL
)

	)

162 
	#__libc_±f_ˇŒ
(
FUNC
, 
ARGS
, 
ELSE
) \

163 
	`__libc_maybe_ˇŒ
 (
FUNC
, 
ARGS
, 
ELSE
)

	)

164 
	#__libc_±f_ˇŒ_Æways
(
FUNC
, 
ARGS
) \

165 
FUNC
 
ARGS


	)

171 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

172 
	#__libc_lock_öô
(
NAME
Ë((NAMEË
LLL_LOCK_INITIALIZER
, 0)

	)

174 
	#__libc_lock_öô
(
NAME
) \

175 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_öô
, (&(
NAME
), 
NULL
), 0)

	)

177 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


180 
	#__libc_rwlock_öô
(
NAME
) \

181 (
	`__buûtö_mem£t
 (&(
NAME
), '\0',  (NAME)), 0)

	)

183 
	#__libc_rwlock_öô
(
NAME
) \

184 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_öô
, (&(
NAME
), 
NULL
), 0)

	)

188 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

189 
	#__libc_lock_öô_ªcursive
(
NAME
) \

190 ((
NAME
Ë(
__libc_lock_ªcursive_t
Ë
_LIBC_LOCK_RECURSIVE_INITIALIZER
, 0)

	)

192 
	#__libc_lock_öô_ªcursive
(
NAME
) \

194 i‡(
__±hªad_muãx_öô
 !
NULL
) \

196 
±hªad_muãx©å_t
 
__©å
; \

197 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

198 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

199 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

200 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

202 } 0)

	)

205 
	#__πld_lock_öô_ªcursive
(
NAME
) \

207 i‡(
__±hªad_muãx_öô
 !
NULL
) \

209 
±hªad_muãx©å_t
 
__©å
; \

210 
	`__±hªad_muãx©å_öô
 (&
__©å
); \

211 
	`__±hªad_muãx©å_£ây≥
 (&
__©å
, 
PTHREAD_MUTEX_RECURSIVE_NP
); \

212 
	`__±hªad_muãx_öô
 (&(
NAME
).
muãx
, &
__©å
); \

213 
	`__±hªad_muãx©å_de°roy
 (&
__©å
); \

215 } 0)

	)

220 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

221 
	#__libc_lock_föi
(
NAME
Ë((Ë0)

	)

223 
	#__libc_lock_föi
(
NAME
) \

224 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

226 #i‡
deföed
 
SHARED
 && !deföed 
NOT_IN_libc


227 
	#__libc_rwlock_föi
(
NAME
Ë((Ë0)

	)

229 
	#__libc_rwlock_föi
(
NAME
) \

230 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_de°roy
, (&(
NAME
)), 0)

	)

234 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

235 
	#__libc_lock_föi_ªcursive
(
NAME
Ë((Ë0)

	)

237 
	#__libc_lock_föi_ªcursive
(
NAME
) \

238 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_de°roy
, (&(
NAME
)), 0)

	)

242 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

243 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

247 
__libc_lock_lock_‚
 (
__libc_lock_t
 *);

248 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_‚
);

250 #i‡
__OPTION_EGLIBC_BIG_MACROS


251 
	#__libc_lock_lock
(
NAME
) \

252 ({ 
	`Œl_lock
 (
NAME
, 
LLL_PRIVATE
); 0; })

	)

254 
	#__libc_lock_lock
(
NAME
) \

255 
	`__libc_lock_lock_‚
 (&(
NAME
))

	)

258 
	#__libc_lock_lock
(
NAME
) \

259 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
)), 0)

	)

261 
	#__libc_rwlock_rdlock
(
NAME
) \

262 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_rdlock
, (&(
NAME
)), 0)

	)

263 
	#__libc_rwlock_wæock
(
NAME
) \

264 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_wæock
, (&(
NAME
)), 0)

	)

267 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

268 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

272 
__libc_lock_lock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

273 
libc_hiddí_¥Ÿo
 (
__libc_lock_lock_ªcursive_‚
);

275 #i‡
__OPTION_EGLIBC_BIG_MACROS


276 
	#__libc_lock_lock_ªcursive
(
NAME
) \

278 *
£lf
 = 
THREAD_SELF
; \

279 i‡((
NAME
).
ow√r
 !
£lf
) \

281 
	`Œl_lock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

282 (
NAME
).
ow√r
 = 
£lf
; \

284 ++(
NAME
).
˙t
; \

285 } 0)

	)

287 
	#__libc_lock_lock_ªcursive
(
NAME
) \

288 
	`__libc_lock_lock_ªcursive_‚
 (&(
NAME
))

	)

291 
	#__libc_lock_lock_ªcursive
(
NAME
) \

292 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

296 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

297 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

301 
__libc_lock_åylock_‚
 (
__libc_lock_t
 *);

302 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_‚
);

304 #i‡
__OPTION_EGLIBC_BIG_MACROS


305 
	#__libc_lock_åylock
(
NAME
) \

306 
	`Œl_åylock
 (
NAME
)

	)

308 
	#__libc_lock_åylock
(
NAME
) \

309 
	`__libc_lock_åylock_‚
 (&(
NAME
))

	)

312 
	#__libc_lock_åylock
(
NAME
) \

313 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

315 
	#__libc_rwlock_åyrdlock
(
NAME
) \

316 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åyrdlock
, (&(
NAME
)), 0)

	)

317 
	#__libc_rwlock_åywæock
(
NAME
) \

318 
	`__libc_maybe_ˇŒ
 (
__±hªad_rwlock_åywæock
, (&(
NAME
)), 0)

	)

321 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

322 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

326 
__libc_lock_åylock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

327 
libc_hiddí_¥Ÿo
 (
__libc_lock_åylock_ªcursive_‚
);

329 #i‡
__OPTION_EGLIBC_BIG_MACROS


330 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

332 
ªsu…
 = 0; \

333 *
£lf
 = 
THREAD_SELF
; \

334 i‡((
NAME
).
ow√r
 !
£lf
) \

336 i‡(
	`Œl_åylock
 ((
NAME
).
lock
) == 0) \

338 (
NAME
).
ow√r
 = 
£lf
; \

339 (
NAME
).
˙t
 = 1; \

342 
ªsu…
 = 
EBUSY
; \

345 ++(
NAME
).
˙t
; \

346 
ªsu…
; \

347 })

	)

349 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

350 
	`__libc_lock_åylock_ªcursive_‚
 (&(
NAME
))

	)

353 
	#__libc_lock_åylock_ªcursive
(
NAME
) \

354 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
)), 0)

	)

357 
	#__πld_lock_åylock_ªcursive
(
NAME
) \

358 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_åylock
, (&(
NAME
).
muãx
), 0)

	)

361 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

362 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

366 
__libc_lock_u∆ock_‚
 (
__libc_lock_t
 *);

367 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_‚
);

369 #i‡
__OPTION_EGLIBC_BIG_MACROS


370 
	#__libc_lock_u∆ock
(
NAME
) \

371 
	`Œl_u∆ock
 (
NAME
, 
LLL_PRIVATE
)

	)

373 
	#__libc_lock_u∆ock
(
NAME
) \

374 
	`__libc_lock_u∆ock_‚
 (&(
NAME
))

	)

377 
	#__libc_lock_u∆ock
(
NAME
) \

378 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

380 
	#__libc_rwlock_u∆ock
(
NAME
) \

381 
	`__libc_±f_ˇŒ
 (
__±hªad_rwlock_u∆ock
, (&(
NAME
)), 0)

	)

384 #i‡
deföed
 
_LIBC
 && (!deföed 
NOT_IN_libc
 || deföed 
IS_IN_lib±hªad
)

385 #i‡
__OPTION_EGLIBC_BIG_MACROS
 != 1

389 
__libc_lock_u∆ock_ªcursive_‚
 (
__libc_lock_ªcursive_t
 *);

390 
libc_hiddí_¥Ÿo
 (
__libc_lock_u∆ock_ªcursive_‚
);

392 #i‡
__OPTION_EGLIBC_BIG_MACROS


394 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

396 i‡(--(
NAME
).
˙t
 == 0) \

398 (
NAME
).
ow√r
 = 
NULL
; \

399 
	`Œl_u∆ock
 ((
NAME
).
lock
, 
LLL_PRIVATE
); \

401 } 0)

	)

403 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

404 
	`__libc_lock_u∆ock_ªcursive_‚
 (&(
NAME
))

	)

407 
	#__libc_lock_u∆ock_ªcursive
(
NAME
) \

408 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
)), 0)

	)

411 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


412 
	#__πld_lock_deÁu…_lock_ªcursive
(
lock
) \

413 ++((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

415 
	#__πld_lock_deÁu…_u∆ock_ªcursive
(
lock
) \

416 --((
±hªad_muãx_t
 *)(
lock
))->
__d©a
.
__cou¡
;

	)

418 
	#__πld_lock_lock_ªcursive
(
NAME
) \

419 
	`GL
(
dl_πld_lock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

421 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

422 
	`GL
(
dl_πld_u∆ock_ªcursive
Ë(&(
NAME
).
muãx
)

	)

424 
	#__πld_lock_lock_ªcursive
(
NAME
) \

425 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_lock
, (&(
NAME
).
muãx
), 0)

	)

427 
	#__πld_lock_u∆ock_ªcursive
(
NAME
) \

428 
	`__libc_maybe_ˇŒ
 (
__±hªad_muãx_u∆ock
, (&(
NAME
).
muãx
), 0)

	)

432 #i‡
PTHREAD_ONCE_INIT
 == 0

435 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

436 
CLASS
 
±hªad_⁄˚_t
 
NAME


	)

438 
	#__libc_⁄˚_deföe
(
CLASS
, 
NAME
) \

439 
CLASS
 
±hªad_⁄˚_t
 
NAME
 = 
PTHREAD_ONCE_INIT


	)

443 
	#__libc_⁄˚
(
ONCE_CONTROL
, 
INIT_FUNCTION
) \

445 i‡(
	`PTFAVAIL
 (
__±hªad_⁄˚
)) \

446 
	`__libc_±f_ˇŒ_Æways
 (
__±hªad_⁄˚
, (&(
ONCE_CONTROL
), \

447 
INIT_FUNCTION
)); \

448 i‡((
ONCE_CONTROL
Ë=
PTHREAD_ONCE_INIT
) { \

449 
	`INIT_FUNCTION
 (); \

450 (
ONCE_CONTROL
) |= 2; \

452 } 0)

	)

459 
_±hªad_˛ónup_push
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

460 (*
routöe
Ë(*), *
¨g
);

461 
	`_±hªad_˛ónup_p›
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

462 
execuã
);

463 
	`_±hªad_˛ónup_push_de„r
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

464 (*
routöe
Ë(*), *
¨g
);

465 
	`_±hªad_˛ónup_p›_ª°‹e
 (
_±hªad_˛ónup_buf„r
 *
buf„r
,

466 
execuã
);

469 
	#__libc_˛ónup_ªgi⁄_°¨t
(
DOIT
, 
FCT
, 
ARG
) \

470 { 
_±hªad_˛ónup_buf„r
 
_buf„r
; \

471 
_avaû
; \

472 i‡(
DOIT
) { \

473 
_avaû
 = 
	`PTFAVAIL
 (
_±hªad_˛ónup_push_de„r
); \

474 i‡(
_avaû
) { \

475 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_push_de„r
, (&
_buf„r
, 
FCT
, \

476 
ARG
)); \

478 
_buf„r
.
__routöe
 = (
FCT
); \

479 
_buf„r
.
__¨g
 = (
ARG
); \

482 
_avaû
 = 0; \

483 }

	)

486 
	#__libc_˛ónup_ªgi⁄_íd
(
DOIT
) \

487 i‡(
_avaû
) { \

488 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

489 } i‡(
DOIT
) \

490 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
); \

491 
	}

	)
}

494 
	#__libc_˛ónup_íd
(
DOIT
) \

495 i‡(
_avaû
) { \

496 
	`__libc_±f_ˇŒ_Æways
 (
_±hªad_˛ónup_p›_ª°‹e
, (&
_buf„r
, 
DOIT
));\

497 } i‡(
DOIT
) \

498 
_buf„r
.
	`__routöe
 (_buf„r.
__¨g
)

	)

502 
__exã∫_ölöe
 

503 
	$__libc_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
f
)

505 i‡(
f
->
__do_ô
)

506 
f
->
	`__ˇn˚l_routöe
 (f->
__ˇn˚l_¨g
);

507 
	}
}

509 
	#__libc_˛ónup_push
(
f˘
, 
¨g
) \

511 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

512 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__libc_˛ónup_routöe
))) \

513 { .
__ˇn˚l_routöe
 = (
f˘
), .
__ˇn˚l_¨g
 = (
¨g
), \

514 .
__do_ô
 = 1 };

	)

516 
	#__libc_˛ónup_p›
(
execuã
) \

517 
__˛‰ame
.
__do_ô
 = (
execuã
); \

518 } 0)

	)

522 
	#__libc_key_¸óã
(
KEY
, 
DESTRUCTOR
) \

523 
	`__libc_±f_ˇŒ
 (
__±hªad_key_¸óã
, (
KEY
, 
DESTRUCTOR
), 1)

	)

526 
	#__libc_gë•ecific
(
KEY
) \

527 
	`__libc_±f_ˇŒ
 (
__±hªad_gë•ecific
, (
KEY
), 
NULL
)

	)

530 
	#__libc_£t•ecific
(
KEY
, 
VALUE
) \

531 
	`__libc_±f_ˇŒ
 (
__±hªad_£t•ecific
, (
KEY
, 
VALUE
), 0)

	)

537 
	#__libc_©f‹k
(
PREPARE
, 
PARENT
, 
CHILD
) \

538 
	`__ªgi°î_©f‹k
 (
PREPARE
, 
PARENT
, 
CHILD
, 
NULL
)

	)

539 
__ªgi°î_©f‹k
 ((*
__¥ï¨e
) (),

540 (*
__∑ª¡
) (),

541 (*
__chûd
) (),

542 *
__dso_h™dÀ
);

547 
	`__±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

548 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx_©å
);

550 
	`__±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
);

552 
	`__±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
);

554 
	`__±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
);

556 
	`__±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
);

558 
	`__±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
);

560 
	`__±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
);

562 
	`__±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
,

563 
__köd
);

565 #ifde‡
__USE_UNIX98


566 
	`__±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__rwlock
,

567 
__c⁄°
 
±hªad_rwlock©å_t
 *
__©å
);

569 
	`__±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
);

571 
	`__±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

573 
	`__±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
);

575 
	`__±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
);

577 
	`__±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
);

579 
	`__±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
);

582 
	`__±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

583 (*
__de°r_fun˘i⁄
) (*));

585 
	`__±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

586 
__c⁄°
 *
__poöãr
);

588 *
	`__±hªad_gë•ecific
 (
±hªad_key_t
 
__key
);

590 
	`__±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

591 (*
__öô_routöe
) ());

593 
	`__±hªad_©f‹k
 ((*
__¥ï¨e
) (),

594 (*
__∑ª¡
) (),

595 (*
__chûd
) ());

601 #i‚de‡
__NO_WEAK_PTHREAD_ALIASES


602 #ifde‡
wók_exã∫


603 #i‡
_LIBC


604 
	~<bp-sym.h
>

606 
	#BP_SYM
(
sym
Ë
	)
sym

608 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_öô
))

609 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_de°roy
))

610 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_lock
))

611 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_åylock
))

612 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx_u∆ock
))

613 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_öô
))

614 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_de°roy
))

615 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_muãx©å_£ây≥
))

616 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_öô
))

617 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_de°roy
))

618 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_rdlock
))

619 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åyrdlock
))

620 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_wæock
))

621 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_åywæock
))

622 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_rwlock_u∆ock
))

623 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_key_¸óã
))

624 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_£t•ecific
))

625 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_gë•ecific
))

626 
	`wók_exã∫
 (
	$BP_SYM
 (
__±hªad_⁄˚
))

627 
	$wók_exã∫
 (
__±hªad_öôülize
)

628 
	$wók_exã∫
 (
__±hªad_©f‹k
)

629 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_push_de„r
))

630 
	`wók_exã∫
 (
	$BP_SYM
 (
_±hªad_˛ónup_p›_ª°‹e
))

631 
	`wók_exã∫
 (
	$BP_SYM
 (
±hªad_£tˇn˚l°©e
))

633 #¥agm®
wók
 
__±hªad_muãx_öô


634 #¥agm®
wók
 
__±hªad_muãx_de°roy


635 #¥agm®
wók
 
__±hªad_muãx_lock


636 #¥agm®
wók
 
__±hªad_muãx_åylock


637 #¥agm®
wók
 
__±hªad_muãx_u∆ock


638 #¥agm®
wók
 
__±hªad_muãx©å_öô


639 #¥agm®
wók
 
__±hªad_muãx©å_de°roy


640 #¥agm®
wók
 
__±hªad_muãx©å_£ây≥


641 #¥agm®
wók
 
__±hªad_rwlock_de°roy


642 #¥agm®
wók
 
__±hªad_rwlock_rdlock


643 #¥agm®
wók
 
__±hªad_rwlock_åyrdlock


644 #¥agm®
wók
 
__±hªad_rwlock_wæock


645 #¥agm®
wók
 
__±hªad_rwlock_åywæock


646 #¥agm®
wók
 
__±hªad_rwlock_u∆ock


647 #¥agm®
wók
 
__±hªad_key_¸óã


648 #¥agm®
wók
 
__±hªad_£t•ecific


649 #¥agm®
wók
 
__±hªad_gë•ecific


650 #¥agm®
wók
 
__±hªad_⁄˚


651 #¥agm®
wók
 
__±hªad_öôülize


652 #¥agm®
wók
 
__±hªad_©f‹k


653 #¥agm®
wók
 
_±hªad_˛ónup_push_de„r


654 #¥agm®
wók
 
_±hªad_˛ónup_p›_ª°‹e


655 #¥agm®
wók
 
±hªad_£tˇn˚l°©e


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002

64 
	g__gc⁄v_°ï
;

65 
	g__gc⁄v_°ï_d©a
;

66 
	g__gc⁄v_lﬂded_obje˘
;

67 
	g__gc⁄v_å™s_d©a
;

71 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

72 
	t__c⁄°
 **, __const *,

73 **, 
	tsize_t
 *, , );

76 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

79 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

80 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

84 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

85 
	t__gc⁄v_°ï_d©a
 *, *,

86 
	t__c⁄°
 *,

87 
	t__c⁄°
 **,

88 
	t__c⁄°
 *, **,

89 
	tsize_t
 *);

92 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

93 
	t__c⁄°
 *,

97 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

98 
	tsize_t
 *);

101 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

102 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

104 
	s__gc⁄v_å™s_d©a


107 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

108 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

109 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

110 *
__d©a
;

111 
__gc⁄v_å™s_d©a
 *
__√xt
;

116 
	s__gc⁄v_°ï


118 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

119 
__c⁄°
 *
__mod«me
;

121 
__cou¡î
;

123 *
__‰om_«me
;

124 *
__to_«me
;

126 
__gc⁄v_f˘
 
__f˘
;

127 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

128 
__gc⁄v_öô_f˘
 
__öô_f˘
;

129 
__gc⁄v_íd_f˘
 
__íd_f˘
;

133 
__mö_√eded_‰om
;

134 
__max_√eded_‰om
;

135 
__mö_√eded_to
;

136 
__max_√eded_to
;

139 
__°©eful
;

141 *
__d©a
;

146 
	s__gc⁄v_°ï_d©a


148 *
__outbuf
;

149 *
__outbu„nd
;

153 
__Êags
;

157 
__övoˇti⁄_cou¡î
;

161 
__öã∫Æ_u£
;

163 
__mb°©e_t
 *
__°©ï
;

164 
__mb°©e_t
 
__°©e
;

168 
__gc⁄v_å™s_d©a
 *
__å™s
;

173 
	s__gc⁄v_öfo


175 
size_t
 
__n°ïs
;

176 
__gc⁄v_°ï
 *
__°ïs
;

177 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

178 } *
	t__gc⁄v_t
;

	@/usr/include/gnu/stubs-32.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub___kî√l_co¶


	)

11 
	#__°ub___kî√l_söl


	)

12 
	#__°ub___kî√l_è∆


	)

13 
	#__°ub_chÊags


	)

14 
	#__°ub_Áâach


	)

15 
	#__°ub_fchÊags


	)

16 
	#__°ub_fdëach


	)

17 
	#__°ub_gây


	)

18 
	#__°ub_lchmod


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/gnu/stubs-64.h

6 #ifde‡
_LIBC


7 #îr‹ 
Aµliˇti⁄s
 
may
 
nŸ
 
deföe
 
the
 
ma¸o
 
_LIBC


10 
	#__°ub_bdÊush


	)

11 
	#__°ub_chÊags


	)

12 
	#__°ub_Áâach


	)

13 
	#__°ub_fchÊags


	)

14 
	#__°ub_fdëach


	)

15 
	#__°ub_gëmsg


	)

16 
	#__°ub_gây


	)

17 
	#__°ub_lchmod


	)

18 
	#__°ub_putmsg


	)

19 
	#__°ub_ªvoke


	)

20 
	#__°ub_£éogö


	)

21 
	#__°ub_sigªtu∫


	)

22 
	#__°ub_s°k


	)

23 
	#__°ub_°ty


	)

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s1
,

323 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

324 
__THROW
 
__©åibuã_puª__
;

327 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

328 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

332 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

333 
__THROW
;

336 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

337 
__END_NAMESPACE_STD


339 #ifde‡
__USE_GNU


342 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

343 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

344 
__THROW
;

348 
__BEGIN_NAMESPACE_STD


351 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

355 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

359 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

363 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

364 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

365 
mb°©e_t
 *
__p
Ë
__THROW
;

368 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

369 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

372 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

373 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

374 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

375 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

376 
__END_NAMESPACE_STD


378 #ifde‡
__USE_EXTERN_INLINES


384 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

385 
__exã∫_ölöe
 
wöt_t


386 
	`__NTH
 (
	$btowc
 (
__c
))

387 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

388 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

390 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

391 
__exã∫_ölöe
 

392 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

393 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

394 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

396 
__exã∫_ölöe
 
size_t


397 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

398 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

399 {  (
__ps
 !
NULL


400 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

403 
__BEGIN_NAMESPACE_STD


406 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

407 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

408 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

412 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

413 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

414 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

415 
__END_NAMESPACE_STD


418 #ifdef 
__USE_XOPEN2K8


421 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

422 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

423 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

427 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

428 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

429 
size_t
 
__nwc
, size_à
__Àn
,

430 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

435 #ifde‡
__USE_XOPEN


437 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

441 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

445 
__BEGIN_NAMESPACE_STD


448 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

449 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

450 
__END_NAMESPACE_STD


452 #ifde‡
__USE_ISOC99


453 
__BEGIN_NAMESPACE_C99


455 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

456 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

457 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

458 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

459 
__END_NAMESPACE_C99


463 
__BEGIN_NAMESPACE_STD


466 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

467 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

471 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

472 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

473 
__THROW
;

474 
__END_NAMESPACE_STD


476 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

477 
__BEGIN_NAMESPACE_C99


480 
__exãnsi⁄__


481 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

482 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

483 
__THROW
;

487 
__exãnsi⁄__


488 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

489 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

490 
__ba£
Ë
__THROW
;

491 
__END_NAMESPACE_C99


494 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


497 
__exãnsi⁄__


498 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

499 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

500 
__THROW
;

504 
__exãnsi⁄__


505 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

506 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

507 
__ba£
Ë
__THROW
;

510 #ifde‡
__USE_GNU


524 
	~<xloˇÀ.h
>

528 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

529 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

530 
__loˇÀ_t
 
__loc
Ë
__THROW
;

532 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

533 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

534 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

536 
__exãnsi⁄__


537 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

538 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

539 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

541 
__exãnsi⁄__


542 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

543 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

544 
__ba£
, 
__loˇÀ_t
 
__loc
)

545 
__THROW
;

547 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

548 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

549 
__THROW
;

551 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

552 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
;

555 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

556 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

557 
__loˇÀ_t
 
__loc
Ë
__THROW
;

561 #ifdef 
__USE_XOPEN2K8


564 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
Ë
__THROW
;

568 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
)

569 
__THROW
;

575 #ifdef 
__USE_XOPEN2K8


578 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

581 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


582 
__BEGIN_NAMESPACE_STD


585 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

592 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

593 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

599 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

602 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

603 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

604 
__THROW
 ;

610 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

611 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

612 
__gnuc_va_li°
 
__¨g
)

618 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

619 
__gnuc_va_li°
 
__¨g
)

623 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

624 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

625 
__gnuc_va_li°
 
__¨g
)

626 
__THROW
 ;

633 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

634 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

640 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

643 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

644 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

645 
__THROW
 ;

647 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

648 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

649 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

650 #ifde‡
__REDIRECT


654 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

655 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

656 
__isoc99_fwsˇnf
)

658 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

659 
__isoc99_wsˇnf
)

661 
	`__REDIRECT_NTH
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

662 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

663 ...), 
__isoc99_swsˇnf
)

666 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

667 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

669 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

670 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

671 
__THROW
;

672 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

673 
	#wsˇnf
 
__isoc99_wsˇnf


	)

674 
	#swsˇnf
 
__isoc99_swsˇnf


	)

678 
__END_NAMESPACE_STD


681 #ifde‡
__USE_ISOC99


682 
__BEGIN_NAMESPACE_C99


687 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

688 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

689 
__gnuc_va_li°
 
__¨g
)

695 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

696 
__gnuc_va_li°
 
__¨g
)

699 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

700 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

701 
__gnuc_va_li°
 
__¨g
)

702 
__THROW
 ;

704 #i‡!
deföed
 
__USE_GNU
 \

705 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

706 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

707 #ifde‡
__REDIRECT


708 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

709 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

710 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

712 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

713 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

715 
	`__REDIRECT_NTH
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

716 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

717 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

720 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

721 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

722 
__gnuc_va_li°
 
__¨g
);

723 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

724 
__gnuc_va_li°
 
__¨g
);

725 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

726 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

727 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

728 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

729 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

730 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

734 
__END_NAMESPACE_C99


738 
__BEGIN_NAMESPACE_STD


743 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

744 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

750 
wöt_t
 
	`gëwch¨
 ();

757 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

758 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

764 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

772 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

773 
__FILE
 *
__ª°ri˘
 
__°ªam
);

779 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

780 
__FILE
 *
__ª°ri˘
 
__°ªam
);

787 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

788 
__END_NAMESPACE_STD


791 #ifde‡
__USE_GNU


799 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

800 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

808 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

816 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

826 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

835 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

836 
__FILE
 *
__ª°ri˘
 
__°ªam
);

844 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

845 
__FILE
 *
__ª°ri˘
 
__°ªam
);

849 
__BEGIN_NAMESPACE_C99


853 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

854 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

855 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

856 
__END_NAMESPACE_C99


858 #ifde‡
__USE_GNU


859 
	~<xloˇÀ.h
>

863 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

864 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

865 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

866 
__loˇÀ_t
 
__loc
Ë
__THROW
;

875 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


876 
	#__√ed_iswxxx


	)

877 
	~<w˘y≥.h
>

881 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


882 
	~<bôs/wch¨2.h
>

885 #ifde‡
__LDBL_COMPAT


886 
	~<bôs/wch¨-ldbl.h
>

889 
__END_DECLS


897 #unde‡
__√ed_mb°©e_t


898 #unde‡
__√ed_wöt_t


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/bits/byteswap.h

21 #i‡!
deföed
 
_BYTESWAP_H
 && !deföed 
_NETINET_IN_H
 && !deföed 
_ENDIAN_H


25 #i‚de‡
_BITS_BYTESWAP_H


26 
	#_BITS_BYTESWAP_H
 1

	)

28 
	~<bôs/w‹dsize.h
>

31 
	#__bsw≠_c⁄°™t_16
(
x
) \

32 ((((
x
Ë>> 8Ë& 0xffË| (((xË& 0xffË<< 8))

	)

34 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

35 
	#__bsw≠_16
(
x
) \

36 (
__exãnsi⁄__
 \

37 ({ 
__v
, 
__x
 = (
x
); \

38 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

39 
__v
 = 
	`__bsw≠_c⁄°™t_16
 (
__x
); \

41 
	`__asm__
 ("rorw $8, %w0" \

42 : "Ù" (
__v
) \

43 : "0" (
__x
) \

45 
__v
; }))

	)

48 
	#__bsw≠_16
(
x
) \

49 (
__exãnsi⁄__
 \

50 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_16
 (__x); }))

	)

55 
	#__bsw≠_c⁄°™t_32
(
x
) \

56 ((((
x
) & 0xff000000) >> 24) | (((x) & 0x00ff0000) >> 8) | \

57 (((
x
Ë& 0x0000ff00Ë<< 8Ë| (((xË& 0x000000ffË<< 24))

	)

59 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

60 #i‡
__WORDSIZE
 =64 || (
deföed
 
__i486__
 || deföed 
__≥¡ium__
 \

61 || 
deföed
 
	g__≥¡ium¥o__
 || deföed 
	g__≥¡ium4__
 \

62 || 
deföed
 
	g__k8__
 || deföed 
	g__©hl⁄__
 \

63 || 
deföed
 
	g__k6__
 || deföed 
	g__noc⁄a__
 \

64 || 
deföed
 
	g__c‹e2__
 || deföed 
	g__geode__
 \

65 || 
deföed
 
	g__amdÁm10__
)

68 
	#__bsw≠_32
(
x
) \

69 (
__exãnsi⁄__
 \

70 ({ 
__v
, 
__x
 = (
x
); \

71 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

72 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

74 
	`__asm__
 ("bsw≠ %0" : "Ù" (
__v
Ë: "0" (
__x
)); \

75 
__v
; }))

	)

77 
	#__bsw≠_32
(
x
) \

78 (
__exãnsi⁄__
 \

79 ({ 
__v
, 
__x
 = (
x
); \

80 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

81 
__v
 = 
	`__bsw≠_c⁄°™t_32
 (
__x
); \

83 
	`__asm__
 ("rorw $8, %w0;" \

86 : "Ù" (
__v
) \

87 : "0" (
__x
) \

89 
__v
; }))

	)

92 
	#__bsw≠_32
(
x
) \

93 (
__exãnsi⁄__
 \

94 ({ 
__x
 = (
x
); 
	`__bsw≠_c⁄°™t_32
 (__x); }))

	)

98 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

100 
	#__bsw≠_c⁄°™t_64
(
x
) \

101 ((((
x
) & 0xff00000000000000ull) >> 56) \

102 | (((
x
) & 0x00ff000000000000ull) >> 40) \

103 | (((
x
) & 0x0000ff0000000000ull) >> 24) \

104 | (((
x
) & 0x000000ff00000000ull) >> 8) \

105 | (((
x
) & 0x00000000ff000000ull) << 8) \

106 | (((
x
) & 0x0000000000ff0000ull) << 24) \

107 | (((
x
) & 0x000000000000ff00ull) << 40) \

108 | (((
x
Ë& 0x00000000000000ffuŒË<< 56))

	)

110 #i‡
__WORDSIZE
 == 64

111 
	#__bsw≠_64
(
x
) \

112 (
__exãnsi⁄__
 \

113 ({ 
__v
, 
__x
 = (
x
); \

114 i‡(
	`__buûtö_c⁄°™t_p
 (
__x
)) \

115 
__v
 = 
	`__bsw≠_c⁄°™t_64
 (
__x
); \

117 
	`__asm__
 ("bsw≠ %q0" : "Ù" (
__v
Ë: "0" (
__x
)); \

118 
__v
; }))

	)

120 
	#__bsw≠_64
(
x
) \

121 (
__exãnsi⁄__
 \

122 ({ uni⁄ { 
__exãnsi⁄__
 
__Œ
; \

123 
__l
[2]; } 
__w
, 
__r
; \

124 i‡(
	`__buûtö_c⁄°™t_p
 (
x
)) \

125 
__r
.
__Œ
 = 
	`__bsw≠_c⁄°™t_64
 (
x
); \

128 
__w
.
__Œ
 = (
x
); \

129 
__r
.
__l
[0] = 
	`__bsw≠_32
 (
__w
.__l[1]); \

130 
__r
.
__l
[1] = 
	`__bsw≠_32
 (
__w
.__l[0]); \

132 
__r
.
__Œ
; }))

	)

	@/usr/include/bits/endian.h

3 #i‚de‡
_ENDIAN_H


7 
	#__BYTE_ORDER
 
__LITTLE_ENDIAN


	)

	@/usr/include/bits/wchar-ldbl.h

20 #i‚de‡
_WCHAR_H


24 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


25 
__BEGIN_NAMESPACE_C99


26 
__LDBL_REDIR_DECL
 (
fw¥ötf
);

27 
__LDBL_REDIR_DECL
 (
w¥ötf
);

28 
__LDBL_REDIR_DECL
 (
sw¥ötf
);

29 
__LDBL_REDIR_DECL
 (
vfw¥ötf
);

30 
__LDBL_REDIR_DECL
 (
vw¥ötf
);

31 
__LDBL_REDIR_DECL
 (
vsw¥ötf
);

32 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

33 && !
deföed
 
	g__REDIRECT
 \

34 && (
deföed
 
	g__STRICT_ANSI__
 || deföed 
	g__USE_XOPEN2K
)

35 
	$__LDBL_REDIR1_DECL
 (
fwsˇnf
, 
__∆dbl___isoc99_fwsˇnf
)

36 
	$__LDBL_REDIR1_DECL
 (
wsˇnf
, 
__∆dbl___isoc99_wsˇnf
)

37 
	$__LDBL_REDIR1_DECL
 (
swsˇnf
, 
__∆dbl___isoc99_swsˇnf
)

39 
	`__LDBL_REDIR_DECL
 (
fwsˇnf
);

40 
	`__LDBL_REDIR_DECL
 (
wsˇnf
);

41 
	`__LDBL_REDIR_DECL
 (
swsˇnf
);

43 
__END_NAMESPACE_C99


46 #ifde‡
__USE_ISOC99


47 
__BEGIN_NAMESPACE_C99


48 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd
, 
wc°od
);

49 #i‡!
deföed
 
__USE_GNU
 && !deföed 
__REDIRECT
 \

50 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

51 
	$__LDBL_REDIR1_DECL
 (
vfwsˇnf
, 
__∆dbl___isoc99_vfwsˇnf
)

52 
	$__LDBL_REDIR1_DECL
 (
vwsˇnf
, 
__∆dbl___isoc99_vwsˇnf
)

53 
	$__LDBL_REDIR1_DECL
 (
vswsˇnf
, 
__∆dbl___isoc99_vswsˇnf
)

55 
	`__LDBL_REDIR_DECL
 (
vfwsˇnf
);

56 
	`__LDBL_REDIR_DECL
 (
vwsˇnf
);

57 
	`__LDBL_REDIR_DECL
 (
vswsˇnf
);

59 
__END_NAMESPACE_C99


62 #ifde‡
__USE_GNU


63 
	`__LDBL_REDIR1_DECL
 (
wc°ﬁd_l
, 
wc°od_l
);

66 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


67 
	$__LDBL_REDIR_DECL
 (
__sw¥ötf_chk
)

68 
	$__LDBL_REDIR_DECL
 (
__vsw¥ötf_chk
)

69 #i‡
__USE_FORTIFY_LEVEL
 > 1

70 
	$__LDBL_REDIR_DECL
 (
__fw¥ötf_chk
)

71 
	$__LDBL_REDIR_DECL
 (
__w¥ötf_chk
)

72 
	$__LDBL_REDIR_DECL
 (
__vfw¥ötf_chk
)

73 
	$__LDBL_REDIR_DECL
 (
__vw¥ötf_chk
)

	@/usr/include/bits/wchar.h

20 #i‚de‡
_BITS_WCHAR_H


21 
	#_BITS_WCHAR_H
 1

	)

24 #ifde‡
__WCHAR_MAX__


25 
	#__WCHAR_MAX
 
__WCHAR_MAX__


	)

27 
	#__WCHAR_MAX
 (2147483647)

	)

32 #ifde‡
__WCHAR_UNSIGNED__


33 
	#__WCHAR_MIN
 
L
'\0'

	)

37 #ñi‡
L
'\0' - 1 > 0

38 
	#__WCHAR_MIN
 
L
'\0'

	)

40 
	#__WCHAR_MIN
 (-
__WCHAR_MAX
 - 1)

	)

	@/usr/include/bits/wchar2.h

20 #i‚de‡
_WCHAR_H


25 
wch¨_t
 *
	$__wmem˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

26 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

27 
size_t
 
__ns1
Ë
__THROW
;

28 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_Æüs
,

29 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

30 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
),

31 
wmem˝y
);

32 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem˝y_chk_w¨n
,

33 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

34 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

35 
size_t
 
__ns1
), 
__wmem˝y_chk
)

36 
	`__w¨«âr
 ("wmemcpy called withÜength biggerÅhan size of destination "

39 
__exã∫_Æways_ölöe
 
wch¨_t
 *

40 
	`__NTH
 (
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

41 
size_t
 
__n
))

43 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

45 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

46  
	`__wmem˝y_chk
 (
__s1
, 
__s2
, 
__n
,

47 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

49 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

50  
	`__wmem˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

51 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

53  
	`__wmem˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

54 
	}
}

57 
wch¨_t
 *
	$__wmemmove_chk
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

58 
size_t
 
__n
, size_à
__ns1
Ë
__THROW
;

59 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_Æüs
, (wch¨_à*
__s1
,

60 
__c⁄°
 
wch¨_t
 *
__s2
,

61 
size_t
 
__n
), 
wmemmove
);

62 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemmove_chk_w¨n
,

63 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

64 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

65 
size_t
 
__ns1
), 
__wmemmove_chk
)

66 
	`__w¨«âr
 ("wmemmove called withÜength biggerÅhan size of destination "

69 
__exã∫_Æways_ölöe
 
wch¨_t
 *

70 
	`__NTH
 (
	$wmemmove
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

71 
size_t
 
__n
))

73 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

75 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

76  
	`__wmemmove_chk
 (
__s1
, 
__s2
, 
__n
,

77 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

79 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

80  
	`__wmemmove_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

81 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

83  
	`__wmemmove_Æüs
 (
__s1
, 
__s2
, 
__n
);

84 
	}
}

87 #ifde‡
__USE_GNU


88 
wch¨_t
 *
	$__wmemp˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

89 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

90 
size_t
 
__ns1
Ë
__THROW
;

91 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_Æüs
,

92 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

93 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
,

94 
size_t
 
__n
), 
wmemp˝y
);

95 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmemp˝y_chk_w¨n
,

96 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

97 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
,

98 
size_t
 
__ns1
), 
__wmemp˝y_chk
)

99 
	`__w¨«âr
 ("wmempcpy called withÜength biggerÅhan size of destination "

102 
__exã∫_Æways_ölöe
 
wch¨_t
 *

103 
	`__NTH
 (
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
, 
__c⁄°
 wch¨_à*__ª°ri˘ 
__s2
,

104 
size_t
 
__n
))

106 i‡(
	`__bos0
 (
__s1
Ë!(
size_t
) -1)

108 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

109  
	`__wmemp˝y_chk
 (
__s1
, 
__s2
, 
__n
,

110 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

112 i‡(
__n
 > 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
))

113  
	`__wmemp˝y_chk_w¨n
 (
__s1
, 
__s2
, 
__n
,

114 
	`__bos0
 (
__s1
Ë/  (
wch¨_t
));

116  
	`__wmemp˝y_Æüs
 (
__s1
, 
__s2
, 
__n
);

117 
	}
}

121 
wch¨_t
 *
	$__wmem£t_chk
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

122 
size_t
 
__ns
Ë
__THROW
;

123 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_Æüs
, (wch¨_à*
__s
, wch¨_à
__c
,

124 
size_t
 
__n
), 
wmem£t
);

125 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wmem£t_chk_w¨n
,

126 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
,

127 
size_t
 
__ns
), 
__wmem£t_chk
)

128 
	`__w¨«âr
 ("wmemset called withÜength biggerÅhan size of destination "

131 
__exã∫_Æways_ölöe
 
wch¨_t
 *

132 
	`__NTH
 (
	$wmem£t
 (
wch¨_t
 *
__ª°ri˘
 
__s
, wch¨_à
__c
, 
size_t
 
__n
))

134 i‡(
	`__bos0
 (
__s
Ë!(
size_t
) -1)

136 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

137  
	`__wmem£t_chk
 (
__s
, 
__c
, 
__n
, 
	`__bos0
 (__sË/  (
wch¨_t
));

139 i‡(
__n
 > 
	`__bos0
 (
__s
Ë/  (
wch¨_t
))

140  
	`__wmem£t_chk_w¨n
 (
__s
, 
__c
, 
__n
,

141 
	`__bos0
 (
__s
Ë/  (
wch¨_t
));

143  
	`__wmem£t_Æüs
 (
__s
, 
__c
, 
__n
);

144 
	}
}

147 
wch¨_t
 *
	$__wcs˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

149 
size_t
 
__n
Ë
__THROW
;

150 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcs˝y_Æüs
,

151 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

152 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcs˝y
);

154 
__exã∫_Æways_ölöe
 
wch¨_t
 *

155 
	`__NTH
 (
	$wcs˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

157 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

158  
	`__wcs˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

159  
	`__wcs˝y_Æüs
 (
__de°
, 
__§c
);

160 
	}
}

163 
wch¨_t
 *
	$__w˝˝y_chk
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
,

164 
size_t
 
__de°Àn
Ë
__THROW
;

165 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝˝y_Æüs
, (wch¨_à*
__de°
,

166 
__c⁄°
 
wch¨_t
 *
__§c
),

167 
w˝˝y
);

169 
__exã∫_Æways_ölöe
 
wch¨_t
 *

170 
	`__NTH
 (
	$w˝˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

172 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

173  
	`__w˝˝y_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

174  
	`__w˝˝y_Æüs
 (
__de°
, 
__§c
);

175 
	}
}

178 
wch¨_t
 *
	$__wc¢˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

179 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

180 
size_t
 
__de°Àn
Ë
__THROW
;

181 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_Æüs
,

182 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

183 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

184 
size_t
 
__n
), 
wc¢˝y
);

185 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢˝y_chk_w¨n
,

186 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

187 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

188 
size_t
 
__n
, size_à
__de°Àn
), 
__wc¢˝y_chk
)

189 
	`__w¨«âr
 ("wcsncpy called withÜength biggerÅhan size of destination "

192 
__exã∫_Æways_ölöe
 
wch¨_t
 *

193 
	`__NTH
 (
	$wc¢˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

195 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

197 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

198  
	`__wc¢˝y_chk
 (
__de°
, 
__§c
, 
__n
,

199 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

200 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

201  
	`__wc¢˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

202 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

204  
	`__wc¢˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

205 
	}
}

208 
wch¨_t
 *
	$__w˝n˝y_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

209 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
,

210 
size_t
 
__de°Àn
Ë
__THROW
;

211 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_Æüs
,

212 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

213 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

214 
size_t
 
__n
), 
w˝n˝y
);

215 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__w˝n˝y_chk_w¨n
,

216 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

217 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

218 
size_t
 
__n
, size_à
__de°Àn
), 
__w˝n˝y_chk
)

219 
	`__w¨«âr
 ("wcpncpy called withÜength biggerÅhan size of destination "

222 
__exã∫_Æways_ölöe
 
wch¨_t
 *

223 
	`__NTH
 (
	$w˝n˝y
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

225 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

227 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
))

228  
	`__w˝n˝y_chk
 (
__de°
, 
__§c
, 
__n
,

229 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

230 i‡(
__n
 > 
	`__bos
 (
__de°
Ë/  (
wch¨_t
))

231  
	`__w˝n˝y_chk_w¨n
 (
__de°
, 
__§c
, 
__n
,

232 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

234  
	`__w˝n˝y_Æüs
 (
__de°
, 
__§c
, 
__n
);

235 
	}
}

238 
wch¨_t
 *
	$__wcsˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

239 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

240 
size_t
 
__de°Àn
Ë
__THROW
;

241 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wcsˇt_Æüs
,

242 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

243 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
), 
wcsˇt
);

245 
__exã∫_Æways_ölöe
 
wch¨_t
 *

246 
	`__NTH
 (
	$wcsˇt
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
))

248 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

249  
	`__wcsˇt_chk
 (
__de°
, 
__§c
, 
	`__bos
 (__de°Ë/  (
wch¨_t
));

250  
	`__wcsˇt_Æüs
 (
__de°
, 
__§c
);

251 
	}
}

254 
wch¨_t
 *
	$__wc¢ˇt_chk
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

255 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

256 
size_t
 
__n
, size_à
__de°Àn
Ë
__THROW
;

257 
wch¨_t
 *
	`__REDIRECT_NTH
 (
__wc¢ˇt_Æüs
,

258 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

259 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
,

260 
size_t
 
__n
), 
wc¢ˇt
);

262 
__exã∫_Æways_ölöe
 
wch¨_t
 *

263 
	`__NTH
 (
	$wc¢ˇt
 (
wch¨_t
 *
__de°
, 
__c⁄°
 wch¨_à*
__§c
, 
size_t
 
__n
))

265 i‡(
	`__bos
 (
__de°
Ë!(
size_t
) -1)

266  
	`__wc¢ˇt_chk
 (
__de°
, 
__§c
, 
__n
,

267 
	`__bos
 (
__de°
Ë/  (
wch¨_t
));

268  
	`__wc¢ˇt_Æüs
 (
__de°
, 
__§c
, 
__n
);

269 
	}
}

272 
	$__sw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

273 
__Êag
, 
size_t
 
__s_Àn
,

274 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

275 
__THROW
 ;

277 
	`__REDIRECT_NTH_LDBL
 (
__sw¥ötf_Æüs
,

278 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

279 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...),

280 
sw¥ötf
);

282 #ifde‡
__va_¨g_∑ck


283 
__exã∫_Æways_ölöe
 

284 
	`__NTH
 (
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

285 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...))

287 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

288  
	`__sw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

289 
	`__bos
 (
__s
Ë/  (
wch¨_t
),

290 
__fmt
, 
	`__va_¨g_∑ck
 ());

291  
	`__sw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
	`__va_¨g_∑ck
 ());

292 
	}
}

293 #ñi‡!
deföed
 
__˝lu•lus


295 
	#sw¥ötf
(
s
, 
n
, ...) \

296 (
	`__bos
 (
s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1 \

297 ? 
	`__sw¥ötf_chk
 (
s
, 
n
, 
__USE_FORTIFY_LEVEL
 - 1, \

298 
	`__bos
 (
s
Ë/  (
wch¨_t
), 
__VA_ARGS__
) \

299 : 
	`sw¥ötf
 (
s
, 
n
, 
__VA_ARGS__
))

	)

302 
	$__vsw¥ötf_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

303 
__Êag
, 
size_t
 
__s_Àn
,

304 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

305 
__gnuc_va_li°
 
__¨g
)

306 
__THROW
 ;

308 
	`__REDIRECT_NTH_LDBL
 (
__vsw¥ötf_Æüs
,

309 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

310 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
,

311 
__gnuc_va_li°
 
__≠
), 
vsw¥ötf
);

313 
__exã∫_Æways_ölöe
 

314 
	`__NTH
 (
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

315 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
))

317 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 || 
__USE_FORTIFY_LEVEL
 > 1)

318  
	`__vsw¥ötf_chk
 (
__s
, 
__n
, 
__USE_FORTIFY_LEVEL
 - 1,

319 
	`__bos
 (
__s
Ë/  (
wch¨_t
), 
__fmt
, 
__≠
);

320  
	`__vsw¥ötf_Æüs
 (
__s
, 
__n
, 
__fmt
, 
__≠
);

321 
	}
}

324 #i‡
__USE_FORTIFY_LEVEL
 > 1

326 
__fw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

327 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

328 
__w¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

330 
__vfw¥ötf_chk
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__Êag
,

331 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

332 
__gnuc_va_li°
 
__≠
);

333 
__vw¥ötf_chk
 (
__Êag
, 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

334 
__gnuc_va_li°
 
__≠
);

336 #ifde‡
__va_¨g_∑ck


337 
__exã∫_Æways_ölöe
 

338 
	$w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, ...)

340  
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
	`__va_¨g_∑ck
 ());

341 
	}
}

343 
__exã∫_Æways_ölöe
 

344 
	$fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
, 
__c⁄°
 
wch¨_t
 *__ª°ri˘ 
__fmt
, ...)

346  
	`__fw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
,

347 
	`__va_¨g_∑ck
 ());

348 
	}
}

349 #ñi‡!
deföed
 
__˝lu•lus


350 
	#w¥ötf
(...) \

351 
	`__w¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

352 
	#fw¥ötf
(
°ªam
, ...) \

353 
	`__fw¥ötf_chk
 (
°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__VA_ARGS__
)

	)

356 
__exã∫_Æways_ölöe
 

357 
	$vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

359  
	`__vw¥ötf_chk
 (
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

360 
	}
}

362 
__exã∫_Æways_ölöe
 

363 
	$vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

364 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__fmt
, 
__gnuc_va_li°
 
__≠
)

366  
	`__vfw¥ötf_chk
 (
__°ªam
, 
__USE_FORTIFY_LEVEL
 - 1, 
__fmt
, 
__≠
);

367 
	}
}

371 
wch¨_t
 *
	$__fgëws_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

372 
__FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

373 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_Æüs
,

374 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

375 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws
Ë
__wur
;

376 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_chk_w¨n
,

377 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

378 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
__fgëws_chk
)

379 
__wur
 
	`__w¨«âr
 ("fgetws called with bigger sizeÅhanÜength "

382 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

383 
	$fgëws
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

385 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

387 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

388  
	`__fgëws_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

389 
__n
, 
__°ªam
);

391 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

392  
	`__fgëws_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

393 
__n
, 
__°ªam
);

395  
	`__fgëws_Æüs
 (
__s
, 
__n
, 
__°ªam
);

396 
	}
}

398 #ifde‡
__USE_GNU


399 
wch¨_t
 *
	$__fgëws_u∆ocked_chk
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
,

400 
__n
, 
__FILE
 *
__ª°ri˘
 
__°ªam
)

401 
__wur
;

402 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_Æüs
,

403 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
,

404 
__FILE
 *
__ª°ri˘
 
__°ªam
), 
fgëws_u∆ocked
)

405 
__wur
;

406 
wch¨_t
 *
	`__REDIRECT
 (
__fgëws_u∆ocked_chk_w¨n
,

407 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__size
, 
__n
,

408 
__FILE
 *
__ª°ri˘
 
__°ªam
),

409 
__fgëws_u∆ocked_chk
)

410 
__wur
 
	`__w¨«âr
 ("fgetws_unlocked called with bigger sizeÅhanÜength "

413 
__exã∫_Æways_ölöe
 
__wur
 
wch¨_t
 *

414 
	$fgëws_u∆ocked
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
__n
, 
__FILE
 *__ª°ri˘ 
__°ªam
)

416 i‡(
	`__bos
 (
__s
Ë!(
size_t
) -1)

418 i‡(!
	`__buûtö_c⁄°™t_p
 (
__n
) || __n <= 0)

419  
	`__fgëws_u∆ocked_chk
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

420 
__n
, 
__°ªam
);

422 i‡((
size_t
Ë
__n
 > 
	`__bos
 (
__s
Ë/  (
wch¨_t
))

423  
	`__fgëws_u∆ocked_chk_w¨n
 (
__s
, 
	`__bos
 (__sË/  (
wch¨_t
),

424 
__n
, 
__°ªam
);

426  
	`__fgëws_u∆ocked_Æüs
 (
__s
, 
__n
, 
__°ªam
);

427 
	}
}

431 
size_t
 
	$__w¸tomb_chk
 (*
__s
, 
wch¨_t
 
__wch¨
, 
mb°©e_t
 *
__p
,

432 
size_t
 
__buÊí
Ë
__THROW
 
__wur
;

433 
size_t
 
	`__REDIRECT_NTH
 (
__w¸tomb_Æüs
,

434 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wch¨
,

435 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
w¸tomb
Ë
__wur
;

437 
__exã∫_Æways_ölöe
 
__wur
 
size_t


438 
	`__NTH
 (
	$w¸tomb
 (*
__s
, 
wch¨_t
 
__wch¨
, 
mb°©e_t
 *
__ps
))

443 
	#__WCHAR_MB_LEN_MAX
 16

	)

444 #i‡
deföed
 
MB_LEN_MAX
 && MB_LEN_MAX !
__WCHAR_MB_LEN_MAX


447 i‡(
	`__bos
 (
__s
Ë!(
size_t
Ë-1 && 
__WCHAR_MB_LEN_MAX
 > __bos (__s))

448  
	`__w¸tomb_chk
 (
__s
, 
__wch¨
, 
__ps
, 
	`__bos
 (__s));

449  
	`__w¸tomb_Æüs
 (
__s
, 
__wch¨
, 
__ps
);

450 
	}
}

453 
size_t
 
	$__mb§towcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

454 
__c⁄°
 **
__ª°ri˘
 
__§c
,

455 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

456 
size_t
 
__d°Àn
Ë
__THROW
;

457 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_Æüs
,

458 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

459 
__c⁄°
 **
__ª°ri˘
 
__§c
,

460 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

461 
mb§towcs
);

462 
size_t
 
	`__REDIRECT_NTH
 (
__mb§towcs_chk_w¨n
,

463 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

464 
__c⁄°
 **
__ª°ri˘
 
__§c
,

465 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

466 
size_t
 
__d°Àn
), 
__mb§towcs_chk
)

467 
	`__w¨«âr
 ("mbsrtowcs called with dst buffer smallerÅhanÜen "

470 
__exã∫_Æways_ölöe
 
size_t


471 
	`__NTH
 (
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

472 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

474 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

476 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

477  
	`__mb§towcs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

478 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

480 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

481  
	`__mb§towcs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
,

482 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

484  
	`__mb§towcs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

485 
	}
}

488 
size_t
 
	$__wc§tombs_chk
 (*
__ª°ri˘
 
__d°
,

489 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

490 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

491 
size_t
 
__d°Àn
Ë
__THROW
;

492 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_Æüs
,

493 (*
__ª°ri˘
 
__d°
,

494 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

495 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

496 
wc§tombs
);

497 
size_t
 
	`__REDIRECT_NTH
 (
__wc§tombs_chk_w¨n
,

498 (*
__ª°ri˘
 
__d°
,

499 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

500 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

501 
size_t
 
__d°Àn
), 
__wc§tombs_chk
)

502 
	`__w¨«âr
 ("wcsrtombs called with dst buffer smallerÅhanÜen");

504 
__exã∫_Æways_ölöe
 
size_t


505 
	`__NTH
 (
	$wc§tombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

506 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

508 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

510 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

511  
	`__wc§tombs_chk
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

513 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

514  
	`__wc§tombs_chk_w¨n
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
, 
	`__bos
 (__dst));

516  
	`__wc§tombs_Æüs
 (
__d°
, 
__§c
, 
__Àn
, 
__ps
);

517 
	}
}

520 #ifde‡
__USE_GNU


521 
size_t
 
	$__mb¢πowcs_chk
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

522 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

523 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

524 
size_t
 
__d°Àn
Ë
__THROW
;

525 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_Æüs
,

526 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

527 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

528 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
),

529 
mb¢πowcs
);

530 
size_t
 
	`__REDIRECT_NTH
 (
__mb¢πowcs_chk_w¨n
,

531 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

532 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

533 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

534 
size_t
 
__d°Àn
), 
__mb¢πowcs_chk
)

535 
	`__w¨«âr
 ("mbsnrtowcs called with dst buffer smallerÅhanÜen "

538 
__exã∫_Æways_ölöe
 
size_t


539 
	`__NTH
 (
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
, 
__c⁄°
 **__ª°ri˘ 
__§c
,

540 
size_t
 
__nmc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

542 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

544 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

545  
	`__mb¢πowcs_chk
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

546 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

548 i‡(
__Àn
 > 
	`__bos
 (
__d°
Ë/  (
wch¨_t
))

549  
	`__mb¢πowcs_chk_w¨n
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
,

550 
	`__bos
 (
__d°
Ë/  (
wch¨_t
));

552  
	`__mb¢πowcs_Æüs
 (
__d°
, 
__§c
, 
__nmc
, 
__Àn
, 
__ps
);

553 
	}
}

556 
size_t
 
	$__wc¢πombs_chk
 (*
__ª°ri˘
 
__d°
,

557 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

558 
size_t
 
__nwc
, size_à
__Àn
,

559 
mb°©e_t
 *
__ª°ri˘
 
__ps
, 
size_t
 
__d°Àn
)

560 
__THROW
;

561 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_Æüs
,

562 (*
__ª°ri˘
 
__d°
,

563 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

564 
size_t
 
__nwc
, size_à
__Àn
,

565 
mb°©e_t
 *
__ª°ri˘
 
__ps
), 
wc¢πombs
);

566 
size_t
 
	`__REDIRECT_NTH
 (
__wc¢πombs_chk_w¨n
,

567 (*
__ª°ri˘
 
__d°
,

568 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

569 
size_t
 
__nwc
, size_à
__Àn
,

570 
mb°©e_t
 *
__ª°ri˘
 
__ps
,

571 
size_t
 
__d°Àn
), 
__wc¢πombs_chk
)

572 
	`__w¨«âr
 ("wcsnrtombs called with dst buffer smallerÅhanÜen");

574 
__exã∫_Æways_ölöe
 
size_t


575 
	`__NTH
 (
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
, 
__c⁄°
 
wch¨_t
 **__ª°ri˘ 
__§c
,

576 
size_t
 
__nwc
, size_à
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

578 i‡(
	`__bos
 (
__d°
Ë!(
size_t
) -1)

580 i‡(!
	`__buûtö_c⁄°™t_p
 (
__Àn
))

581  
	`__wc¢πombs_chk
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

582 
	`__bos
 (
__d°
));

584 i‡(
__Àn
 > 
	`__bos
 (
__d°
))

585  
	`__wc¢πombs_chk_w¨n
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
,

586 
	`__bos
 (
__d°
));

588  
	`__wc¢πombs_Æüs
 (
__d°
, 
__§c
, 
__nwc
, 
__Àn
, 
__ps
);

589 
	}
}

	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/gnu/option-groups.h

10 #i‚de‡
__GNU_OPTION_GROUPS_H


11 
	#__GNU_OPTION_GROUPS_H


	)

13 
	#__OPTION_EGLIBC_ADVANCED_INET6
 1

	)

14 
	#__OPTION_EGLIBC_BACKTRACE
 1

	)

15 
	#__OPTION_EGLIBC_BIG_MACROS
 1

	)

16 
	#__OPTION_EGLIBC_BSD
 1

	)

17 
	#__OPTION_EGLIBC_CATGETS
 1

	)

18 
	#__OPTION_EGLIBC_CHARSETS
 1

	)

19 
	#__OPTION_EGLIBC_CRYPT
 1

	)

20 
	#__OPTION_EGLIBC_CRYPT_UFC
 1

	)

21 
	#__OPTION_EGLIBC_CXX_TESTS
 1

	)

22 
	#__OPTION_EGLIBC_DB_ALIASES
 1

	)

23 
	#__OPTION_EGLIBC_ENVZ
 1

	)

24 
	#__OPTION_EGLIBC_FCVT
 1

	)

25 
	#__OPTION_EGLIBC_FMTMSG
 1

	)

26 
	#__OPTION_EGLIBC_FSTAB
 1

	)

27 
	#__OPTION_EGLIBC_FTRAVERSE
 1

	)

28 
	#__OPTION_EGLIBC_GETLOGIN
 1

	)

29 
	#__OPTION_EGLIBC_IDN
 1

	)

30 
	#__OPTION_EGLIBC_INET
 1

	)

31 
	#__OPTION_EGLIBC_INET_ANL
 1

	)

32 
	#__OPTION_EGLIBC_LIBM
 1

	)

33 
	#__OPTION_EGLIBC_LIBM_BIG
 1

	)

34 
	#__OPTION_EGLIBC_LOCALES
 1

	)

35 
	#__OPTION_EGLIBC_LOCALE_CODE
 1

	)

36 
	#__OPTION_EGLIBC_MEMUSAGE
 1

	)

37 
	#__OPTION_EGLIBC_NIS
 1

	)

38 
	#__OPTION_EGLIBC_NSSWITCH
 1

	)

39 
	#__OPTION_EGLIBC_RCMD
 1

	)

40 
	#__OPTION_EGLIBC_RTLD_DEBUG
 1

	)

41 
	#__OPTION_EGLIBC_SPAWN
 1

	)

42 
	#__OPTION_EGLIBC_STREAMS
 1

	)

43 
	#__OPTION_EGLIBC_SUNRPC
 1

	)

44 
	#__OPTION_EGLIBC_UTMP
 1

	)

45 
	#__OPTION_EGLIBC_UTMPX
 1

	)

46 
	#__OPTION_EGLIBC_WORDEXP
 1

	)

47 
	#__OPTION_POSIX_C_LANG_WIDE_CHAR
 1

	)

48 
	#__OPTION_POSIX_REGEXP
 1

	)

49 
	#__OPTION_POSIX_REGEXP_GLIBC
 1

	)

50 
	#__OPTION_POSIX_WIDE_CHAR_DEVICE_IO
 1

	)

	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	~<bôs/±hªadty≥s.h
>

29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/w‹dsize.h
>

36 
	mPTHREAD_CREATE_JOINABLE
,

37 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

38 
	mPTHREAD_CREATE_DETACHED


39 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

46 
	mPTHREAD_MUTEX_TIMED_NP
,

47 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

48 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

49 
	mPTHREAD_MUTEX_ADAPTIVE_NP


50 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


52 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

53 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

54 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

55 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


57 #ifde‡
__USE_GNU


59 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


64 #ifde‡
__USE_XOPEN2K


68 
	mPTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

70 
	mPTHREAD_MUTEX_ROBUST
,

71 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


76 #ifde‡
__USE_UNIX98


80 
	mPTHREAD_PRIO_NONE
,

81 
	mPTHREAD_PRIO_INHERIT
,

82 
	mPTHREAD_PRIO_PROTECT


88 #i‡
__WORDSIZE
 == 64

89 
	#PTHREAD_MUTEX_INITIALIZER
 \

90 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

91 #ifde‡
__USE_GNU


92 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 0 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 
	#PTHREAD_RWLOCK_INITIALIZER
 \

125 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

126 #ifde‡
__USE_GNU


127 #i‡
__WORDSIZE
 == 64

128 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

130 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

132 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


133 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

134 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

135 0, 0, 0, 0 } }

	)

137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

139 0 } }

	)

149 
	mPTHREAD_INHERIT_SCHED
,

150 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

151 
	mPTHREAD_EXPLICIT_SCHED


152 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

159 
	mPTHREAD_SCOPE_SYSTEM
,

160 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

161 
	mPTHREAD_SCOPE_PROCESS


162 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

169 
	mPTHREAD_PROCESS_PRIVATE
,

170 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

171 
	mPTHREAD_PROCESS_SHARED


172 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

178 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

182 
	s_±hªad_˛ónup_buf„r


184 (*
	m__routöe
) (*);

185 *
	m__¨g
;

186 
	m__ˇn˚…y≥
;

187 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

193 
	mPTHREAD_CANCEL_ENABLE
,

194 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

195 
	mPTHREAD_CANCEL_DISABLE


196 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

200 
	mPTHREAD_CANCEL_DEFERRED
,

201 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

202 
	mPTHREAD_CANCEL_ASYNCHRONOUS


203 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

205 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

209 
	#PTHREAD_ONCE_INIT
 0

	)

212 #ifde‡
__USE_XOPEN2K


216 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

220 
__BEGIN_DECLS


225 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

226 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

227 *(*
__°¨t_routöe
) (*),

228 *
__ª°ri˘
 
__¨g
Ë
__THROW
 
__n⁄nuŒ
 ((1, 3));

234 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

242 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

244 #ifde‡
__USE_GNU


247 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

255 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

256 
__c⁄°
 
time•ec
 *
__ab°ime
);

263 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

267 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

270 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

278 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1));

285 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

286 *
__dëach°©e
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

290 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

291 
__dëach°©e
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

297 
size_t
 *
__gu¨dsize
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

302 
size_t
 
__gu¨dsize
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


308 
__©å
,

309 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

310 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

313 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

314 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


315 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


319 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__öhîô
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

333 
__öhîô
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

339 *
__ª°ri˘
 
__sc›e
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

343 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


348 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

355 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

356 *
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

360 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


361 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

367 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

368 
size_t
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1));

371 #ifde‡
__USE_XOPEN2K


373 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

374 **
__ª°ri˘
 
__°ackaddr
,

375 
size_t
 *
__ª°ri˘
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

381 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

382 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

385 #ifde‡
__USE_GNU


388 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

389 
size_t
 
__˝u£tsize
,

390 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

395 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

405 
__THROW
 
	`__n⁄nuŒ
 ((2));

413 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

414 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

415 
__THROW
 
	`__n⁄nuŒ
 ((3));

418 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

419 *
__ª°ri˘
 
__pﬁicy
,

420 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

424 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

425 
__THROW
;

428 #ifde‡
__USE_GNU


430 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

431 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

435 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, 
__c⁄°
 *
__«me
)

436 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 #ifde‡
__USE_UNIX98


442 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

445 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

448 #ifde‡
__USE_GNU


453 
	$±hªad_yõld
 (Ë
__THROW
;

458 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

459 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

460 
__THROW
 
	`__n⁄nuŒ
 ((3));

463 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

464 
˝u_£t_t
 *
__˝u£t
)

465 
__THROW
 
	`__n⁄nuŒ
 ((3));

478 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

479 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

490 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

494 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

497 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

502 
	`±hªad_ã°ˇn˚l
 ();

511 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

512 
__mask_was_ßved
;

513 } 
__ˇn˚l_jmp_buf
[1];

514 *
__∑d
[4];

515 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

518 #i‚de‡
__˛ónup_f˘_©åibuã


519 
	#__˛ónup_f˘_©åibuã


	)

524 
	s__±hªad_˛ónup_‰ame


526 (*
__ˇn˚l_routöe
) (*);

527 *
__ˇn˚l_¨g
;

528 
__do_ô
;

529 
__ˇn˚l_ty≥
;

532 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


533 #ifde‡
__˝lu•lus


535 ˛as†
	c__±hªad_˛ónup_˛ass


537 (*
__ˇn˚l_routöe
) (*);

538 *
__ˇn˚l_¨g
;

539 
__do_ô
;

540 
__ˇn˚l_ty≥
;

542 
public
:

543 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

544 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

545 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

546 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

547 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

548 &
__ˇn˚l_ty≥
); 
	}
}

549 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

559 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

561 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

565 
	#±hªad_˛ónup_p›
(
execuã
) \

566 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

567 } 0)

	)

569 #ifde‡
__USE_GNU


573 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

575 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

576 
__˛‰ame
.
	`__de„r
 ()

	)

581 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

582 
__˛‰ame
.
	`__ª°‹e
 (); \

583 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

584 } 0)

	)

591 
__exã∫_ölöe
 

592 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

594 i‡(
__‰ame
->
__do_ô
)

595 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

596 
	}
}

605 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

607 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

608 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

609 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

610 .
__do_ô
 = 1 };

	)

614 
	#±hªad_˛ónup_p›
(
execuã
) \

615 
__˛‰ame
.
__do_ô
 = (
execuã
); \

616 } 0)

	)

618 #ifde‡
__USE_GNU


622 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

624 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

625 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

626 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

627 .
__do_ô
 = 1 }; \

628 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

629 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

634 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

635 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

636 
__˛‰ame
.
__do_ô
 = (
execuã
); \

637 } 0)

	)

648 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

650 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

651 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

652 *
__ˇn˚l_¨g
 = (
¨g
); \

653 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

654 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

655 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

657 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

658 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

662 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 dÿ{

	)

664 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

665 
__˛ónup_f˘_©åibuã
;

669 
	#±hªad_˛ónup_p›
(
execuã
) \

672 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

673 i‡(
execuã
) \

674 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

675 } 0)

	)

676 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

677 
__˛ónup_f˘_©åibuã
;

679 #ifde‡
__USE_GNU


683 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

685 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

686 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

687 *
__ˇn˚l_¨g
 = (
¨g
); \

688 
nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

689 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

690 i‡(
	`__buûtö_ex≥˘
 (
nŸ_fú°_ˇŒ
, 0)) \

692 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

693 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

697 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

698 dÿ{

	)

699 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

700 
__˛ónup_f˘_©åibuã
;

705 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

708 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

709 i‡(
execuã
) \

710 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

711 
	}
} 0)

	)

712 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

713 
__˛ónup_f˘_©åibuã
;

717 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

718 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

719 #i‚de‡
SHARED


720 
	`__©åibuã__
 ((
__wók__
))

726 
__jmp_buf_èg
;

727 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

733 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

734 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

735 
__THROW
 
	`__n⁄nuŒ
 ((1));

738 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

739 
__THROW
 
	`__n⁄nuŒ
 ((1));

742 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

743 
__THROW
 
	`__n⁄nuŒ
 ((1));

746 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

747 
__THROW
 
	`__n⁄nuŒ
 ((1));

749 #ifde‡
__USE_XOPEN2K


751 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

752 
__c⁄°
 
time•ec
 *
__ª°ri˘


753 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

757 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

758 
__THROW
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

763 
__ª°ri˘
 
__muãx
,

764 *
__ª°ri˘
 
__¥io˚ûög
)

765 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

769 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

770 
__¥io˚ûög
,

771 *
__ª°ri˘
 
__ﬁd_˚ûög
)

772 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

775 #ifde‡
__USE_XOPEN2K8


777 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

778 
__THROW
 
	`__n⁄nuŒ
 ((1));

779 #ifde‡
__USE_GNU


780 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1));

794 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

795 
__THROW
 
	`__n⁄nuŒ
 ((1));

798 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

799 
__ª°ri˘
 
__©å
,

800 *
__ª°ri˘
 
__psh¨ed
)

801 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

804 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

805 
__psh¨ed
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1));

808 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


810 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


811 
__©å
, *
__ª°ri˘
 
__köd
)

812 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

817 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

822 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

823 
__ª°ri˘
 
__©å
,

824 *
__ª°ri˘
 
__¥Ÿocﬁ
)

825 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

829 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

830 
__¥Ÿocﬁ
)

831 
__THROW
 
	`__n⁄nuŒ
 ((1));

834 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

835 
__ª°ri˘
 
__©å
,

836 *
__ª°ri˘
 
__¥io˚ûög
)

837 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

840 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

841 
__¥io˚ûög
)

842 
__THROW
 
	`__n⁄nuŒ
 ((1));

844 #ifde‡
__USE_XOPEN2K


846 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

847 *
__robu°√ss
)

848 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

849 #ifde‡
__USE_GNU


850 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

851 *
__robu°√ss
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__robu°√ss
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #ifde‡
__USE_GNU


860 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

861 
__robu°√ss
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1));

867 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


872 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

873 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


874 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

881 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

882 
__THROW
 
	`__n⁄nuŒ
 ((1));

885 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

886 
__THROW
 
	`__n⁄nuŒ
 ((1));

888 #ifde‡
__USE_XOPEN2K


890 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

891 
__c⁄°
 
time•ec
 *
__ª°ri˘


892 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

896 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

897 
__THROW
 
	`__n⁄nuŒ
 ((1));

900 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

901 
__THROW
 
	`__n⁄nuŒ
 ((1));

903 #ifde‡
__USE_XOPEN2K


905 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

906 
__c⁄°
 
time•ec
 *
__ª°ri˘


907 
__ab°ime
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

911 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

912 
__THROW
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

922 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

927 
__ª°ri˘
 
__©å
,

928 *
__ª°ri˘
 
__psh¨ed
)

929 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

932 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

933 
__psh¨ed
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1));

937 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

938 
__ª°ri˘
 
__©å
,

939 *
__ª°ri˘
 
__¥ef
)

940 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

943 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

944 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

952 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

953 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


954 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

961 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

962 
__THROW
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

966 
__THROW
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

974 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

975 
	`__n⁄nuŒ
 ((1, 2));

984 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

985 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

986 
__c⁄°
 
time•ec
 *
__ª°ri˘


987 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

992 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

993 
__THROW
 
	`__n⁄nuŒ
 ((1));

996 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1001 
__ª°ri˘
 
__©å
,

1002 *
__ª°ri˘
 
__psh¨ed
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1006 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1007 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1009 #ifde‡
__USE_XOPEN2K


1011 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1012 
__ª°ri˘
 
__©å
,

1013 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1017 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1018 
__˛ockid_t
 
__˛ock_id
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 #ifde‡
__USE_XOPEN2K


1028 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROW
 
	`__n⁄nuŒ
 ((1));

1040 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1041 
__THROW
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1045 
__THROW
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1053 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1054 
__©å
, 
__cou¡
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1058 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1059 
__THROW
 
	`__n⁄nuŒ
 ((1));

1062 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1063 
__THROW
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1068 
__THROW
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1072 
__THROW
 
	`__n⁄nuŒ
 ((1));

1075 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1076 
__ª°ri˘
 
__©å
,

1077 *
__ª°ri˘
 
__psh¨ed
)

1078 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1081 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1082 
__psh¨ed
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1095 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1096 (*
__de°r_fun˘i⁄
) (*))

1097 
__THROW
 
	`__n⁄nuŒ
 ((1));

1100 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1103 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1106 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1107 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1110 #ifde‡
__USE_XOPEN2K


1112 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1113 
__˛ockid_t
 *
__˛ock_id
)

1114 
__THROW
 
	`__n⁄nuŒ
 ((2));

1129 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1130 (*
__∑ª¡
) (),

1131 (*
__chûd
Ë()Ë
__THROW
;

1134 #ifde‡
__USE_EXTERN_INLINES


1136 
__exã∫_ölöe
 

1137 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1139  
__thªad1
 =
__thªad2
;

1140 
	}
}

1143 
	g__END_DECLS


	@/usr/include/tls.h

20 #i‚de‡
_TLS_H


21 
	#_TLS_H


	)

23 
	~<t˛.h
>

25 #ifde‡
TCL_STORAGE_CLASS


26 #unde‡
TCL_STORAGE_CLASS


28 #ifde‡
BUILD_és


29 
	#TCL_STORAGE_CLASS
 
DLLEXPORT


	)

31 
	#TCL_STORAGE_CLASS
 
DLLIMPORT


	)

38 
EXTERN
 
Tls_Inô
 
_ANSI_ARGS_
 ((
T˛_I¡îp
 *));

39 
EXTERN
 
Tls_Sa„Inô
 
_ANSI_ARGS_
 ((
T˛_I¡îp
 *));

	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@/usr/include/bits/errno.h

20 #ifde‡
_ERRNO_H


22 #unde‡
EDOM


23 #unde‡
EILSEQ


24 #unde‡
ERANGE


25 
	~<löux/î∫o.h
>

28 
	#ENOTSUP
 
EOPNOTSUPP


	)

31 #i‚de‡
ECANCELED


32 
	#ECANCELED
 125

	)

36 #i‚de‡
EOWNERDEAD


37 
	#EOWNERDEAD
 130

	)

38 
	#ENOTRECOVERABLE
 131

	)

41 #i‚de‡
ERFKILL


42 
	#ERFKILL
 132

	)

45 #i‚de‡
__ASSEMBLER__


47 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

49 #i‡!
deföed
 
_LIBC
 || deföed 
_LIBC_REENTRANT


51 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

56 #i‡!
deföed
 
_ERRNO_H
 && deföed 
__√ed_Em©h


60 
	#EDOM
 33

	)

61 
	#EILSEQ
 84

	)

62 
	#ERANGE
 34

	)

	@/usr/include/bits/pthreadtypes.h

20 #i‚de‡
_BITS_PTHREADTYPES_H


21 
	#_BITS_PTHREADTYPES_H
 1

	)

23 
	~<bôs/w‹dsize.h
>

25 #i‡
__WORDSIZE
 == 64

26 
	#__SIZEOF_PTHREAD_ATTR_T
 56

	)

27 
	#__SIZEOF_PTHREAD_MUTEX_T
 40

	)

28 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

29 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

30 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

31 
	#__SIZEOF_PTHREAD_RWLOCK_T
 56

	)

32 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

33 
	#__SIZEOF_PTHREAD_BARRIER_T
 32

	)

34 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

36 
	#__SIZEOF_PTHREAD_ATTR_T
 36

	)

37 
	#__SIZEOF_PTHREAD_MUTEX_T
 24

	)

38 
	#__SIZEOF_PTHREAD_MUTEXATTR_T
 4

	)

39 
	#__SIZEOF_PTHREAD_COND_T
 48

	)

40 
	#__SIZEOF_PTHREAD_CONDATTR_T
 4

	)

41 
	#__SIZEOF_PTHREAD_RWLOCK_T
 32

	)

42 
	#__SIZEOF_PTHREAD_RWLOCKATTR_T
 8

	)

43 
	#__SIZEOF_PTHREAD_BARRIER_T
 20

	)

44 
	#__SIZEOF_PTHREAD_BARRIERATTR_T
 4

	)

50 
	t±hªad_t
;

55 
	m__size
[
__SIZEOF_PTHREAD_ATTR_T
];

56 
	m__Æign
;

57 } 
	t±hªad_©å_t
;

60 #i‡
__WORDSIZE
 == 64

61 
	s__±hªad_öã∫Æ_li°


63 
__±hªad_öã∫Æ_li°
 *
	m__¥ev
;

64 
__±hªad_öã∫Æ_li°
 *
	m__√xt
;

65 } 
	t__±hªad_li°_t
;

67 
	s__±hªad_öã∫Æ_¶i°


69 
__±hªad_öã∫Æ_¶i°
 *
	m__√xt
;

70 } 
	t__±hªad_¶i°_t
;

78 
	s__±hªad_muãx_s


80 
	m__lock
;

81 
	m__cou¡
;

82 
	m__ow√r
;

83 #i‡
__WORDSIZE
 == 64

84 
	m__nu£rs
;

88 
	m__köd
;

89 #i‡
__WORDSIZE
 == 64

90 
	m__•ös
;

91 
__±hªad_li°_t
 
	m__li°
;

92 
	#__PTHREAD_MUTEX_HAVE_PREV
 1

	)

94 
	m__nu£rs
;

95 
__exãnsi⁄__
 union

97 
	m__•ös
;

98 
__±hªad_¶i°_t
 
	m__li°
;

101 } 
	m__d©a
;

102 
	m__size
[
__SIZEOF_PTHREAD_MUTEX_T
];

103 
	m__Æign
;

104 } 
	t±hªad_muãx_t
;

108 
	m__size
[
__SIZEOF_PTHREAD_MUTEXATTR_T
];

109 
	m__Æign
;

110 } 
	t±hªad_muãx©å_t
;

119 
	m__lock
;

120 
	m__fuãx
;

121 
__exãnsi⁄__
 
	m__tŸÆ_£q
;

122 
__exãnsi⁄__
 
	m__wakeup_£q
;

123 
__exãnsi⁄__
 
	m__wokí_£q
;

124 *
	m__muãx
;

125 
	m__nwaôîs
;

126 
	m__brﬂdˇ°_£q
;

127 } 
	m__d©a
;

128 
	m__size
[
__SIZEOF_PTHREAD_COND_T
];

129 
__exãnsi⁄__
 
	m__Æign
;

130 } 
	t±hªad_c⁄d_t
;

134 
	m__size
[
__SIZEOF_PTHREAD_CONDATTR_T
];

135 
	m__Æign
;

136 } 
	t±hªad_c⁄d©å_t
;

140 
	t±hªad_key_t
;

144 
	t±hªad_⁄˚_t
;

147 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


152 #i‡
__WORDSIZE
 == 64

155 
	m__lock
;

156 
	m__ƒ_ªadîs
;

157 
	m__ªadîs_wakeup
;

158 
	m__wrôî_wakeup
;

159 
	m__ƒ_ªadîs_queued
;

160 
	m__ƒ_wrôîs_queued
;

161 
	m__wrôî
;

162 
	m__sh¨ed
;

163 
	m__∑d1
;

164 
	m__∑d2
;

167 
	m__Êags
;

168 } 
	m__d©a
;

172 
	m__lock
;

173 
	m__ƒ_ªadîs
;

174 
	m__ªadîs_wakeup
;

175 
	m__wrôî_wakeup
;

176 
	m__ƒ_ªadîs_queued
;

177 
	m__ƒ_wrôîs_queued
;

180 
	m__Êags
;

181 
	m__sh¨ed
;

182 
	m__∑d1
;

183 
	m__∑d2
;

184 
	m__wrôî
;

185 } 
	m__d©a
;

187 
	m__size
[
__SIZEOF_PTHREAD_RWLOCK_T
];

188 
	m__Æign
;

189 } 
	t±hªad_rwlock_t
;

193 
	m__size
[
__SIZEOF_PTHREAD_RWLOCKATTR_T
];

194 
	m__Æign
;

195 } 
	t±hªad_rwlock©å_t
;

199 #ifde‡
__USE_XOPEN2K


201 vﬁ©ûê
	t±hªad_•ölock_t
;

208 
	m__size
[
__SIZEOF_PTHREAD_BARRIER_T
];

209 
	m__Æign
;

210 } 
	t±hªad_b¨rõr_t
;

214 
	m__size
[
__SIZEOF_PTHREAD_BARRIERATTR_T
];

215 
	m__Æign
;

216 } 
	t±hªad_b¨rõøâr_t
;

220 #i‡
__WORDSIZE
 == 32

222 
	#__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
	`__ªg∑rm__
 (1)))

	)

	@/usr/include/bits/setjmp.h

20 #i‚de‡
_BITS_SETJMP_H


21 
	#_BITS_SETJMP_H
 1

	)

23 #i‡!
deföed
 
_SETJMP_H
 && !deföed 
_PTHREAD_H


27 
	~<bôs/w‹dsize.h
>

29 #i‚de‡
_ASM


31 #i‡
__WORDSIZE
 == 64

32 
	t__jmp_buf
[8];

34 
	t__jmp_buf
[6];

	@/usr/include/sched.h

21 #i‚def 
_SCHED_H


22 
	#_SCHED_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

32 
	#__√ed_time_t


	)

33 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/bits/sched.h

22 #i‚de‡
__√ed_sched∑øm


24 #i‚de‡
_SCHED_H


30 
	#SCHED_OTHER
 0

	)

31 
	#SCHED_FIFO
 1

	)

32 
	#SCHED_RR
 2

	)

33 #ifde‡
__USE_GNU


34 
	#SCHED_BATCH
 3

	)

35 
	#SCHED_IDLE
 5

	)

37 
	#SCHED_RESET_ON_FORK
 0x40000000

	)

40 #ifde‡
__USE_MISC


42 
	#CSIGNAL
 0x000000f‡

	)

43 
	#CLONE_VM
 0x00000100

	)

44 
	#CLONE_FS
 0x00000200

	)

45 
	#CLONE_FILES
 0x00000400

	)

46 
	#CLONE_SIGHAND
 0x00000800

	)

47 
	#CLONE_PTRACE
 0x00002000

	)

48 
	#CLONE_VFORK
 0x00004000

	)

50 
	#CLONE_PARENT
 0x00008000

	)

52 
	#CLONE_THREAD
 0x00010000

	)

53 
	#CLONE_NEWNS
 0x00020000

	)

54 
	#CLONE_SYSVSEM
 0x00040000

	)

55 
	#CLONE_SETTLS
 0x00080000

	)

56 
	#CLONE_PARENT_SETTID
 0x00100000

	)

58 
	#CLONE_CHILD_CLEARTID
 0x00200000

	)

60 
	#CLONE_DETACHED
 0x00400000

	)

61 
	#CLONE_UNTRACED
 0x00800000

	)

63 
	#CLONE_CHILD_SETTID
 0x01000000

	)

65 
	#CLONE_NEWUTS
 0x04000000

	)

66 
	#CLONE_NEWIPC
 0x08000000

	)

67 
	#CLONE_NEWUSER
 0x10000000

	)

68 
	#CLONE_NEWPID
 0x20000000

	)

69 
	#CLONE_NEWNET
 0x40000000

	)

70 
	#CLONE_IO
 0x80000000

	)

74 
	ssched_∑øm


76 
	m__sched_¥i‹ôy
;

79 
	g__BEGIN_DECLS


81 #ifde‡
__USE_MISC


83 
˛⁄e
 ((*
__‚
Ë(*
__¨g
), *
__chûd_°ack
,

84 
__Êags
, *
__¨g
, ...Ë
__THROW
;

87 
	$unsh¨e
 (
__Êags
Ë
__THROW
;

90 
	$sched_gë˝u
 (Ë
__THROW
;

93 
__END_DECLS


97 #i‡!
deföed
 
__deföed_sched∑øm
 \

98 && (
deföed
 
__√ed_sched∑øm
 || deföed 
_SCHED_H
)

99 
	#__deföed_sched∑øm
 1

	)

101 
	s__sched_∑øm


103 
__sched_¥i‹ôy
;

105 #unde‡
__√ed_sched∑øm


109 #i‡
deföed
 
_SCHED_H
 && !deföed 
__˝u_£t_t_deföed


110 
	#__˝u_£t_t_deföed


	)

112 
	#__CPU_SETSIZE
 1024

	)

113 
	#__NCPUBITS
 (8 *  (
__˝u_mask
))

	)

116 
	t__˝u_mask
;

119 
	#__CPUELT
(
˝u
Ë((˝uË/ 
__NCPUBITS
)

	)

120 
	#__CPUMASK
(
˝u
Ë((
__˝u_mask
Ë1 << ((˝uË% 
__NCPUBITS
))

	)

125 
__˝u_mask
 
__bôs
[
__CPU_SETSIZE
 / 
__NCPUBITS
];

126 } 
	t˝u_£t_t
;

129 #i‡
	`__GNUC_PREREQ
 (2, 91)

130 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

131 dÿ
	`__buûtö_mem£t
 (
˝u£ç
, '\0', 
£tsize
); 0)

	)

133 
	#__CPU_ZERO_S
(
£tsize
, 
˝u£ç
) \

135 
size_t
 
__i
; \

136 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

137 
__˝u_mask
 *
__bôs
 = (
˝u£ç
)->__bits; \

138 
__i
 = 0; __ò< 
__imax
; ++__i) \

139 
__bôs
[
__i
] = 0; \

140 
	}
} 0)

	)

142 
	#__CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

143 (
__exãnsi⁄__
 \

144 ({ 
size_t
 
__˝u
 = (
˝u
); \

145 
__˝u
 < 8 * (
£tsize
) \

146 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

147 |
	`__CPUMASK
 (
__˝u
)) \

148 : 0; }))

	)

149 
	#__CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

150 (
__exãnsi⁄__
 \

151 ({ 
size_t
 
__˝u
 = (
˝u
); \

152 
__˝u
 < 8 * (
£tsize
) \

153 ? (((
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

154 &~
	`__CPUMASK
 (
__˝u
)) \

155 : 0; }))

	)

156 
	#__CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
) \

157 (
__exãnsi⁄__
 \

158 ({ 
size_t
 
__˝u
 = (
˝u
); \

159 
__˝u
 < 8 * (
£tsize
) \

160 ? ((((
__c⁄°
 
__˝u_mask
 *Ë((
˝u£ç
)->
__bôs
))[
	`__CPUELT
 (
__˝u
)] \

161 & 
	`__CPUMASK
 (
__˝u
))) != 0 \

162 : 0; }))

	)

164 
	#__CPU_COUNT_S
(
£tsize
, 
˝u£ç
) \

165 
	`__sched_˝ucou¡
 (
£tsize
, 
˝u£ç
)

	)

167 #i‡
__GNUC_PREREQ
 (2, 91)

168 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

169 (
	`__buûtö_memcmp
 (
˝u£ç1
, 
˝u£ç2
, 
£tsize
Ë=0)

	)

171 
	#__CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

172 (
__exãnsi⁄__
 \

173 ({ 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
˝u£ç1
)->
__bôs
; \

174 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
˝u£ç2
)->
__bôs
; \

175 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

176 
size_t
 
__i
; \

177 
__i
 = 0; __ò< 
__imax
; ++__i) \

178 i‡(
__bôs
[
__i
] != __bits[__i]) \

180 
__i
 =
__imax
; }))

	)

183 
	#__CPU_OP_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, 
›
) \

184 (
__exãnsi⁄__
 \

185 ({ 
˝u_£t_t
 *
__de°
 = (
de°£t
); \

186 
__c⁄°
 
__˝u_mask
 *
__¨r1
 = (
§c£t1
)->
__bôs
; \

187 
__c⁄°
 
__˝u_mask
 *
__¨r2
 = (
§c£t2
)->
__bôs
; \

188 
size_t
 
__imax
 = (
£tsize
Ë/  (
__˝u_mask
); \

189 
size_t
 
__i
; \

190 
__i
 = 0; __ò< 
__imax
; ++__i) \

191 ((
__˝u_mask
 *Ë
__de°
->
__bôs
)[
__i
] = 
__¨r1
[__i] 
›
 
__¨r2
[__i]; \

192 
__de°
; }))

	)

194 
	#__CPU_ALLOC_SIZE
(
cou¡
) \

195 ((((
cou¡
Ë+ 
__NCPUBITS
 - 1Ë/ __NCPUBITSË*  (
__˝u_mask
))

	)

196 
	#__CPU_ALLOC
(
cou¡
Ë
	`__sched_˝uÆloc
 (cou¡)

	)

197 
	#__CPU_FREE
(
˝u£t
Ë
	`__sched_˝u‰ì
 (˝u£t)

	)

199 
__BEGIN_DECLS


201 
	$__sched_˝ucou¡
 (
size_t
 
__£tsize
, c⁄° 
˝u_£t_t
 *
__£ç
)

202 
__THROW
;

203 
˝u_£t_t
 *
	$__sched_˝uÆloc
 (
size_t
 
__cou¡
Ë
__THROW
 
__wur
;

204 
	$__sched_˝u‰ì
 (
˝u_£t_t
 *
__£t
Ë
__THROW
;

206 
__END_DECLS


	@/usr/include/bits/time.h

24 #i‚de‡
__√ed_timevÆ


25 #i‚de‡
_BITS_TIME_H


26 
	#_BITS_TIME_H
 1

	)

34 
	#CLOCKS_PER_SEC
 1000000l

	)

36 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


39 
	~<bôs/ty≥s.h
>

40 
__sysc⁄f
 ();

41 
	#CLK_TCK
 ((
__˛ock_t
Ë
	`__sysc⁄f
 (2)Ë

	)

44 #ifde‡
__USE_POSIX199309


46 
	#CLOCK_REALTIME
 0

	)

48 
	#CLOCK_MONOTONIC
 1

	)

50 
	#CLOCK_PROCESS_CPUTIME_ID
 2

	)

52 
	#CLOCK_THREAD_CPUTIME_ID
 3

	)

54 
	#CLOCK_MONOTONIC_RAW
 4

	)

56 
	#CLOCK_REALTIME_COARSE
 5

	)

58 
	#CLOCK_MONOTONIC_COARSE
 6

	)

61 
	#TIMER_ABSTIME
 1

	)

67 #ifde‡
__√ed_timevÆ


68 #unde‡
__√ed_timevÆ


69 #i‚de‡
_STRUCT_TIMEVAL


70 
	#_STRUCT_TIMEVAL
 1

	)

71 
	~<bôs/ty≥s.h
>

75 
	stimevÆ


77 
__time_t
 
	mtv_£c
;

78 
__su£c⁄ds_t
 
	mtv_u£c
;

	@/usr/include/linux/errno.h

1 #i‚de‡
_LINUX_ERRNO_H


2 
	#_LINUX_ERRNO_H


	)

4 
	~<asm/î∫o.h
>

	@/usr/include/asm/errno.h

1 
	~<asm-gíîic/î∫o.h
>

	@/usr/include/asm-generic/errno.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_H


2 
	#_ASM_GENERIC_ERRNO_H


	)

4 
	~<asm-gíîic/î∫o-ba£.h
>

6 
	#EDEADLK
 35

	)

7 
	#ENAMETOOLONG
 36

	)

8 
	#ENOLCK
 37

	)

9 
	#ENOSYS
 38

	)

10 
	#ENOTEMPTY
 39

	)

11 
	#ELOOP
 40

	)

12 
	#EWOULDBLOCK
 
EAGAIN


	)

13 
	#ENOMSG
 42

	)

14 
	#EIDRM
 43

	)

15 
	#ECHRNG
 44

	)

16 
	#EL2NSYNC
 45

	)

17 
	#EL3HLT
 46

	)

18 
	#EL3RST
 47

	)

19 
	#ELNRNG
 48

	)

20 
	#EUNATCH
 49

	)

21 
	#ENOCSI
 50

	)

22 
	#EL2HLT
 51

	)

23 
	#EBADE
 52

	)

24 
	#EBADR
 53

	)

25 
	#EXFULL
 54

	)

26 
	#ENOANO
 55

	)

27 
	#EBADRQC
 56

	)

28 
	#EBADSLT
 57

	)

30 
	#EDEADLOCK
 
EDEADLK


	)

32 
	#EBFONT
 59

	)

33 
	#ENOSTR
 60

	)

34 
	#ENODATA
 61

	)

35 
	#ETIME
 62

	)

36 
	#ENOSR
 63

	)

37 
	#ENONET
 64

	)

38 
	#ENOPKG
 65

	)

39 
	#EREMOTE
 66

	)

40 
	#ENOLINK
 67

	)

41 
	#EADV
 68

	)

42 
	#ESRMNT
 69

	)

43 
	#ECOMM
 70

	)

44 
	#EPROTO
 71

	)

45 
	#EMULTIHOP
 72

	)

46 
	#EDOTDOT
 73

	)

47 
	#EBADMSG
 74

	)

48 
	#EOVERFLOW
 75

	)

49 
	#ENOTUNIQ
 76

	)

50 
	#EBADFD
 77

	)

51 
	#EREMCHG
 78

	)

52 
	#ELIBACC
 79

	)

53 
	#ELIBBAD
 80

	)

54 
	#ELIBSCN
 81

	)

55 
	#ELIBMAX
 82

	)

56 
	#ELIBEXEC
 83

	)

57 
	#EILSEQ
 84

	)

58 
	#ERESTART
 85

	)

59 
	#ESTRPIPE
 86

	)

60 
	#EUSERS
 87

	)

61 
	#ENOTSOCK
 88

	)

62 
	#EDESTADDRREQ
 89

	)

63 
	#EMSGSIZE
 90

	)

64 
	#EPROTOTYPE
 91

	)

65 
	#ENOPROTOOPT
 92

	)

66 
	#EPROTONOSUPPORT
 93

	)

67 
	#ESOCKTNOSUPPORT
 94

	)

68 
	#EOPNOTSUPP
 95

	)

69 
	#EPFNOSUPPORT
 96

	)

70 
	#EAFNOSUPPORT
 97

	)

71 
	#EADDRINUSE
 98

	)

72 
	#EADDRNOTAVAIL
 99

	)

73 
	#ENETDOWN
 100

	)

74 
	#ENETUNREACH
 101

	)

75 
	#ENETRESET
 102

	)

76 
	#ECONNABORTED
 103

	)

77 
	#ECONNRESET
 104

	)

78 
	#ENOBUFS
 105

	)

79 
	#EISCONN
 106

	)

80 
	#ENOTCONN
 107

	)

81 
	#ESHUTDOWN
 108

	)

82 
	#ETOOMANYREFS
 109

	)

83 
	#ETIMEDOUT
 110

	)

84 
	#ECONNREFUSED
 111

	)

85 
	#EHOSTDOWN
 112

	)

86 
	#EHOSTUNREACH
 113

	)

87 
	#EALREADY
 114

	)

88 
	#EINPROGRESS
 115

	)

89 
	#ESTALE
 116

	)

90 
	#EUCLEAN
 117

	)

91 
	#ENOTNAM
 118

	)

92 
	#ENAVAIL
 119

	)

93 
	#EISNAM
 120

	)

94 
	#EREMOTEIO
 121

	)

95 
	#EDQUOT
 122

	)

97 
	#ENOMEDIUM
 123

	)

98 
	#EMEDIUMTYPE
 124

	)

99 
	#ECANCELED
 125

	)

100 
	#ENOKEY
 126

	)

101 
	#EKEYEXPIRED
 127

	)

102 
	#EKEYREVOKED
 128

	)

103 
	#EKEYREJECTED
 129

	)

106 
	#EOWNERDEAD
 130

	)

107 
	#ENOTRECOVERABLE
 131

	)

109 
	#ERFKILL
 132

	)

	@/usr/include/asm-generic/errno-base.h

1 #i‚de‡
_ASM_GENERIC_ERRNO_BASE_H


2 
	#_ASM_GENERIC_ERRNO_BASE_H


	)

4 
	#EPERM
 1

	)

5 
	#ENOENT
 2

	)

6 
	#ESRCH
 3

	)

7 
	#EINTR
 4

	)

8 
	#EIO
 5

	)

9 
	#ENXIO
 6

	)

10 
	#E2BIG
 7

	)

11 
	#ENOEXEC
 8

	)

12 
	#EBADF
 9

	)

13 
	#ECHILD
 10

	)

14 
	#EAGAIN
 11

	)

15 
	#ENOMEM
 12

	)

16 
	#EACCES
 13

	)

17 
	#EFAULT
 14

	)

18 
	#ENOTBLK
 15

	)

19 
	#EBUSY
 16

	)

20 
	#EEXIST
 17

	)

21 
	#EXDEV
 18

	)

22 
	#ENODEV
 19

	)

23 
	#ENOTDIR
 20

	)

24 
	#EISDIR
 21

	)

25 
	#EINVAL
 22

	)

26 
	#ENFILE
 23

	)

27 
	#EMFILE
 24

	)

28 
	#ENOTTY
 25

	)

29 
	#ETXTBSY
 26

	)

30 
	#EFBIG
 27

	)

31 
	#ENOSPC
 28

	)

32 
	#ESPIPE
 29

	)

33 
	#EROFS
 30

	)

34 
	#EMLINK
 31

	)

35 
	#EPIPE
 32

	)

36 
	#EDOM
 33

	)

37 
	#ERANGE
 34

	)

	@
1
.
1
/usr/include
133
4091
include/kernel/zx_clock_server.h
include/kernel/zx_clockserver_heap.h
include/kernel/zx_err.h
include/kernel/zx_err_strings.h
include/kernel/zx_helper.h
include/kernel/zx_irq_device.h
include/kernel/zx_irq_vic.h
include/kernel/zx_kernel_body.h
include/kernel/zx_kernel_config.h
include/kernel/zx_kernel_head.h
include/kernel/zx_memory.h
include/kernel/zx_ns.h
include/kernel/zx_ns_tree.h
include/kernel/zx_queue.h
include/kernel/zx_ready_queue.h
include/kernel/zx_system_call_handlers.h
include/kernel/zx_system_calls.h
include/kernel/zx_tasks.h
include/kernel/zx_testing.h
include/kernel/zx_timer.h
include/kernel/zx_uart.h
include/kernel/zx_uart_io.h
include/kernel/zx_uart_server.h
include/project/backup/zx_a0.h
include/project/backup/zx_a0_graphics.h
include/project/backup/zx_a0_timer.h
include/project/backup/zx_a0_utilities.h
include/project/backup/zx_calibration.h
include/project/backup/zx_sensor.h
include/project/backup/zx_shortest_path.h
include/project/backup/zx_track_data.h
include/project/backup/zx_track_functions.c
include/project/backup/zx_track_functions.h
include/project/backup/zx_track_node.h
include/project/backup/zx_track_sensing.h
include/project/backup/zx_train_functions.h
include/project/backup/zx_ui.h
include/project/zx_project.h
include/project/zx_project_calibration.h
include/project/zx_project_graphics.h
include/project/zx_project_sensor.h
include/project/zx_project_shortest_path.h
include/project/zx_project_timer.h
include/project/zx_project_track_data.h
include/project/zx_project_track_functions.c
include/project/zx_project_track_functions.h
include/project/zx_project_track_node.h
include/project/zx_project_track_sensing.h
include/project/zx_project_train_functions.h
include/project/zx_project_ui.h
include/project/zx_project_utilities.h
src/generator.c
src/kernel/zx_clock_server.c
src/kernel/zx_clockserver_heap.c
src/kernel/zx_helper.c
src/kernel/zx_irq_device.c
src/kernel/zx_irq_vic.c
src/kernel/zx_kernel_body.c
src/kernel/zx_kernel_head.c
src/kernel/zx_memory.c
src/kernel/zx_ns.c
src/kernel/zx_ns_tree.c
src/kernel/zx_queue.c
src/kernel/zx_ready_queue.c
src/kernel/zx_receive_queue.c
src/kernel/zx_system_call_handlers.c
src/kernel/zx_system_calls.c
src/kernel/zx_testing.c
src/kernel/zx_timer.c
src/kernel/zx_uart1_receive_server.c
src/kernel/zx_uart1_transmit_server.c
src/kernel/zx_uart2_receive_server.c
src/kernel/zx_uart2_transmit_server.c
src/kernel/zx_uart_io.c
src/kernel/zx_uart_server.c
src/project/zx_project_calibration.c
src/project/zx_project_graphics.c
src/project/zx_project_sensor.c
src/project/zx_project_shortest_path.c
src/project/zx_project_track_data.c
src/project/zx_project_track_functions.c
src/project/zx_project_track_manager.c
src/project/zx_project_track_sensing.c
src/project/zx_project_train_functions.c
src/project/zx_project_ui.c
src/project/zx_project_utilities.c
/usr/include/stdio.h
/usr/include/bits/stdio-ldbl.h
/usr/include/bits/stdio.h
/usr/include/bits/stdio2.h
/usr/include/bits/stdio_lim.h
/usr/include/bits/sys_errlist.h
/usr/include/bits/types.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/_G_config.h
/usr/include/bits/libio-ldbl.h
/usr/include/bits/predefs.h
/usr/include/bits/stdio-lock.h
/usr/include/bits/typesizes.h
/usr/include/bits/wordsize.h
/usr/include/ctype.h
/usr/include/gnu/stubs.h
/usr/include/sys/cdefs.h
/usr/include/bits/libc-lock.h
/usr/include/endian.h
/usr/include/gconv.h
/usr/include/gnu/stubs-32.h
/usr/include/gnu/stubs-64.h
/usr/include/wchar.h
/usr/include/xlocale.h
/usr/include/bits/byteswap.h
/usr/include/bits/endian.h
/usr/include/bits/wchar-ldbl.h
/usr/include/bits/wchar.h
/usr/include/bits/wchar2.h
/usr/include/errno.h
/usr/include/gnu/option-groups.h
/usr/include/pthread.h
/usr/include/tls.h
/usr/include/wctype.h
/usr/include/bits/errno.h
/usr/include/bits/pthreadtypes.h
/usr/include/bits/setjmp.h
/usr/include/sched.h
/usr/include/time.h
/usr/include/bits/sched.h
/usr/include/bits/time.h
/usr/include/linux/errno.h
/usr/include/asm/errno.h
/usr/include/asm-generic/errno.h
/usr/include/asm-generic/errno-base.h
